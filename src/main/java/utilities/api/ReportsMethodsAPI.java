package utilities.api;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import java.util.regex.PatternSyntaxException;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import org.json.JSONArray;import org.json.JSONObject;import com.aventstack.extentreports.ExtentTest;import com.github.javafaker.Faker;public class ReportsMethodsAPI extends RequestMethodsUtils{    CommonDBUtils common = new CommonDBUtils();    List<Map<String, String>> listOfReportTypesFromDB = new ArrayList<Map<String, String>>();    public String templateName, isEnabledStatus, createdOnToDate,labelName;    Faker faker = new Faker();    Random rand = new Random();    CommonMethods commonMethods = new CommonMethods();    public String getJSONArrayDesc() {        Random rand = new Random();        String specificReportDesc;        String reponsebody = response.getBody().asString();        System.out.println("REsponse body " + reponsebody);        JSONArray jsonarray = new JSONArray(reponsebody);        System.out.println("Reports length " + jsonarray.length());        int actualCount = rand.nextInt(jsonarray.length());        System.out.println("Actual count " + actualCount);        specificReportDesc = jsonarray.getString(actualCount).replaceAll("\"", "");        System.out.println("Specific report is " + specificReportDesc);        return specificReportDesc;    }//	public JSONObject getSpecificReportBasedOncustomer() {////		String jsonRes = response.getBody().asString();//		////		JSONParser jsonParser = new JSONParser();//		JSONObject jobj;//		JSONObject reportdetails = null;//		try {//			jobj = (JSONObject) jsonParser.parse(jsonRes);//			System.out.println("JSON object " + jobj);//			JSONArray storedReportsResponse = (JSONArray) jobj.get("storedReportsList");//			Random rand = new Random();//			System.out.println("Total number of Stored reports " + storedReportsResponse.length());//			int actualCount = rand.nextInt(storedReportsResponse.length());//			System.out.println("Actual count " + actualCount);//			reportdetails = (JSONObject) storedReportsResponse.get(actualCount);//			System.out.println("Report details " + reportdetails);////		} catch (ParseException e) {//			// TODO Auto-generated catch block//			e.printStackTrace();//		}////		// System.out.println("Specific report "+specificReportDesc);//		return reportdetails;//	}//	public JSONObject getReportTypeDescription(String reportTypeDesc) {//		JSONObject reportValues = new JSONObject();//		if (!reportTypeDesc.isEmpty()) {////			reportValues = jsonObjectBuilder("description", reportTypeDesc);////			System.out.println("Inside of report type description with key and values " + reportValues.toString());//		}//		else {//			reportValues = jsonObjectBuilder("description", "");//		}////		return reportValues;////	}//	public String getCreatedOnToDate() {////		String newDateFormat = "";//		String createdOnToDateFromDB = common.getProcessingDateFromMClients();////		DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");//		try {//			dateFormatter.parse(createdOnToDateFromDB);//			Date newDate;//			Calendar cal = Calendar.getInstance();//			cal.setTime(dateFormatter.parse(createdOnToDateFromDB));////			newDate = cal.getTime();//			DateFormat df = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");////			newDateFormat = df.format(newDate);//			System.out.println("New date format " + newDateFormat);//		} catch (java.text.ParseException e) {//			// TODO Auto-generated catch block//			e.printStackTrace();//		}////		return newDateFormat;//	}    public String getCreatedOnFromDate(String currentProcessingDate) {        String pastDate = common.enterADateValueInStatusBeginDateField("Past", currentProcessingDate,"olsFormat");        return pastDate;    }    public void validateStoredReportFilenameFromDB(String reportType) {        boolean fileNamePresenceFromDB = false;        Map<String, String> userdetails = new HashMap<String,String>();        userdetails = common.getUserDetailsFromDB(PropUtils.getPropValue(inputProp, "UserNameAPI"));        String userOid = userdetails.get("USER_OID");        String customerNo = common.getCustomerNumberFromDB("associatedUser");        fileNamePresenceFromDB = common.checkingThePresenceOfFileNameInStoredReportsTableFromDB(userOid, customerNo,reportType);        if(fileNamePresenceFromDB) {            System.out.println("File name is present in dB");        }    }    public String getReportTypesBasedOnReportCategories() {        Random rand = new Random();        JSONObject jobj;        String jsonRes = response.getBody().asString();        JSONArray jsonarray = new JSONArray(jsonRes);        int actualCount = jsonarray.length();        int row = rand.nextInt(actualCount);        jobj = jsonarray.getJSONObject(row);        System.out.println("Json object for report types "+jobj);        String description = jobj.getString("description");        System.out.println("Report type description is "+description);        return description;    }    public boolean validateReportResponseBasedOnReportcategoryDesc() {        refreshPropertiesFile();        String reportCatDec = PropUtils.getPropValue(inputProp, "reportCategory");        boolean reportResponseValidated = false;        JSONObject reportTypesResponse;        Map<String, String> userdetails = new HashMap<String, String>();        List<Map<String, String>> listOfReportsDB = new ArrayList<Map<String, String>>();        Map<String, String> reportTypeDetailsFromDB = new HashMap<String, String>();        userdetails = common.getUserDetailsFromDB(PropUtils.getPropValue(inputProp, "UserNameAPI"));        String userOid = userdetails.get("USER_OID");        String reportCategoryOid = common.getReportCategoryOidFromReportCategoriesTable(reportCatDec);        listOfReportsDB = common.getReportCategoriesFromReportTypeTemplateViewTable(reportCategoryOid, userOid);        String jsonRes = response.getBody().asString();        System.out.println("Json response for report types " + jsonRes);        JSONArray jsonarray = new JSONArray(jsonRes);        for (int i = 0; i < jsonarray.length(); i++) {            System.out.println("Response size is " + jsonarray.length());            reportTypesResponse = jsonarray.getJSONObject(i);            System.out.println("Json object " + reportTypesResponse);            for (int j = 0; j < listOfReportsDB.size(); j++) {                System.out.println("DB details size is " + listOfReportsDB.size());                reportTypeDetailsFromDB = listOfReportsDB.get(j);                System.out.println("Row wise is " + reportTypeDetailsFromDB);                String reportDescFromDB = reportTypeDetailsFromDB.get("DESCRIPTION");                if (reportTypesResponse.getString("description").replaceAll("\"", "").equals(reportDescFromDB)                        && reportTypesResponse.getString("isAdhoc").replaceAll("\"", "")                        .equals(reportTypeDetailsFromDB.get("IS_ADHOC"))                        && reportTypesResponse.getString("isOnlineScheduled").replaceAll("\"", "")                        .equals(reportTypeDetailsFromDB.get("IS_ONLINE_SCHEDULED"))) {                    System.out.println("Inside of IF statement for report type based on report category validation");                    reportResponseValidated = true;                    break;                }                else {                    System.out.println("Inside of else if statement");                }            }        }        return reportResponseValidated;    }//	public JSONObject getJSONObjectInsideOfJSONArray() {//		Random rand = new Random();//		JSONObject jobj;//		String jsonRes = response.getBody().asString();//		JSONArray jsonarray = new JSONArray(jsonRes);//		int actualCount = jsonarray.length();//		int count = rand.nextInt(actualCount);//		System.out.println("actual count "+count);//		jobj = jsonarray.getJSONObject(count);//		System.out.println("Json object "+jobj);////		return jobj;//	}    public boolean validateReportParamsFromResponseAndDB() {        List<Map<String, String>> listOfReportParamsDB = new ArrayList<Map<String, String>>();        Map<String, String> spcificReportParamsFromDB = new HashMap<String, String>();        boolean isResponseAndDBValidated = false;        JSONObject reportParamsFromResponse;        reportParamsFromResponse = commonMethods.getJSONObjectInsideOfJSONArray();        System.out.println(" Report params from response is "+reportParamsFromResponse.getString("label"));        listOfReportParamsDB = common.getReportParamsBasedOnReportType(PropUtils.getPropValue(inputProp, "reportTypeBasedOnReportCategory"));        System.out.println("List of report Params from DB is "+listOfReportParamsDB);        for(int i=0;i<listOfReportParamsDB.size();i++) {            spcificReportParamsFromDB = listOfReportParamsDB.get(i);            String labelValue = spcificReportParamsFromDB.get("LABEL");            System.out.println("LAble value "+labelValue);            if(reportParamsFromResponse.getString("label").equals(spcificReportParamsFromDB.get("LABEL"))                    ||reportParamsFromResponse.getString("dataType").equals(spcificReportParamsFromDB.get("DESCRIPTION"))            ) {                System.out.println("Inside of if statement for report params");                isResponseAndDBValidated = true;                break;            }            else{                System.out.println("Inside of else if statement");            }        }        return isResponseAndDBValidated;    }    public String getReportFrequencyDesc(String reportType) {        String reporFrequencyEndPoint = PropUtils.getPropValue(inputProp, "lookupForReportFrequencies");        //	String reportTypeDesc = PropUtils.getPropValue(inputProp, "reportTypeBasedOnReportCategory");        response = getRequestAsBearerAuth(reporFrequencyEndPoint+reportType,PropUtils.getPropValue(inputProp, "AuthorizationToken"));        String reportFrequency = getJSONArrayDesc();        System.out.println("Report frequency description "+reportFrequency);        return reportFrequency;    }    public String getReportDeliveryTypeDesc(String reportType) {        JSONObject reportDeliveryTypeObj;        String reportDeliveryEndPoint = PropUtils.getPropValue(inputProp, "lookupForReportDeliveryType");        //	String reportTypeDesc = PropUtils.getPropValue(inputProp, "reportTypeBasedOnReportCategory");        response = getRequestAsBearerAuth(reportDeliveryEndPoint+reportType,PropUtils.getPropValue(inputProp, "AuthorizationToken"));        reportDeliveryTypeObj = commonMethods.getJSONObjectInsideOfJSONArray();        System.out.println("REport frequency description "+reportDeliveryTypeObj);        String deliveryTypeDesc = reportDeliveryTypeObj.getString("paramDescription");        return deliveryTypeDesc;    }    public JSONArray createReportTemplateParams() {        Random rand = new Random();        JSONArray reportAssignmentParameters = new JSONArray();        JSONObject objectBuilder = new JSONObject();        JSONObject objectBuilder1 = new JSONObject();        JSONObject objectBuilder2 = new JSONObject();        JSONObject reportParamObject;        String jsonRes = response.getBody().asString();        JSONArray jsonarray = new JSONArray(jsonRes);        System.out.println("JSON Array size is " + jsonarray.length());        for (int i = 0; i < jsonarray.length(); i++) {            reportParamObject = jsonarray.getJSONObject(i);            System.out.println("JSON Objects for report parmas "+reportParamObject);            labelName = reportParamObject.getString("label");            if (jsonarray.length() == 1) {                if (labelName.equals("customer_no") || labelName.equals("account_no")) {                    objectBuilder.put("label", labelName);                    objectBuilder.put("value", common.getCustomerNumberFromDB("associatedUser"));                    reportAssignmentParameters.put(objectBuilder);                }            } else if (jsonarray.length() == 2) {                if (labelName.equals("customer_no") || labelName.equals("account_no")) {                    objectBuilder.put("label", labelName);                    objectBuilder.put("value", common.getCustomerNumberFromDB("associatedUser"));                    reportAssignmentParameters.put(objectBuilder);                } else {                    objectBuilder1.put("label", labelName);                    objectBuilder1.put("value", commonMethods.getCreatedOnToDate());                    reportAssignmentParameters.put(objectBuilder1);                }            } else {                if (labelName.equals("customer_no") || labelName.equals("account_no")) {                    objectBuilder.put("label", labelName);                    objectBuilder.put("value", common.getCustomerNumberFromDB("associatedUser"));                    reportAssignmentParameters.put(objectBuilder);                } else if (labelName.equals("date_range")||labelName.equals("date_issued") ) {                    objectBuilder1.put("label", labelName);                    objectBuilder1.put("value", commonMethods.getCreatedOnToDate());                    reportAssignmentParameters.put(objectBuilder1);                } else if (labelName.equals("sort_option_cid")||labelName.equals("card_status")||                        labelName.equals("Sort order")||labelName.equals("transactions_qty")) {                    if(reportParamObject.has("pramValues")){                        JSONArray params = reportParamObject.getJSONArray("pramValues");                        System.out.println("JSON array " + params);                        int actualcount = rand.nextInt(params.length());                        JSONObject paramValues = params.getJSONObject(actualcount);                        System.out.println("Params value is " + paramValues);                        String paramDescription = paramValues.get("paramId").toString();                        objectBuilder2.put("label", labelName);                        objectBuilder2.put("value", paramDescription);                        reportAssignmentParameters.put(objectBuilder2);                    }                    else{                        objectBuilder2.put("label", labelName);                        objectBuilder2.put("value", "500");                        reportAssignmentParameters.put(objectBuilder2);                    }                }            }        }        System.out.println("Report Assignment params " + reportAssignmentParameters);        return reportAssignmentParameters;    }    public boolean validateNewScheduleReportFromDB(String templateName) {        Map<String, String> userdetails = new HashMap<String, String>();        //	Map<String, String> reportDetails = new HashMap<String, String>();        userdetails = common.getUserDetailsFromDB(PropUtils.getPropValue(inputProp, "UserNameAPI"));        String userOid = userdetails.get("USER_OID");        boolean newReportPresenceInDB = common.checkingThePresenceOfCreatedScheduledtemplate(userOid, templateName,labelName,PropUtils.getPropValue(inputProp, "reportTypeBasedOnReportCategory"));        return newReportPresenceInDB;    }    public boolean validateScheduledReportDetailsBasedOnTemplateName() {        boolean isTemplateNamePresence = false;        Map<String, String> userdetails = new HashMap<String, String>();        Map<String, String> reporTemplateDetails = new HashMap<String, String>();        userdetails = common.getUserDetailsFromDB(PropUtils.getPropValue(inputProp, "UserNameAPI"));        String userOid = userdetails.get("USER_OID");        String reportTypeDescription = response.jsonPath().getString("reportType");        String scheduledTemplateName = response.jsonPath().getString("description");        reporTemplateDetails = common.getAllScheduledRepordetails(userOid, scheduledTemplateName,reportTypeDescription);        String reportAssignmentOidFromResponse = response.jsonPath().getString("reportAssignmentOid");        System.out.println("Report Assignment oid from response is "+reportAssignmentOidFromResponse);        String reportAssignment = reporTemplateDetails.get("REPORT_ASSIGNMENT_OID");        System.out.println("Report assignment from DB is "+reportAssignment);        String createdOnDateFromDB = reporTemplateDetails.get("CREATED_ON");        long date = timeStampToEpochMillisSec(createdOnDateFromDB);        System.out.println("Converted date "+date);        if(reportAssignmentOidFromResponse.equals(reportAssignment)&&response.jsonPath().getString("reportType").equals(reporTemplateDetails.get("REPORT_TYPE_DESCRITPTION"))                && response.jsonPath().getString("emailAddress").equals(reporTemplateDetails.get("EMAIL_ADDRESS") )                && response.jsonPath().getString("description").equals(reporTemplateDetails.get("REPORT_ASSIGNMENT_DESCRIPTION"))                && response.jsonPath().getString("isEnabled").equals(reporTemplateDetails.get("IS_ENABLED") )                && response.jsonPath().getString("frequencyDescription").equals(reporTemplateDetails.get("FREQUENCY_DESCRIPTION") )                && response.jsonPath().getString("deliveryType").equals(reporTemplateDetails.get("DELIVERY_TYPE_DESCRIPTION") )                && response.jsonPath().getString("isAdhocReport").equals(reporTemplateDetails.get("IS_ADHOC_REPORT")))        {            System.out.println("Inside of if statement and validated report type description ");            isTemplateNamePresence = true;        }        else {            System.out.println("Inside of else if statement");        }        return isTemplateNamePresence;    }    public JSONArray getReportTypeBasedOnArrayFormat(String userOid, String scenarioType, String associatedReport) {        System.out.println("scenarioType "+scenarioType);        JSONArray reportTypes = new JSONArray();        JSONObject reportValues = new JSONObject();        Map<String, String> reportTypeDescFromDB = new HashMap<String, String>();        listOfReportTypesFromDB = common.getListOfReportsBasedOnLoggedOnUser(userOid,associatedReport);        System.out.println("Lis of reports size is "+listOfReportTypesFromDB.size());        int count = rand.nextInt(listOfReportTypesFromDB.size());        System.out.println("Random count is "+count);        reportTypeDescFromDB = listOfReportTypesFromDB.get(count);        System.out.println("Specific report  from dB is "+reportTypeDescFromDB);        if(scenarioType.equals("multipleReportTypeFilter")) {            System.out.println("Insie of if statement");            reportValues = jsonObjectBuilder("description", reportTypeDescFromDB.get("DESCRIPTION"));            reportTypes.put(reportValues);            reportTypeDescFromDB = listOfReportTypesFromDB.get(0);            System.out.println("Report type description from DB is "+reportTypeDescFromDB);            reportValues = jsonObjectBuilder("description", reportTypeDescFromDB.get("DESCRIPTION"));            reportTypes.put(reportValues);            System.out.println("Inside of report type description with key and values " + reportTypes);        }        else {            reportValues = jsonObjectBuilder("description", reportTypeDescFromDB.get("DESCRIPTION"));            reportTypes.put(reportValues);            System.out.println("Inside of report type description with key and values " + reportTypes);            templateName = reportTypeDescFromDB.get("REPORT_ASSIGNMENT_DESCRIPTION");            System.out.println("Scheduled template nama "+templateName);            isEnabledStatus = reportTypeDescFromDB.get("IS_ENABLED");            System.out.println("User report enable status "+isEnabledStatus);            createdOnToDate = reportTypeDescFromDB.get("CREATED_ON");            System.out.println("User created on date is "+createdOnToDate);        }        return reportTypes;    }    public String getTemplateNameFromDB(String templateType) {        if(templateType.equals("validTemplateName")) {            System.out.println("Inside of if");        }        else if(templateType.equals("invalidTemplateName")){            templateName = "invalid";        }        return templateName;    }    public String getIsEnbaledStatusFromDB() {        return isEnabledStatus;    }    public String getCreatedOnToDateForScheduledreport() {        String newDateFormat = "";        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        try {            dateFormatter.parse(createdOnToDate);            Date newDate;            Calendar cal = Calendar.getInstance();            cal.setTime(dateFormatter.parse(createdOnToDate));            newDate = cal.getTime();            DateFormat df = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");            newDateFormat = df.format(newDate);            System.out.println("New date format " + newDateFormat);        } catch (java.text.ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return newDateFormat;    }    public String getReportTypeBasedOnUserFromDB(String userOid, String associatedReport) {        Map<String, String> reportTypeDescFromDB = new HashMap<String, String>();        listOfReportTypesFromDB = common.getListOfReportsBasedOnLoggedOnUser(userOid,associatedReport);        System.out.println("Lis of reports size is "+listOfReportTypesFromDB.size());        int count = rand.nextInt(listOfReportTypesFromDB.size());        System.out.println("Random count is "+count);        reportTypeDescFromDB = listOfReportTypesFromDB.get(count);        System.out.println("Specific report  from dB is "+reportTypeDescFromDB);        String reportTypeDescription = reportTypeDescFromDB.get("DESCRIPTION");        templateName = reportTypeDescFromDB.get("REPORT_ASSIGNMENT_DESCRIPTION");        return reportTypeDescription;    }}