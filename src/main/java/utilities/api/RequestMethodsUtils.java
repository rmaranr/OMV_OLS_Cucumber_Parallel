package utilities.api;import org.json.JSONObject;import com.aventstack.extentreports.ExtentTest;import com.github.javafaker.Faker;import io.restassured.RestAssured;import io.restassured.config.EncoderConfig;import io.restassured.http.ContentType;import io.restassured.response.Response;import javax.json.Json;import javax.json.JsonObject;public class RequestMethodsUtils extends BaseUtils {    /**     * Set the request header to include the authorization token     */    /*Get Request*/    public Response getRequestAsBearerAuth(String endPoint, String accessToken) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + accessToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).when();        System.out.println("Request info::" + request.log().all());        response = request.get(RestAssured.baseURI + endPoint);        return response;    }    public Response getRequestWithPath(String endPoint, String accessToken) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + accessToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).when();        System.out.println("Request info::" + request.log().all());        response = request.get(RestAssured.baseURI + endPoint);        return response;    }    public Response getRequestAsBasicAuthWithQueryParams(String endPoint, String accessToken, String logOnID, String url) {        RestAssured.urlEncodingEnabled = false;        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Basic " + accessToken).contentType(ContentType.JSON).when().queryParam("username", logOnID).queryParam("url", url);        System.out.println("Request info::" + request.log().all());        response = request.get(RestAssured.baseURI + endPoint);        return response;    }    public Response getRequestAsBasicAuthWithQueryParamsForTokenValidation(String endPoint, String accessToken, String token) {        RestAssured.urlEncodingEnabled = false;        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Basic " + accessToken).contentType(ContentType.JSON).when().queryParam("token", token);        System.out.println("Request info::" + request.log().all());        response = request.get(RestAssured.baseURI + endPoint);        return response;    }    public Response getRequestAsBearerAuthWithSingleQueryParam(String endPoint, String bearerToken, String queryParamForKey, String queryParamForValue) {        RestAssured.urlEncodingEnabled = true;        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + bearerToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).when().queryParam(queryParamForKey, queryParamForValue);        System.out.println("Request info::" + request.log().all());        System.out.println("Base URL " + RestAssured.baseURI + endPoint);        response = request.get(RestAssured.baseURI + endPoint);        return response;    }    public Response getRequestAsBearerAuthWithMultipleQueryParams(String endPoint, String bearerToken, String firstQueryParamKey, String firstQueryParamValue,String secondQueryParamKey,String secondQueryParamValue) {        RestAssured.urlEncodingEnabled = true;        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + bearerToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).when().queryParam(firstQueryParamKey, firstQueryParamValue).queryParam(secondQueryParamKey, secondQueryParamValue);        System.out.println("Request info::" + request.log().all());        System.out.println("Base URL " + RestAssured.baseURI + endPoint);        response = request.get(RestAssured.baseURI + endPoint);        return response;    }    /*Post Request*/    public Response postRequestAsBearerAuthWithBodyData(String endPoint, String reqParams, String accessToken) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + accessToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).body(reqParams.toString()).when();        System.out.println("Request info::" + request.log().all());        response = request.post(RestAssured.baseURI + endPoint);        return response;    }    public Response postRequestAsBearerAuthWithNoBodyData(String endPoint, String bearerToken) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + bearerToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).when();        System.out.println("Request info::" + request.log().all());        response = request.post(RestAssured.baseURI + endPoint);        return response;    }    public Response postRequestAsBasicAuthWithBodyData(String endPoint, JSONObject reqParams, String accessToken) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Basic " + accessToken).header("API-Version","2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).body(reqParams.toString()).when();        System.out.println("Request info::" + request.log().all());        response = request.post(RestAssured.baseURI + endPoint);//		request.post(RestAssured.baseURI + endPoint,reqParams);        return response;    }    /*Put Request*/    public Response putRequestAsBearerAuthWithBodyData(String endPoint, String reqParams, String accessToken) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + accessToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).body(reqParams.toString()).when();        System.out.println("Request info::" + request.log().all());        response = request.put(RestAssured.baseURI + endPoint);        return response;    }    public Response putRequestAsBearerAuthWithBodyDataWithQueryParam(String endPoint, String reqParams, String accessToken, boolean value) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + accessToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).body(reqParams.toString()).when().queryParam("reissueAllowed", value);        System.out.println("Request info::" + request.log().all());        response = request.put(RestAssured.baseURI + endPoint);        return response;    }    //This methos is for passing query param    public Response putRequestAsBearerAuthWithSingleQueryParam(String endPoint, String bearerToken, String queryParamKey, String queryParamValue, String reqParams) {        RestAssured.urlEncodingEnabled = false;        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + bearerToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).body(reqParams.toString()).when().queryParam(queryParamKey, queryParamValue);        System.out.println("Request info::" + request.log().all());        System.out.println("Base URL " + RestAssured.baseURI + endPoint);        response = request.put(RestAssured.baseURI + endPoint);        return response;    }    /*Delete Request*/    public Response deleteRequestAsBearerAuth(String endPoint, String reqParams, String accessToken) {        request = RestAssured.given().config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))).header("Authorization", "Bearer " + accessToken).header("API-Version", "2.0.0").header("Current-Client-Mid", "101").contentType(ContentType.JSON).body(reqParams.toString()).when();        System.out.println("Request info::" + request.log().all());        response = request.delete(RestAssured.baseURI + endPoint);        return response;    }}