package utilities.api;import org.apache.commons.configuration.ConfigurationException;import org.apache.commons.configuration.PropertiesConfiguration;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.Properties;public class PropUtils {    /*****************************************************************************     * Name : getPropFile Description : Gives the Relative path of Properties     * file, which is used as Object repository Input Content : name and path of     * the properties file     *****************************************************************************/    public static Properties properties;    public static File getPropFile(final String FILE_PATH, final String FILE_NAME) {        // Returns the Properties File        return new File(FILE_PATH, FILE_NAME);    }    /*****************************************************************************     * Name : getProps Description : Reads the Properties file Input Content :     * Instance of the properties file     *****************************************************************************/    public static Properties getProps(final File file) {        Properties properties = null;        try {            properties = new Properties();            // Reading the properties file            properties.load(new FileInputStream(file));        } catch (FileNotFoundException fileNotFoundException) {            System.err.println(fileNotFoundException);        } catch (IOException ioException) {            System.err.println(ioException);        }        return properties;    }    /*****************************************************************************     * Name : getPropValue Description : Returns the the Property value     * depending on the key Input Content : Properties Object, key of the     * required property     *****************************************************************************/    public static String getPropValue(Properties properties, String key) {        // Returning the Property value depends on Key        String propValue = "";        try{            propValue = properties.getProperty(key);        }catch(NullPointerException e){            System.out.println("Property value is not present");        }        if(propValue==null){            return "";        }else {            return properties.getProperty(key);        }    }    /*****************************************************************************     * Name : setProps Description : Set the properties Instance Input Content :     * Properties Object     *****************************************************************************/    public static void setProps(String key, String value, String filePath) {        PropertiesConfiguration props = null;        try {            props = new PropertiesConfiguration(filePath);            props.setProperty(key,value);            props.save();            properties = getProps(new File(filePath));        } catch (ConfigurationException ex) {            ex.printStackTrace();        }    }//    public static void setProperty(String key, String value, String filePath) {//        PropertiesConfiguration props = null;//        try {//            props = new PropertiesConfiguration(filePath);//            props.setProperty(key,value);//            props.save();//        } catch (ConfigurationException ex) {//            ex.printStackTrace();//        }////    }    /*****************************************************************************     * Name : clearProps Description : Clearing the properties Instance Input     * Content : Properties Object     *****************************************************************************/    public static void clearProps(String filePath) {        // Clearing the Properties Object        properties.clear();        PropertiesConfiguration props = null;        try {            props = new PropertiesConfiguration(filePath);            props.clear();            props.save();        } catch (ConfigurationException ex) {            ex.printStackTrace();        }    }}