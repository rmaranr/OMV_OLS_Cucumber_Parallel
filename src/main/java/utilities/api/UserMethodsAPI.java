package utilities.api;import com.github.javafaker.Faker;import io.cucumber.java.Scenario;import org.json.JSONArray;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class UserMethodsAPI extends BaseUtils {    Faker faker = new Faker();    String newUserIdGeneration, emailAddress, displayName, mobilePhoneNumber, otherPhoneNumber;    CommonDBUtils common = new CommonDBUtils();    public String getValidAndInvalidUserId(String userIdScenarioType) {        if (userIdScenarioType.equals("validUserId")) {            String userId = faker.name().firstName();            System.out.println("Logon id " + userId);            String digit = faker.number().digits(2);            newUserIdGeneration = userId + "_" + "user" + digit;        } else if (userIdScenarioType.equals("UserIdAsEmpty")) {            newUserIdGeneration = "";        } else if (userIdScenarioType.equals("UserIdAsLessThan3Characters")) {            newUserIdGeneration = "aa";        } else if (userIdScenarioType.equals("UserIdAsExisting")) {            newUserIdGeneration = PropUtils.getPropValue(inputProp, "newUserIDCreation");        } else if (userIdScenarioType.equals("UserIdAsSpecialCharacter")) {            newUserIdGeneration = faker.name().fullName() + "&" + "," + "<";        }        return newUserIdGeneration;    }    public String getValidAndInvalidEmailAddress(String emailAddressScenarioType) {        if (emailAddressScenarioType.equals("validEmailAddress")) {            emailAddress = PropUtils.getPropValue(inputProp, "emailAddress");        } else if (emailAddressScenarioType.equals("EmailAddressAsEmpty")) {            emailAddress = "";        } else if (emailAddressScenarioType.equals("EmailAddressAsNumbersAndName")) {            emailAddress = faker.name().fullName() + faker.number().digits(2);        }        return emailAddress;    }    public String getEmailAddressForUpdateUser(String emailAddressScenarioType) {        if (emailAddressScenarioType.equals("validEmailAddress")) {            emailAddress = faker.name().lastName() + "@gmail.com";        } else if (emailAddressScenarioType.equals("EmailAddressAsEmpty")) {            emailAddress = "";        } else if (emailAddressScenarioType.equals("EmailAddressAsNumbersAndName")) {            emailAddress = faker.name().fullName() + faker.number().digits(2);        }        return emailAddress;    }    public String getValidAndInvalidDisplayName(String displayNameScenarioType) {        if (displayNameScenarioType.equals("validDisplayName")) {            displayName = faker.name().fullName();        } else if (displayNameScenarioType.equals("DisplayNameAsEmpty")) {            displayName = "";        } else if (displayNameScenarioType.equals("DisplayNameAsMoreThan30Characters")) {            displayName = faker.name().firstName() + "abcakfsjfefjefeopiqpskaxkmlkn";        }        return displayName;    }    public String getValidAndInvalidInvalidMobilePhone(String mobilePhoneScenarioType) {        if (mobilePhoneScenarioType.equals("validMobilePhone")) {            mobilePhoneNumber = faker.number().digits(10);        } else if (mobilePhoneScenarioType.equals("MobilePhoneAsEmpty")) {            mobilePhoneNumber = "";        } else if (mobilePhoneScenarioType.equals("MobilePhoneAsLessThan3Characters")) {            mobilePhoneNumber = faker.number().digits(2);        } else if (mobilePhoneScenarioType.equals("MobilePhoneAsMoreThan15Characters")) {            mobilePhoneNumber = faker.number().digits(20);        } else if (mobilePhoneScenarioType.equals("MobilePhoneAsSpecialCharacters")) {            mobilePhoneNumber = "@$%!$%^&";        }        return mobilePhoneNumber;    }    public String getValidAndInvalidOtherPhoneNumber(String otherPhoneScenarioType) {        if (otherPhoneScenarioType.equals("validOtherPhone")) {            otherPhoneNumber = faker.number().digits(10);        } else if (otherPhoneScenarioType.equals("OtherPhoneAsMorethan30Characters")) {            otherPhoneNumber = faker.name().firstName() + "abcakfsjfefjefeopiqpskaxkmlkn";        } else if (otherPhoneScenarioType.equals("OtherPhoneAsEmpty")) {            otherPhoneNumber = "";        }        return otherPhoneNumber;    }    public JSONObject getRoleDetails(String roleAccessDescription) {        JSONObject roleValues = new JSONObject();        if (!roleAccessDescription.isEmpty()) {            roleValues = jsonObjectBuilder("description", roleAccessDescription);            System.out.println("Inside of Role object key and values " + roleValues.toString());        } else {            roleValues = jsonObjectBuilder("description", "");        }        return roleValues;    }    public JSONArray addTheAccountNumberForNewUser(String accountTypes, String userName) {        JSONArray accountProfilesRequestParams = new JSONArray();        List<String> accountProfilesParams = new ArrayList<String>();        accountProfilesParams.add("accountNumber");        accountProfilesParams.add("selected");        String accountProfileValues = "";        for (int i = 0; i < accountProfilesParams.size(); i++) {            System.out.println("Account profile size is " + accountProfilesParams.size());            //	System.out.println("Inside of for statement");            if (accountProfilesParams.get(i).contains("accountNumber") && accountTypes.equals("validaccountsForOtherUser")) {                accountProfileValues = common.getCustomerNumberForUserFromDB("associatedUser", userName);            } else if (accountProfilesParams.get(i).contains("accountNumber") && accountTypes.contains("Invalid")) {                accountProfileValues = getAccountNumberBasedOnAccountProfileScenarioType(accountTypes, userName);            } else if (accountProfilesParams.get(i).contains("selected")) {                accountProfileValues = "true";            }            accountProfilesRequestParams = jsonArrayBuilder(accountProfilesParams.get(i), accountProfileValues);            System.out.println("Inside of account profiles request params " + accountProfilesRequestParams.toString());        }        return accountProfilesRequestParams;    }    public JSONArray updateAccountNumbers(String accountTypes, String userName) {        JSONArray accountProfilesRequestParams = new JSONArray();        List<String> accountProfilesParams = new ArrayList<String>();        accountProfilesParams.add("accountNumber");        accountProfilesParams.add("selected");        String accountProfileValues = "";        for (int i = 0; i < accountProfilesParams.size(); i++) {            System.out.println("Account profile size is " + accountProfilesParams.size());            //	System.out.println("Inside of for statement");            if (accountProfilesParams.get(i).contains("accountNumber") && accountTypes.equals("validAccountsForOtherUser")) {                System.out.println("Inside of valid case");                accountProfileValues = toAddTheAccountNumberForOtherUser();            } else if (accountProfilesParams.get(i).contains("accountNumber") && accountTypes.contains("Invalid")) {                accountProfileValues = getAccountNumberBasedOnAccountProfileScenarioType(accountTypes, userName);            } else if (accountProfilesParams.get(i).contains("selected")) {                accountProfileValues = "true";            }            accountProfilesRequestParams = jsonArrayBuilder(accountProfilesParams.get(i), accountProfileValues);            System.out.println("Inside of account profiles request params " + accountProfilesRequestParams.toString());        }        return accountProfilesRequestParams;    }    public String getAccountNumberBasedOnAccountProfileScenarioType(String accountProfileScenarioType, String userId) {        String customerNumber = "";        if (accountProfileScenarioType.equals("accountsForOtherUserAsInvalid")) {            customerNumber = faker.name().fullName();        } else if (accountProfileScenarioType.equals("accountsForOtherUserEmptyAsInvalid")) {            customerNumber = "";        } else if (accountProfileScenarioType.equals("accountsForLoggedOnUserInvalid")) {            customerNumber = common.getCustomerNumberForUserFromDB("", userId);        }        return customerNumber;    }    public String toAddTheAccountNumberForOtherUser() {        String accountNoForLoggedOnUser = "";        List<Map<String, String>> getCustomerNumbersForLoggedOnUser = new ArrayList<Map<String, String>>();        Map<String, String> customerNo = new HashMap<String, String>();        getCustomerNumbersForLoggedOnUser = common.getAllRowsCustomerNumberFromCustomerTable("associatedUser", PropUtils.getPropValue(inputProp, "UserNameAPI"));        System.out.println("Customer numbers size from dB " + getCustomerNumbersForLoggedOnUser.size());        String customerNumberForOtherUser = common.getCustomerNumberForUserFromDB("associatedUser", PropUtils.getPropValue(inputProp, "newUserIDCreation"));        for (int i = 0; i < getCustomerNumbersForLoggedOnUser.size(); i++) {            customerNo = getCustomerNumbersForLoggedOnUser.get(i);            accountNoForLoggedOnUser = customerNo.get("CUSTOMER_NO");            if (!(accountNoForLoggedOnUser.equals(customerNumberForOtherUser))) {                System.out.println("Both customer numbers are different");                break;            } else {                System.out.println("Both customer numbers are same");                {                }            }        }        return accountNoForLoggedOnUser;    }    public boolean validateCustomerNoAddedToTheNewUser(String newUser) {        boolean presence;        Map<String, String> customerDetails = new HashMap<String, String>();        Map<String, String> userdetails = new HashMap<String, String>();        String customerMid, userOid;        customerDetails = common.getEntireCustomerDetailsFromDB("associatedUser", newUser);        customerMid = customerDetails.get("CUSTOMER_MID");        System.out.println("Customer mid from customers table is " + customerMid);        userdetails = common.getUserDetailsFromDB(newUser);        userOid = userdetails.get("USER_OID");        String memberOidfromUserMemberstable = common.getMemberOidFromUserMembersTableFromDB(userOid);        System.out.println("Member oid from user_members table is " + memberOidfromUserMemberstable);        if (customerMid.equals(memberOidfromUserMemberstable)) {            presence = true;        } else {            presence = false;        }        return presence;    }    public void validateUserModuleStatusNumberAndStatusMessage(String statusNumber, String statusMessage, Scenario logger) {        int statusNumberFromResponse;        String statusMessageFromResponse, userModuleStatusMessageFromResponse;        if (statusMessage.contains(":")) {            String messageValidations[] = statusMessage.split(":");            System.out.println("From feature file is " + messageValidations[0]);            System.out.println("From feature file is " + messageValidations[1]);            System.out.println("Invalid response is " + response.jsonPath().prettyPrint());            statusNumberFromResponse = response.path("errors.statusNumber");            System.out.println("Status Number from response is " + statusNumberFromResponse);            validateStatusNumber(statusNumberFromResponse, Integer.parseInt(statusNumber), logger,                    "Expected status number from response is " + statusNumberFromResponse);            statusMessageFromResponse = response.path("errors.statusMessage");            System.out.println("Status Message from response is " + statusMessageFromResponse);            validateResponseMessage(statusMessageFromResponse, messageValidations[0].toString(), logger,                    "Expected status message from response is " + statusMessageFromResponse);            String errorFieldResponse[] = messageValidations[1].split("-");            System.out.println(errorFieldResponse[0]);            System.out.println(errorFieldResponse[1]);            userModuleStatusMessageFromResponse = response                    .path("errors.errorField." + errorFieldResponse[0] + ".statusMessage");            System.out.println("User Module statusMessage from response is " + userModuleStatusMessageFromResponse);            validateResponseMessage(userModuleStatusMessageFromResponse, errorFieldResponse[1].toString(), logger,                    "Expected status message from response is " + userModuleStatusMessageFromResponse);        } else {            System.out.println("Inside of else statement");            // Validations for only status number and status message is present in response            statusNumberFromResponse = response.path("errors.statusNumber");            System.out.println("Status Number from response is " + statusNumberFromResponse);            validateStatusNumber(statusNumberFromResponse, Integer.parseInt(statusNumber), logger,                    "Expected status number from response is " + statusNumberFromResponse);            statusMessageFromResponse = response.path("errors.statusMessage");            System.out.println("Status Message from response is " + statusMessageFromResponse);            validateResponseMessage(statusMessageFromResponse, statusMessage, logger,                    "Expected status message from response is " + statusMessageFromResponse);        }    }    /*       Method to get dbName, dbUserName, dbPassword for specific database        */    public String getDbnameUserNamePasswordForAnEnv(String env) {        String envDbName = "";        String envDbUserName = "";        String envDbPassword = "";        if (env.equalsIgnoreCase("apacdev1")) {            envDbName = "jdbc:oracle:thin:@aec1ifcdbb000d.c5g5dwtbxj95.eu-central-1.rds.amazonaws.com:1521/IFCDB";            envDbUserName = "IFCS_APAC_DEV_1";            envDbPassword = "ifcspassword1#";        }        if (env.equalsIgnoreCase("uidev")) {            envDbName = "jdbc:oracle:thin:@aec1ifcdbv000d.ciogcsbotmwj.eu-central-1.rds.amazonaws.com:1521/IFCDB";            envDbUserName = "IFCS_OMV_DEV_UIDEV_1";            envDbPassword = "ifcspassword1#";        }        if (env.equalsIgnoreCase("apacuat")) {            envDbName = "jdbc:oracle:thin:@aec1ifcdba000u.cszsdfelakk8.eu-central-1.rds.amazonaws.com:1521/IFCDB";            envDbUserName = "IFCS_AWS_APAC_UAT";            envDbPassword = "ifcspassword1#";        }        if (env.equalsIgnoreCase("apacdev6")) {            envDbName = "jdbc:oracle:thin:@aec1ifcdbb000d.c5g5dwtbxj95.eu-central-1.rds.amazonaws.com:1521/IFCDB";            envDbUserName = "IFCS_APAC_DEV_6";            envDbPassword = "ifcspassword1#";        }        if (env.equalsIgnoreCase("demo")) {            envDbName = "jdbc:oracle:thin:@aec1ifcdbv000d.ciogcsbotmwj.eu-central-1.rds.amazonaws.com:1521/IFCDB";            envDbUserName = "IFCS_OMV_DEV_DEMODEV_1 ";            envDbPassword = "ifcspassword1#";        }        return envDbName + "&" + envDbUserName + "&" + envDbPassword;    }    /*    Method to prepare insert query to to env     */    public String prepareInsertQueryToEnv(String systemModuleCid, String columnName, String columnControlCid, String isUsedByDesktop, String isUsedByOnline, String clientMid) {        String query = "INSERT INTO validation_controls(last_updated_by,system_module_cid,validation_field_oid," +                "column_control_cid,minimum_value,maximum_value,validation_context_fld_oid,access_group_oid,\n" +                "context_value_oid,default_value,label_override,is_used_by_desktop,is_used_by_online,\n" +                "not_new_mode_only,internet_access_group_oid,mask,mask_error_message,tooltip_text,\n" +                "help_text,case_action_cid,client_mid,client_group_mid,applicable_mode_cid)VALUES('OMV_OLS_UI',\n"                + systemModuleCid + "," + "(select VALIDATION_FIELD_OID from validation_fields where COLUMN_NAME = '" +                columnName + "' and system_module_cid = " + systemModuleCid + " and rownum = 1)" + ",\n"                + columnControlCid + "," + "0,\n" +                "0,null,null,null,null,null,'" + isUsedByDesktop + "','" + isUsedByOnline + "','N',\n" +                "null,null,null,\n" +                "null,null," + "15601" + "," + clientMid + ",\n" +                "(select client_group_mid from m_client_groups where name = 'OMV')" + "," + "19301" + ") \n";        return query;    }    /*Method to insert new record when there is no validation control */    public void insertNewRecordWhenThereIsNoValidationControl(Scenario logger, Map<String, String> valControlsToEnv, String isOLS, String isOLSEditable, String isCSR, String systemModuleCid, String columnName, String index, String clientMid, String dbNameToEnv, String dbUserNameToEnv, String dbPasswordToEnv, String toEnv, String columnControlCidForCSR, String columnControlCidForOLS) {        String insertQuery = "";        String query = "";        if (valControlsToEnv.get("VALIDATION_CONTROL_OID") == null || valControlsToEnv.size() == 0) {            if (isOLS.equalsIgnoreCase("Y") && isOLSEditable.equalsIgnoreCase("N")) {                if (isCSR.equalsIgnoreCase("Y")) {                    executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, prepareInsertQueryToEnv(systemModuleCid, columnName, columnControlCidForCSR, "Y", "N", clientMid), "Insert");                    executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, prepareInsertQueryToEnv(systemModuleCid, columnName, columnControlCidForOLS, "N", "Y", clientMid), "Insert");                } else {                    executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, prepareInsertQueryToEnv(systemModuleCid, columnName, columnControlCidForOLS, "N", "Y", clientMid), "Insert");                }            } else {                executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, prepareInsertQueryToEnv(systemModuleCid, columnName, columnControlCidForCSR, isCSR, isOLS, clientMid), "Insert");            }        } else {            if (isOLS.equalsIgnoreCase("Y") && isOLSEditable.equalsIgnoreCase("N")) {                if (isCSR.equalsIgnoreCase("Y")) {                    String existingVCOID = getValidationControlOidBasedOnValidationFieldOid("Y", "N", columnName, systemModuleCid, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv,logger);                    if (!existingVCOID.equalsIgnoreCase("")) {                        query = "update validation_controls set IS_USED_BY_DESKTOP = 'Y',is_used_By_online = 'N',COLUMN_CONTROL_CID = " + columnControlCidForCSR + " where validation_control_oid = " + existingVCOID;                        executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, query, "Update");                    } else {                        executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, prepareInsertQueryToEnv(systemModuleCid, columnName, columnControlCidForCSR, "Y", "N", clientMid), "Insert");                    }                    existingVCOID = getValidationControlOidBasedOnValidationFieldOid("N", "Y", columnName, systemModuleCid, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv,logger);                    if (!existingVCOID.equalsIgnoreCase("")) {                        query = "update validation_controls set IS_USED_BY_DESKTOP = 'N',is_used_By_online = 'Y',COLUMN_CONTROL_CID = " + columnControlCidForOLS + " where validation_control_oid = " + existingVCOID;                        executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, String.valueOf(Integer.parseInt(index) + 500), toEnv, query, "Update");                    } else {                        executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, String.valueOf(Integer.parseInt(index) + 500), toEnv, prepareInsertQueryToEnv(systemModuleCid, columnName, columnControlCidForOLS, "N", "Y", clientMid), "Insert");                    }                } else {                    query = "update validation_controls set IS_USED_BY_DESKTOP = 'N',is_used_By_online = 'Y',COLUMN_CONTROL_CID = " + columnControlCidForOLS + " where validation_control_oid = " + valControlsToEnv.get("VALIDATION_CONTROL_OID");                    executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, query, "Update");                }            } else {                query = "update validation_controls set IS_USED_BY_DESKTOP = '" + isCSR + "',is_used_By_online = '" + isOLS + "' where validation_control_oid = " + valControlsToEnv.get("VALIDATION_CONTROL_OID");                executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, query, "Update");            }        }    }    /*    Method to get validation control oid based on validation fields and requirement     */    public String getValidationControlOidBasedOnValidationFieldOid(String isCSR, String isOLS, String columnName, String systemModuleCid, String dbNameToEnv, String dbUserNameToEnv, String dbPasswordToEnv, Scenario logger) {        String existingVC = "select validation_control_oid from validation_controls where IS_USED_BY_DESKTOP = '" + isCSR + "' " +                "and is_used_By_online = '" + isOLS + "' and validation_field_oid = (select validation_field_oid from validation_fields" +                " where column_name = '" + columnName + "' and system_module_cid = " + systemModuleCid + ")";        Map<String, String> queryResults = new HashMap<>();        try {            queryResults = DataBaseUtils.getMySQLConnectionAndEntireRowValue(existingVC, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv);        } catch (Exception e) {            logger.log("Not able to fetch results from query :: " + existingVC);        }        if (queryResults.get("VALIDATION_CONTROL_OID") == null) {            return "";        } else {            return queryResults.get("VALIDATION_CONTROL_OID");        }    }    /*    Method to insert query     */    public void insertQuery(Map<String, String> valControlFromEnv, String systemModuleCid, String isCSR, String isOLS, String mask, String maskErrorMessage, String columnName, String index, String clientMid, String dbNameToEnv, String dbUserNameToEnv, String dbPasswordToEnv, String toEnv, String columnControlCidForOLS, String isOLSEditable, Scenario logger) {        String insertQuery = "";        String columnControlCid = "";        if (isOLSEditable.equalsIgnoreCase("N")) {            columnControlCid = "1702";        } else {            columnControlCid = valControlFromEnv.get("COLUMN_CONTROL_CID");        }        insertQuery = "INSERT INTO validation_controls(last_updated_by,system_module_cid,validation_field_oid," +                "column_control_cid,minimum_value,maximum_value,validation_context_fld_oid,access_group_oid,\n" +                "context_value_oid,default_value,label_override,is_used_by_desktop,is_used_by_online,\n" +                "not_new_mode_only,internet_access_group_oid,mask,mask_error_message,tooltip_text,\n" +                "help_text,case_action_cid,client_mid,client_group_mid,applicable_mode_cid)VALUES('OMV_OLS_UI',\n"                + valControlFromEnv.get("SYSTEM_MODULE_CID") + "," + "(select VALIDATION_FIELD_OID from validation_fields where COLUMN_NAME = '" +                columnName + "' and system_module_cid = " + systemModuleCid + " and rownum = 1)" + ",\n"                + columnControlCid + "," + "0,\n" +                "0,null,null,null,null,null,'" + isCSR + "','" + isOLS + "','N',\n" +                "null," + mask + "," + maskErrorMessage + ",\n" +                "null,null," + valControlFromEnv.get("CASE_ACTION_CID") + "," + clientMid + ",\n" +                "(select client_group_mid from m_client_groups where name = 'OMV')" + "," + valControlFromEnv.get("APPLICABLE_MODE_CID") + ") \n";        PropUtils.setProps("Val-controls-insertQuery" + index, insertQuery, testDataFilePath);        try {            if (!toEnv.equalsIgnoreCase("demo")) {                DataBaseUtils.executeQueryAndCommit(insertQuery, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv);            }            logger.log("Inserted a new validation control query :: " + insertQuery);        } catch (Exception e) {            logger.log(insertQuery);            logger.log("Not able to insert query");        }    }    /*    Method to execute update query     */    public void executeUpdateQuery(Scenario logger, String dbNameToEnv, String dbUserNameToEnv, String dbPasswordToEnv, String index, String toEnv, String query, String queryType) {        PropUtils.setProps("Val-controls-" + queryType + "Query" + index, query, testDataFilePath);        try {            if (!toEnv.equalsIgnoreCase("demo")) {                DataBaseUtils.executeQueryAndCommit(query, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv);                logger.log(queryType + " validation control record using query :: " + query);            }        } catch (Exception e) {            logger.log(query);            logger.log("Not able to update existing validation control");        }    }    /*    Method to handle OLS behavior insert query     */    public void insertQueryBasedOnOLSEditableField(String isOLS, String isOLSEditable, String isCSR, String isCSREditable, String index, Map<String, String> valControlFromEnv, String systemModuleCid, String clientMid, String mask, String maskErrorMessage, String columnName, String dbNameToEnv, String dbUserNameToEnv, String dbPasswordToEnv, String toEnv, String columnControlCidForOLS, Scenario logger) {        String insertQuery = "";        if (isOLS.equalsIgnoreCase("Y") && isOLSEditable.equalsIgnoreCase("N")) {            if (isCSR.equalsIgnoreCase("Y")) {                insertQuery(valControlFromEnv, systemModuleCid, "Y", "N", mask, maskErrorMessage, columnName, index, clientMid, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, toEnv, columnControlCidForOLS, isOLSEditable,logger);                insertQuery(valControlFromEnv, systemModuleCid, "N", "Y", mask, maskErrorMessage, columnName, String.valueOf(Integer.parseInt(index + 500)), clientMid, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, toEnv, columnControlCidForOLS, isOLSEditable,logger);            } else {                insertQuery(valControlFromEnv, systemModuleCid, "N", "Y", mask, maskErrorMessage, columnName, index, clientMid, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, toEnv, columnControlCidForOLS, isOLSEditable,logger);            }        } else {            insertQuery(valControlFromEnv, systemModuleCid, isCSR, isOLS, mask, maskErrorMessage, columnName, index, clientMid, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, toEnv, columnControlCidForOLS, isOLSEditable,logger);        }    }    /*    Method to update query based on OLSEditable field     */    public void updateQueryBasedOnOLSEditableField(String isOLS, String isOLSEditable, String isCSR, Map<String, String> valControlsToEnv, Map<String, String> valControlFromEnv, String systemModuleCid, String mask, String maskErrorMessage, String columnName, String index, String clientMid, String dbNameToEnv, String dbUserNameToEnv, String dbPasswordToEnv, String toEnv, String columnControlCidForOLS, Scenario logger) {        String query = "";        if (isOLS.equalsIgnoreCase("Y") && isOLSEditable.equalsIgnoreCase("N")) {            if (isCSR.equalsIgnoreCase("Y")) {                query = "update validation_controls set IS_USED_BY_DESKTOP = 'Y',is_used_By_online = 'N' where validation_control_oid = " + valControlsToEnv.get("VALIDATION_CONTROL_OID");                executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, query, "Update");                logger.log("Existing validation control record has been updated using the query :: " + query);                insertQuery(valControlFromEnv, systemModuleCid, "N", "Y", mask, maskErrorMessage, columnName, index, clientMid, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, toEnv, columnControlCidForOLS, isOLSEditable,logger);                PropUtils.setProps("Val-controls-InsertQuery" + (Integer.parseInt(index) + 500), query, testDataFilePath);            } else {                query = "update validation_controls set IS_USED_BY_DESKTOP = 'N',is_used_By_online = 'Y',COLUMN_CONTROL_CID=1702 where validation_control_oid = " + valControlsToEnv.get("VALIDATION_CONTROL_OID");                executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, query, "Update");            }        } else {            query = "update validation_controls set IS_USED_BY_DESKTOP = '" + isCSR + "',is_used_By_online = '" + isOLS + "' where validation_control_oid = " + valControlsToEnv.get("VALIDATION_CONTROL_OID");            executeUpdateQuery(logger, dbNameToEnv, dbUserNameToEnv, dbPasswordToEnv, index, toEnv, query, "Update");        }    }}