package utilities.api;import io.cucumber.java.Scenario;import io.restassured.response.Response;import org.json.JSONArray;import org.json.JSONObject;import org.testng.Assert;import javax.json.Json;import javax.json.JsonObject;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.*;public class CommonMethods extends RequestMethodsUtils {    RequestMethodsUtils requestMethods = new RequestMethodsUtils();    CommonDBUtils common = new CommonDBUtils();    boolean presenceCheck = false;    Random rand = new Random();    public Scenario logger;    public void validations(String actual, String expected, String message, Scenario logger) throws ClassNotFoundException {        try {            Assert.assertEquals(actual, expected);            logger.log(message + " is " + actual);        } catch (AssertionError e) {            logger.log("Expected '" + expected + "' and actual '" + actual + "' are not equal");        }    }    public void  validateTheResponseBodyObtainedFromTheAPI(String paramStatusMsg, int paramStatusNumber, Scenario logger) throws Throwable {        String statusMessage = "", errorFieldStatusMessage = "";        int statusNumber = 0;        String statusMessageErrorFields = "";            if (!response.getContentType().isEmpty()) {                System.out.println("Inside value block");                if (response.path("[0].errors.statusNumber") == null) {                    statusNumber = response.path("errors.statusNumber");                    statusMessage = response.path("errors.statusMessage");                } else {                    statusNumber = response.path("[0].errors.statusNumber");                    statusMessage = response.path("[0].errors.statusMessage");                }                validateStatusNumber(statusNumber, paramStatusNumber, logger, "Expected status number from response is --> " + paramStatusNumber);                validateResponseMessage(statusMessage, paramStatusMsg, logger, "Expected status message from response is --> " + paramStatusMsg);            }//    }    public void validateTheResponseBodyObtainedFromTheAPIWithArray(String paramStatusMsg, int paramStatusNumber, Scenario logger) throws Throwable {        String statusMessage = "", errorFieldStatusMessage = "";        int statusNumber = 0;        String statusMessageErrorFields = "";        if (!response.getContentType().isEmpty()) {            System.out.println("Inside value block");            statusNumber = response.path("[0].errors.statusNumber");            statusMessage = response.path("[0].errors.statusMessage");            validateStatusNumber(statusNumber, paramStatusNumber, logger, "Expected status number from response is --> " + paramStatusNumber);            validateResponseMessage(statusMessage, paramStatusMsg, logger, "Expected status message from response is --> " + paramStatusMsg);        }    }    public void userNeedsToValidateTheResponseBodyObtainedFromTheAPI(String costCentreCodeValue, String paramStatusMsg,                                                                     int paramStatusNumber, String paramCostCentreCode,                                                                     String paramDescription, String paramShortDescription, Scenario logger) throws Throwable {        String statusMessage = "", errorFieldStatusMessage = "";        int statusNumber = 0;        if (!response.getContentType().isEmpty()) {            System.out.println("Response is " + response.getBody().prettyPrint());            System.out.println("Inside value block");            statusNumber = response.path("errors.statusNumber");            statusMessage = response.path("errors.statusMessage");            String pathVariable = "", fieldValue = "";            validateStatusNumber(statusNumber, paramStatusNumber, logger, "Expected status number from response is --> " + paramStatusNumber);            if (paramStatusMsg.equals("Must be unique") || paramStatusMsg.equals("Must not be blank")) {                System.out.println("Inside second block");                if (paramCostCentreCode.equals("existing") || paramCostCentreCode.equals("empty")) {                    pathVariable = "customerCostCentreCode";                } else if (paramDescription.equals("empty")) {                    pathVariable = "description";                } else if (paramShortDescription.equals("empty")) {                    pathVariable = "shortDescription";                }                errorFieldStatusMessage = response.path("errors.errorField." + pathVariable + ".statusMessage");                validateResponseMessage(statusMessage, "Validation failed", logger, "Expected status message from response is --> " + "CustCostCentre - Validation failed");                validateResponseMessage(errorFieldStatusMessage, paramStatusMsg, logger, "Expected status message from response is --> " + paramStatusMsg);            } else                validateResponseMessage(statusMessage, paramStatusMsg, logger, "Expected status message from response is --> " + paramStatusMsg);        }    }    public void removeRequestParams(ArrayList<String> keyParams) {        for (String keyParam : keyParams) {            System.out.println("removingKey---->" + keyParam);            requestCardDetailsParams.remove(keyParam);        }    }    public boolean getVehicleDetailsAndValidate() {        boolean presence = false;        Random rand = new Random();        String jsonRes = response.asString();        JSONArray jsonarray = new JSONArray(jsonRes);        int actualCount = jsonarray.length();        int row = rand.nextInt(actualCount);        JSONObject details = jsonarray.getJSONObject(row);        String cardNo = details.getString("cardNo");        String vehicleOid = String.valueOf(details.getInt("vehicleOid"));        String vehicleStatus = details.getString("vehicleStatus");        String licensePlate = details.getString("licensePlate");        //   String description = details.getString("description");        presence = common.checkingThePresenceOfVehicleDetailsInDB(vehicleOid, licensePlate, vehicleStatus, cardNo);        return presence;    }    public boolean getDriverDetailsAndValidate() {        boolean presence = false;        Random rand = new Random();        String jsonRes = response.asString();        JSONArray jsonarray = new JSONArray(jsonRes);        int actualCount = jsonarray.length();        int row = rand.nextInt(actualCount);        JSONObject details = jsonarray.getJSONObject(row);        String cardNo = details.getString("cardNo");        String driverStatus = details.getString("driverStatus");        String driverOid = String.valueOf(details.getInt("driverOid"));        String driverName = details.getString("driverName");        String shortName = details.getString("shortName");        String driverId = details.getString("driverId");        presence = common.checkingThePresenceOfDriverDetailsInDB(driverOid, driverName, driverId, shortName, driverStatus, cardNo);        return presence;    }    public boolean getCostCentreDetailsAndValidate() {        boolean presence = false;        Random rand = new Random();        String jsonRes = response.asString();        JSONArray jsonarray = new JSONArray(jsonRes);        int actualCount = jsonarray.length();        int row = rand.nextInt(actualCount);        JSONObject details = jsonarray.getJSONObject(row);        String costCentreCode = details.getString("customerCostCentreCode");        String description = details.getString("description");        presence = common.checkingThePresenceOfCostCentreDetailsInDB(costCentreCode, description);        return presence;    }    public String getCustomer(String param) {        String customerNumber = "";        if (param.equalsIgnoreCase("invalidCus")) {            customerNumber = "1234567890";        } else            customerNumber = common.getCustomerNumberFromDB(param);        System.out.println("cus no " + customerNumber);        return customerNumber;    }    public String getCard(String param) {        String cardNumber = "";        if (param.equalsIgnoreCase("invalidCus")) {            cardNumber = "1234567890";        } else            cardNumber = common.getCustomerNumberFromDB(param);        System.out.println("cardNumber " + cardNumber);        return cardNumber;    }    public void replacingSpecificKey(JSONObject object, String key, String value) {        object.remove(key);        object.put(key, value);    }    public void replacingJsonObjects(JSONObject sourceObj, String key, JSONObject destinationObj) {        sourceObj.remove(key);        sourceObj.put(key, destinationObj);    }    public boolean validateAccountDetails() {        boolean presence = true;        Random rand = new Random();        String jsonRes = response.asString();        JSONArray jsonarray = new JSONArray(jsonRes);        System.out.println("inside getNestedArray");        System.out.println(String.format("JSONArray length => %d", jsonarray.length()));        int actualCount = jsonarray.length();        int row = rand.nextInt(actualCount);        System.out.println("Row " + row);        return presence;    }    public Map<String, String> getCardNoForSpecificCustomer(String paramCustNumber, String paramCardNumber) {        String cardNumber = null, customerNumber = null;        List<Map<String, String>> customerNumberList = null;        Map<String, String> custAndCardMap = new HashMap<String, String>();        common.initializeDBEnvironment();        if (paramCustNumber.equalsIgnoreCase("invalidCus")) {            custAndCardMap.put("customerNumber", fakerAPI().number().digits(10));        } else if (paramCustNumber.equalsIgnoreCase("OMVValidCus")) {            customerNumberList = common.getListOfCustomerNumbers();            custAndCardMap.put("customerNumber", customerNumberList.get(0).get("CUSTOMER_NO"));            System.out.println("cus no " + customerNumberList.get(0).get("CUSTOMER_NO"));        } else {            customerNumber = common.getCustomerNumberFromDB(paramCustNumber);            custAndCardMap.put("customerNumber", customerNumber);            System.out.println("cus no " + customerNumber);        }        if (paramCardNumber.equalsIgnoreCase("invalidCard")                || paramCustNumber.equalsIgnoreCase("invalidCus")) {            custAndCardMap.put("cardNumber", fakerAPI().number().digits(16));        } else {            cardNumber = common.getCardNumberForSpecificCustomer(paramCardNumber, customerNumber);            custAndCardMap.put("cardNumber", cardNumber);            System.out.println("cardNumber " + cardNumber);        }        System.out.println("custAndCardMap " + custAndCardMap);        return custAndCardMap;    }    public void responseValidation(String statusMessage, int statusNumber, Scenario logger) throws Throwable {        if (response.getStatusCode() == 200) {            logger.log("Response --> " + response.getBody().prettyPrint());//            presenceCheck = common.checkingThePresenceOfContactsInDB(userId,contactName,emailAddress,phoneMobile1,contactTypeTableValues.get("CONTACT_TYPE_OID"));            presenceCheck = true;            if (presenceCheck) {                logger.log("DB Validation passed-Created Contact Details found in DB");            } else {                softFail("DB Validation failed-Created Contact Details not found in DB", logger);            }        } else {            logger.log("Response body is --> " + response.getBody().prettyPrint());            validateTheResponseBodyObtainedFromTheAPI(statusMessage, statusNumber, logger);        }    }    public void validateAndVerifyDriverDetails(Response responseValidation, Map<String, String> cardProductDetails, Scenario logger) {        if (responseValidation.path("card.driverName") != null) {            cardsValidations(responseValidation, "card.driverId", cardProductDetails, "driverId", logger);            cardsValidations(responseValidation, "card.driverName", cardProductDetails, "driverName", logger);        } else            logger.log("card product doesn't support driver details");        String actualProfResCode = responseValidation.path("uiProductRestriction.productRestrictionCode");        String actualStatus = responseValidation.path("card.status");    }    public void validateAndVerifyVehicleDetails(Response responseValidation, Map<String, String> cardProductDetails, Scenario logger) {        if (responseValidation.path("card.licensePlate") != null) {            cardsValidations(responseValidation, "card.licensePlate", cardProductDetails, "licensePlate", logger);            cardsValidations(responseValidation, "card.vehicleDescription", cardProductDetails, "vehicleDescription", logger);        } else            logger.log("card product doesn't support vehicle details");    }    private void responseValidationsCheckingEquals(Response responseValidation, String actPath, String expected, Scenario logger) {        if (expected.equalsIgnoreCase(responseValidation.path(actPath))) {            logger.log("Cards Validation passed-" + actPath + "-->" + responseValidation.path(actPath) + " found in DB");        } else {            softFail("Cards Validation failed-" + actPath + "-->" + responseValidation.path(actPath) + " not found in DB", logger);            logger.log("Actual - " + responseValidation.path(actPath) + "// Expected - " + expected);        }    }    private void responseValidationsCheckingContains(Response responseValidation, String actPath, String expected, Scenario logger) {        String actual = responseValidation.path(actPath);        if (actual.contains(expected)) {            logger.log("Cards Validation passed-" + actPath + "-->" + responseValidation.path(actPath) + " found in DB");        } else {            softFail("Cards Validation failed-" + actPath + "-->" + responseValidation.path(actPath) + " not found in DB", logger);            logger.log("Actual - " + responseValidation.path(actPath) + "// Expected - " + expected);        }    }    private void cardsValidations(Response responseValidation, String actPath, Map<String, String> cardProductDetails, String expPath, Scenario logger) {        String actual;        String expected;        try {            actual = responseValidation.path(actPath);            expected = cardProductDetails.get(expPath);            if (actual.equalsIgnoreCase(expected)) {                logger.log("Cards Validation passed-" + expPath.toLowerCase() + "->" + cardProductDetails.get(expPath) + " found in DB");            } else {                softFail("Cards Validation failed-" + expPath + " not found in DB", logger);                logger.log("Actual - " + responseValidation.path(actPath) + "// Expected - " + cardProductDetails.get(expPath));            }        } catch (Exception e) {            logger.log("Changes found in payload " + e.getMessage());        }    }    public void validateAndVerifyCardProductOfferAndProgram(Response responseValidation, Map<String, String> cardProductDetails, Scenario logger) {        cardsValidations(responseValidation, "cardOffer", cardProductDetails, "CARD_OFFER", logger);        cardsValidations(responseValidation, "cardProduct", cardProductDetails, "CARD_PRODUCT", logger);    }    public void validateAndVerifyCardProgram(Response responseValidation, Map<String, String> cardProductDetails, Scenario log) {        //   cardsValidations(responseValidation, "cardProgram", cardProductDetails, "CARDPROGRAM", log);        cardsValidations(responseValidation, "description", cardProductDetails, "DESCRIPTION", log);        cardsValidations(responseValidation, "cardType", cardProductDetails, "CARD_TYPE", log);        cardsValidations(responseValidation, "status", cardProductDetails, "STATUS", log);        cardsValidations(responseValidation, "embossingName", cardProductDetails, "EMBOSSING_NAME", log);    }    public void validateAndVerifyCardAddress(Response responseValidation, Map<String, String> cardProductDetails, Scenario logger) {        cardsValidations(responseValidation, "cardContact.streetAddress.state", cardProductDetails, "state", logger);        cardsValidations(responseValidation, "cardContact.streetAddress.country", cardProductDetails, "country", logger);        cardsValidations(responseValidation, "cardContact.contactName", cardProductDetails, "contactName", logger);        cardsValidations(responseValidation, "cardContact.streetAddress.addressLine", cardProductDetails, "addressLine", logger);        cardsValidations(responseValidation, "cardContact.streetAddress.suburb", cardProductDetails, "suburb", logger);        cardsValidations(responseValidation, "cardContact.streetAddress.postalCode", cardProductDetails, "postalCode", logger);    }    public void validateAndVerifyCardCtrlProfiles(Response responseValidation, Map<String, String> cardProductDetails, String paramCtrlProfiles, Scenario logger) {        if (paramCtrlProfiles.equalsIgnoreCase("new")) {            responseValidationsCheckingContains(responseValidation, "cardControlProfiles[0].description", "Private", logger);        } else if (paramCtrlProfiles.equalsIgnoreCase("exsisting")) {            cardsValidations(responseValidation, "cardControlProfiles[0].description", cardProductDetails, "profDescription", logger);        } else {            cardsValidations(responseValidation, "cardControlProfiles[0].cardControl.velocityAssignment.velocityTypeValue2", cardProductDetails, "transLimitValue", logger);            if (paramCtrlProfiles.equalsIgnoreCase("privateProf")) {                cardsValidations(responseValidation, "cardControlProfiles[0].description", cardProductDetails, "profDescription", logger);            } else {                if (!cardProductDetails.get("profDescription").equalsIgnoreCase(responseValidation.path("cardControlProfiles[0].description"))) {                    logger.log("Cards Validation passed-" + responseValidation.path("cardControlProfiles[0].description") + " found in DB");                } else {                    softFail("Cards Validation failed-" + "profDescription" + " not found in DB", logger);                    logger.log("Actual - " + responseValidation.path("cardControlProfiles[0].description") + "// Expected - New Private Profile");                }            }        }    }    public void validateAndVerifyCardEmbossNameDetails(Response responseValidation, Map<String, String> cardsDetailsMap, String expCardNumber, Scenario logger) {        responseValidationsCheckingEquals(responseValidation, "card.cardNo", expCardNumber, logger);        cardsValidations(responseValidation, "card.embossingName", cardsDetailsMap, "embossingName", logger);    }    public void validateAndVerifyCardDefautProf(Response response, Map<String, String> cardsDetailsMap, Scenario logger) {        System.out.println(" cardsDetailsMap --> " + cardsDetailsMap);        System.out.println(" LOCATION_RESTRICTION --> " + response.path("cardControlProfiles[0].cardControl.locationRestriction"));        System.out.println(" TIME_LIMIT --> " + response.path("cardControlProfiles[0].cardControl.timeLimit"));        try {            String description = response.path("cardControlProfiles[0].description");            if (description.isEmpty()) ;            responseValidationsCheckingEquals(response, "cardControlProfiles[0].description", cardsDetailsMap.get("DESCRIPTION"), logger);        } catch (NullPointerException e) {            logger.log("Cards Validation passed-" + "cardControlProfiles[0].description" + "-->" + response.path("cardControlProfiles[0].description") + " found in DB");        }        responseValidationsCheckingEquals(response, "cardControlProfiles[0].cardControl.productRestriction", cardsDetailsMap.get("PRODUCT_RESTRICTION"), logger);//        responseValidationsCheckingContains(response, "cardControlProfiles[0].cardControl.locationRestriction", cardsDetailsMap.get("LOCATION_RESTRICTION"));//        responseValidationsCheckingContains(response, "cardControlProfiles[0].cardControl.timeLimit", cardsDetailsMap.get("TIME_LIMIT"));//        cardsValidations(response, "cardControlProfiles[0].description", cardsDetailsMap, "DESCRIPTION");//        cardsValidations(response, "cardControlProfiles[0].cardControl.productRestriction", cardsDetailsMap, "PRODUCT_RESTRICTION");//        cardsValidations(response, "cardControlProfiles[0].cardControl.locationRestriction", cardsDetailsMap, "LOCATION_RESTRICTION");//        cardsValidations(response, "cardControlProfiles[0].cardControl.timeLimit", cardsDetailsMap, "TIME_LIMIT");    }    public String getCreatedOnToDate() {        String newDateFormat = "";        String createdOnToDateFromDB = common.getProcessingDateFromMClients();        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        try {            dateFormatter.parse(createdOnToDateFromDB);            Date newDate;            Calendar cal = Calendar.getInstance();            cal.setTime(dateFormatter.parse(createdOnToDateFromDB));            newDate = cal.getTime();            DateFormat df = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");            newDateFormat = df.format(newDate);            System.out.println("New date format " + newDateFormat);        } catch (java.text.ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return newDateFormat;    }    //	@BeforeSuite(alwaysRun = true)//	public void login() {//		System.out.println("Inside of login");////	        requestParams.put("grant_type", PropUtils.getPropValue(inputProp, "GRANT_TYPE"));//	        requestParams.put("username", PropUtils.getPropValue(inputProp, "UserNameAPI"));////	        olsPassword = getOLSPassword();//	        Boolean passwordCondition = verifyPassword(olsPassword);//	        System.out.println("Password condition is " + passwordCondition);////	        if (passwordCondition) {//	            requestParams.put("password", olsPassword);//	        } else {//	            System.out.println(//	                    "Password has atleast one upper case,one lower case, one integer and one special character");//	        }////	        String accessToken = base64Encoder(PropUtils.getPropValue(inputProp, "CLIENT_ID"),//	                PropUtils.getPropValue(inputProp, "SECERT_ID"));////	        // Post a request for login API call//	        response = requestMethods.postRequestAsBasicAuthWithBodyData("/login", requestParams, accessToken);//	        jsonPathEvaluator = response.jsonPath();//	      //  logger.log("Request params-->" + requestParams.toString());//	       // logger.log(" Response Body -->" + response.getBody().prettyPrint());////	        System.out.println("INSIDE THE AUTH TOKEN " + response.jsonPath().get("token"));//	}    public JSONObject getJSONObjectInsideOfJSONArray() {        Random rand = new Random();        JSONObject jobj;        String jsonRes = response.getBody().asString();        JSONArray jsonarray = new JSONArray(jsonRes);        int actualCount = jsonarray.length();        int count = rand.nextInt(actualCount);        System.out.println("actual count " + count);        jobj = jsonarray.getJSONObject(count);        System.out.println("Json object " + jobj);        return jobj;    }    public JSONObject getDescriptionAsJSONObjectFormat(String reportTypeDesc) {        JSONObject reportValues = new JSONObject();        if (!reportTypeDesc.isEmpty()) {            reportValues = jsonObjectBuilder("description", reportTypeDesc);            System.out.println("Inside of  description with key and values " + reportValues.toString());        } else {            reportValues = jsonObjectBuilder("description", "");        }        return reportValues;    }    JsonObject requestBody = Json.createObjectBuilder().build();    public void verifyAndValidateAccessGrpsForDeleteMethod(String scenario, String endpoint, String accessGrp, Scenario logger) {        RequestMethodsUtils requestMethods = new RequestMethodsUtils();        logger.log(scenario + " Request path -->" + endpoint);        response = requestMethods.deleteRequestAsBearerAuth(endpoint, requestBody.toString(), authorizationToken);        if (response.getStatusCode() == 401 && (accessGrp.equalsIgnoreCase("fullAccess") || accessGrp.equalsIgnoreCase("readOnlyAccess")                || accessGrp.equalsIgnoreCase("customerUserAccess"))) {            String statusMessage = response.path("errors.statusMessage");            if (statusMessage.contains("API User is unauthorized to access this feature")) {                logger.log("Response body is " + response.getBody().prettyPrint());                logger.log("Response code is " + response.getStatusCode());                int statusNumberFromResponse = response.path("errors.statusNumber");                System.out.println("Status Number from response is " + statusNumberFromResponse);                validateStatusNumber(statusNumberFromResponse, 97108, logger,                        "Expected status number from response is " + statusNumberFromResponse);                validateResponseMessage(statusMessage, "API User is unauthorized to access this feature", logger,                        "Expected status message from response is " + statusMessage);                logger.log(" User have no access to this endpoint " + scenario + " for this access group " + accessGrp);            } else                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);        } else {            logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);        }        logger.log("<---------------------------------------------------------------->");    }    public void verifyAndValidateAccessGrpsForPostMethod(String scenario, String endpoint, String accessGrp, String requestParams, Scenario logger) {        //       RequestMethodsUtils requestMethods = new RequestMethodsUtils();        logger.log(scenario + " Request path is -->" + endpoint);        response = requestMethods.postRequestAsBearerAuthWithBodyData(endpoint, requestParams, authorizationToken);        //  logger.log("Response code is  "+response.getStatusCode());        if (accessGrp.equalsIgnoreCase("readOnlyAccess")) {            logger.log("Inside of  read only access ");            if (response.getStatusCode() == 401) {                String statusMessage = response.path("errors.statusMessage");                if (statusMessage.contains("API User is unauthorized to access this feature")) {                    logger.log("Response body is " + response.getBody().prettyPrint());                    logger.log("Response code is " + response.getStatusCode());                    int statusNumberFromResponse = response.path("errors.statusNumber");                    System.out.println("Status Number from response is " + statusNumberFromResponse);                    validateStatusNumber(statusNumberFromResponse, 97108, logger,                            "Expected status number from response is " + statusNumberFromResponse);                    validateResponseMessage(statusMessage, "API User is unauthorized to access this feature", logger,                            "Expected status message from response is " + statusMessage);                    logger.log(" User have no access to this endpoint " + scenario + " for this access group " + accessGrp);                } else {                    softFail("Not getting expected response", logger);                }            } else if (scenario.contains("Get") && (response.getStatusCode() == 200 || response.getStatusCode() == 400)) {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            } else {                logger.log("Response code is " + response.getStatusCode());                softFail("Not getting expected response", logger);            }        } else if (accessGrp.equalsIgnoreCase("fullAccess")) {            logger.log("Inside of full access");            if (response.getStatusCode() == 401) {                logger.log("Response code is " + response.getStatusCode());                softFail("Not getting expected response", logger);            } else {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        } else if (accessGrp.equalsIgnoreCase("customerUserAccess")) {            logger.log("Inside of customer user access");            if (response.getStatusCode() == 401) {                String statusMessage = response.path("errors.statusMessage");                if (statusMessage.contains("API User is unauthorized to access this feature")) {                    logger.log("Response body is " + response.getBody().prettyPrint());                    logger.log("Response code is " + response.getStatusCode());                    int statusNumberFromResponse = response.path("errors.statusNumber");                    System.out.println("Status Number from response is " + statusNumberFromResponse);                    validateStatusNumber(statusNumberFromResponse, 97108, logger,                            "Expected status number from response is " + statusNumberFromResponse);                    validateResponseMessage(statusMessage, "API User is unauthorized to access this feature", logger,                            "Expected status message from response is " + statusMessage);                    logger.log(" User have no access to this endpoint " + scenario + " for this access group " + accessGrp);                }            } else {                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        }        logger.log("<---------------------------------------------------------------->");    }    public void verifyAndValidateAccessGrpsForPutMethod(String scenario, String endpoint, String accessGrp, Scenario logger) {        RequestMethodsUtils requestMethods = new RequestMethodsUtils();        logger.log(scenario + " Request path -->" + endpoint);        response = requestMethods.putRequestAsBearerAuthWithBodyData(endpoint, requestBody.toString(), authorizationToken);        if (accessGrp.equalsIgnoreCase("readOnlyAccess")) {            logger.log("Inside of  read only access ");            if (response.getStatusCode() == 401) {                String statusMessage = response.path("errors.statusMessage");                if (statusMessage.contains("API User is unauthorized to access this feature")) {                    logger.log("Response body is " + response.getBody().prettyPrint());                    logger.log("Response code is " + response.getStatusCode());                    int statusNumberFromResponse = response.path("errors.statusNumber");                    System.out.println("Status Number from response is " + statusNumberFromResponse);                    validateStatusNumber(statusNumberFromResponse, 97108, logger,                            "Expected status number from response is " + statusNumberFromResponse);                    validateResponseMessage(statusMessage, "API User is unauthorized to access this feature", logger,                            "Expected status message from response is " + statusMessage);                    logger.log(" User have no access to this endpoint " + scenario + " for this access group " + accessGrp);                } else {                    softFail("Not getting expected response", logger);                }            } else {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        } else if (accessGrp.equalsIgnoreCase("fullAccess")) {            logger.log("Inside of full access");            if (response.getStatusCode() == 401) {                logger.log("Response code is " + response.getStatusCode());                softFail("Not getting expected response", logger);            } else {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        } else if (accessGrp.equalsIgnoreCase("customerUserAccess")) {            logger.log("Inside of customer user access");            if (response.getStatusCode() == 401) {                String statusMessage = response.path("errors.statusMessage");                if (statusMessage.contains("API User is unauthorized to access this feature")) {                    logger.log("Response body is " + response.getBody().prettyPrint());                    logger.log("Response code is " + response.getStatusCode());                    int statusNumberFromResponse = response.path("errors.statusNumber");                    System.out.println("Status Number from response is " + statusNumberFromResponse);                    validateStatusNumber(statusNumberFromResponse, 97108, logger,                            "Expected status number from response is " + statusNumberFromResponse);                    validateResponseMessage(statusMessage, "API User is unauthorized to access this feature", logger,                            "Expected status message from response is " + statusMessage);                    logger.log(" User have no access to this endpoint " + scenario + " for this access group " + accessGrp);                }            } else {                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        }        logger.log("<---------------------------------------------------------------->");    }    public void verifyAndValidateAccessGrpsForPutMethodWithQueryParams(String scenario, String endpoint, String accessGrp, String queryParamKey, String queryParamValue, Scenario logger) {        //   RequestMethodsUtils requestMethods = new RequestMethodsUtils();        logger.log(scenario + " Request path -->" + endpoint);        response = requestMethods.putRequestAsBearerAuthWithSingleQueryParam(endpoint, authorizationToken, queryParamKey, queryParamValue, requestBody.toString());        System.out.println("REsponse code is " + response.getStatusCode());        if (accessGrp.equalsIgnoreCase("readOnlyAccess")) {            if (response.getStatusCode() == 401) {                String statusMessage = response.path("errors.statusMessage");                if (statusMessage.contains("API User is unauthorized to access this feature")) {                    logger.log("Response body is " + response.getBody().prettyPrint());                    logger.log("Response code is " + response.getStatusCode());                    int statusNumberFromResponse = response.path("errors.statusNumber");                    System.out.println("Status Number from response is " + statusNumberFromResponse);                    validateStatusNumber(statusNumberFromResponse, 97108, logger,                            "Expected status number from response is " + statusNumberFromResponse);                    validateResponseMessage(statusMessage, "API User is unauthorized to access this feature", logger,                            "Expected status message from response is " + statusMessage);                    logger.log(" User have no access to this endpoint " + scenario + " for this access group " + accessGrp);                } else {                    softFail("Not getting expected response", logger);                }            } else {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        } else if (accessGrp.equalsIgnoreCase("fullAccess")) {            logger.log("Inside of full access");            if (response.getStatusCode() == 401) {                logger.log("Response code is " + response.getStatusCode());                softFail("Not getting expected response", logger);            } else {                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        } else if (accessGrp.equalsIgnoreCase("customerUserAccess")) {            logger.log("Inside of customer user access");            if (response.getStatusCode() == 401) {                String statusMessage = response.path("errors.statusMessage");                if (statusMessage.contains("API User is unauthorized to access this feature")) {                    logger.log("Response body is " + response.getBody().prettyPrint());                    logger.log("Response code is " + response.getStatusCode());                    int statusNumberFromResponse = response.path("errors.statusNumber");                    System.out.println("Status Number from response is " + statusNumberFromResponse);                    validateStatusNumber(statusNumberFromResponse, 97108, logger,                            "Expected status number from response is " + statusNumberFromResponse);                    validateResponseMessage(statusMessage, "API User is unauthorized to access this feature", logger,                            "Expected status message from response is " + statusMessage);                    logger.log(" User have no access to this endpoint " + scenario + " for this access group " + accessGrp);                }            } else {                logger.log(" User have access to this endpoint " + scenario + " for this access group " + accessGrp);            }        }        logger.log("<---------------------------------------------------------------->");    }    public void verifyAndValidateAccessGrpsForGetMethod(String scenario, String endpoint, String accessGrp, Scenario logger) {        //  RequestMethodsUtils requestMethods = new RequestMethodsUtils();        logger.log(scenario + " Request path -->" + endpoint);        response = requestMethods.getRequestWithPath(endpoint, authorizationToken);        if (accessGrp.equalsIgnoreCase("readOnlyAccess") || accessGrp.equalsIgnoreCase("fullAccess")                || accessGrp.equalsIgnoreCase("customerUserAccess")) {            if (response.getStatusCode() == 401) {                logger.log("Response code is " + response.getStatusCode());                softFail(" Not getting expected response " + accessGrp, logger);            } else {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have  access to this endpoint " + scenario + " for this access group " + accessGrp);            }        }        logger.log("<---------------------------------------------------------------->");    }    public void verifyAndValidateAccessGrpsForGetMethodWithSingleQueryParam(String scenario, String endpoint, String authorizationToken, String accessGrp, String queryParamKey, String queryParamValue, Scenario logger) {        //      RequestMethodsUtils requestMethods = new RequestMethodsUtils();        logger.log(scenario + " Request path -->" + endpoint);        response = requestMethods.getRequestAsBearerAuthWithSingleQueryParam(endpoint, authorizationToken, queryParamKey, queryParamValue);        if (accessGrp.equalsIgnoreCase("readOnlyAccess") || accessGrp.equalsIgnoreCase("fullAccess")                || accessGrp.equalsIgnoreCase("customerUserAccess")) {            if (response.getStatusCode() == 401) {                logger.log("Response code is " + response.getStatusCode());                softFail(" Not getting expected response " + accessGrp, logger);            } else {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have  access to this endpoint " + scenario + " for this access group " + accessGrp);            }        }        logger.log("<---------------------------------------------------------------->");    }    public void verifyAndValidateAccessGrpsForGetMethodWithMultipleQueryParam(String scenario, String endpoint, String authorizationToken, String accessGrp, Scenario logger) {        //     RequestMethodsUtils requestMethods = new RequestMethodsUtils();        logger.log(scenario + " Request path -->" + endpoint);        response = requestMethods.getRequestAsBearerAuthWithMultipleQueryParams(endpoint, authorizationToken, "memberType", "Customer", "reportTypeValue", "Stored");        if (accessGrp.equalsIgnoreCase("readOnlyAccess") || accessGrp.equalsIgnoreCase("fullAccess")                || accessGrp.equalsIgnoreCase("customerUserAccess")) {            if (response.getStatusCode() == 401) {                logger.log("Response code is " + response.getStatusCode());                softFail(" Not getting expected response " + accessGrp, logger);            } else {                logger.log("Response code is " + response.getStatusCode());                logger.log(" User have  access to this endpoint " + scenario + " for this access group " + accessGrp);            }        }        logger.log("<---------------------------------------------------------------->");    }    public void responseValidationsCheckingEquals(String actual, String expected, String field, Scenario logger) {        if (actual.equalsIgnoreCase(expected)) {            logger.log("Validation passed- " + field + "- Actual: " + actual + " matched with Expected: " + expected);        } else {            softFail("Validation failed-" + field + "-  Actual: " + actual + " matched with Expected: " + expected, logger);            logger.log("Actual: " + actual + "// Expected: " + expected);        }    }    public void responseValidationsCheckingContains(String actual, String expected, String field, Scenario logger) {        if (actual.contains(expected)) {            logger.log("Validation passed- " + field + "- Actual: " + actual + " matched with Expected: " + expected);        } else {            softFail("Validation failed-" + field + "-  Actual: " + actual + " matched with Expected: " + expected, logger);            logger.log("Actual: " + actual + "// Expected: " + expected);        }    }    public void responseValidationsCheckingEqualsList(String actual, List<String> exp, String field, Scenario logger) {        String expected = null;        boolean mark = false;        for (String samp : exp) {            expected = samp;            if (actual.equalsIgnoreCase(samp)) {                mark = true;                break;            }        }        if (mark) {            logger.log("Validation passed- " + field + "- Actual: " + actual + " matched with Expected: " + expected);        } else {            softFail("Validation failed- " + field + "- Actual: " + actual + " matched with Expected: " + expected, logger);            logger.log("Actual: " + actual + "// Expetced: " + expected);        }    }    public void loginSetUpForCountryLevel() {        requestParams.put("grant_type", PropUtils.getPropValue(inputProp, "GRANT_TYPE"));        requestParams.put("username", PropUtils.getPropValue(inputProp, "countryLevelUserNameAPI"));        requestParams.put("password", PropUtils.getPropValue(inputProp, "countryLevelPasswordAPI"));        String accessToken = base64Encoder(PropUtils.getPropValue(inputProp, "CLIENT_ID"),                PropUtils.getPropValue(inputProp, "SECERT_ID"));        // Post a request for login API call        response = postRequestAsBasicAuthWithBodyData("/login", requestParams, accessToken);        String authToken = response.jsonPath().get("token");        System.out.println("Authorization token for country level access " + authToken);        PropUtils.setProps("CountryLevelToken", authToken, inputDataFilePath);    }    public String getCustomerNoForCSRLogin() {        List<Map<String, String>> getListOfCusNumbers = common.getListOfCustomerNumbers();        int actualCount = rand.nextInt(getListOfCusNumbers.size());        Map<String, String> specificCustomerNo = getListOfCusNumbers.get(actualCount);        String customerNoFromDB = specificCustomerNo.get("CUSTOMER_NO");        return customerNoFromDB;    }    public String getCustomerNoForSubscription() {        List<Map<String, String>> getListOfCusNumbers = common.getListOfSubscribedCustomerNumbers();        int actualCount = rand.nextInt(getListOfCusNumbers.size());        Map<String, String> specificCustomerNo = getListOfCusNumbers.get(actualCount);        String customerNoFromDB = specificCustomerNo.get("CUSTOMER_NO");        return customerNoFromDB;    }}