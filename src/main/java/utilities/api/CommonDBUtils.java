package utilities.api;import org.jsoup.Connection;import java.sql.SQLException;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;public class CommonDBUtils extends BaseUtils {    private String olsUser = getOLSUerName();//    public String getCustomerNumberFromDB(String associatedUser) {////        String customerNumber = " ";//        String queryToGetCustomerNumber = " ";//        if (associatedUser.equalsIgnoreCase("associatedUser")) {//            queryToGetCustomerNumber = "Select customer_no from internet_user_access iua "//                    + "inner join m_customers mc on iua.member_oid = mc.customer_mid "//                    + "where internet_user_oid = (Select internet_user_oid from internet_users " + "where logon_id = '"//                    + olsUser + "')";//        } else {//            queryToGetCustomerNumber = "Select customer_no from internet_user_access iua "//                    + "inner join m_customers mc on iua.member_oid = mc.customer_mid "//                    + "where internet_user_oid in (Select internet_user_oid from internet_users "//                    + "where logon_id != '" + olsUser + "')";////        }//        try {////            customerNumber = DataBaseUtils.getMySQLConnection(queryToGetCustomerNumber, dbName, dbUserName, dbPassword);//            System.out.println("customer Number from DB " + customerNumber);//        } catch (ClassNotFoundException e) {//            // TODO Auto-generated catch block//            e.printStackTrace();//        } catch (SQLException e) {//            // TODO Auto-generated catch block//            e.printStackTrace();//        } catch (InterruptedException e) {//            // TODO Auto-generated catch block//            e.printStackTrace();//        }////        return customerNumber;//    }    public String getCardNumberFromDB(String status) {        String cardNumber = " ";        String getCardNumber = "Select card_no from cards c \r\n" + "inner join card_status cs \r\n"                + "on c.card_status_oid = cs.card_status_oid  \r\n"                + "where c.customer_mid in (Select customer_mid from internet_user_access iua \r\n"                + "inner join m_customers mc on iua.member_oid = mc.customer_mid \r\n"                + "where internet_user_oid = (Select internet_user_oid from internet_users \r\n" + "where logon_id = '"                + olsUser + "')) and cs.description ='" + status + "'";        try {            System.out.println("Card number Query==" + getCardNumber);            cardNumber = DataBaseUtils.getMySQLConnectionAndGetValueForRowIndex(getCardNumber, dbName, dbUserName,                    dbPassword, 1);            System.out.println("Cardnumber from the DB :" + cardNumber);        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardNumber;    }    public String getCardStatusFromDB(String cardNumber) {        String cardStatus = " ";        String getCardStatus = "Select cs.description from cards c \r\n" + "inner join card_status cs \r\n"                + "on c.card_status_oid = cs.card_status_oid\r\n" + "where card_no ='" + cardNumber + "'";        try {            cardStatus = DataBaseUtils.getMySQLConnection(getCardStatus, dbName, dbUserName, dbPassword);            System.out.println("Card status from DB " + cardStatus);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardStatus;    }    public String getAccountNumberFromDB(String associatedUser) {        String accountNumber = " ";        String GetAccountNumber = " ";        if (associatedUser.equalsIgnoreCase("valid")) {            GetAccountNumber = "Select account_no, accs.description from accounts a\r\n"                    + "inner join account_status accs \r\n"                    + "on a.account_status_oid = accs.account_status_oid where customer_mid in \r\n"                    + "(Select customer_mid from internet_user_access iua \r\n"                    + "inner join m_customers mc on iua.member_oid = mc.customer_mid \r\n"                    + "where internet_user_oid = (Select internet_user_oid from internet_users \r\n"                    + "where logon_id = '" + olsUser + "'))";        } else {            GetAccountNumber = "Select account_no, accs.description from accounts a\r\n"                    + "inner join account_status accs \r\n"                    + "on a.account_status_oid = accs.account_status_oid where customer_mid in \r\n"                    + "(Select customer_mid from internet_user_access iua \r\n"                    + "inner join m_customers mc on iua.member_oid = mc.customer_mid \r\n"                    + "where internet_user_oid IN (Select internet_user_oid from internet_users \r\n"                    + "where logon_id != '" + olsUser + "'))";        }        try {            accountNumber = DataBaseUtils.getMySQLConnectionAndGetValueForRowIndex(GetAccountNumber, dbName, dbUserName,                    dbPassword, 1);            System.out.println("Account Number from DB " + accountNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return accountNumber;    }    public String getAccountNumberFromDB1() {        String accountNumber = " ";        String GetAccountNumber = " ";        GetAccountNumber = "select fsc.field_set_control_oid , mcust.customer_no,fgf.description, fscv.value  from field_set_control_values fscv\n" +                "left join field_group_fields fgf on fgf.field_group_field_oid = fscv.field_group_field_oid\n" +                "left join field_set_controls fsc on fsc.field_set_control_oid = fscv.field_set_control_oid\n" +                "left join m_customers mcust on mcust.customer_mid = fsc.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join field_groups fg on fg.field_group_oid = fgf.field_group_oid and fg.field_group_oid = fsc.field_group_oid\n" +                "where mc.client_mid = 101 and fg.description = 'Tax Number - Date Effective approvals'\n" +                "and fsc.FIELD_SET_CTRL_STATUS_CID in (select constant_oid from constants where description = 'New')\n" +                "and fsc.APPROVAL_STATUS_CID in (select constant_oid from constants where description in ('Pending'));";        try {            accountNumber = DataBaseUtils.getMySQLConnectionAndGetValueForRowIndex(GetAccountNumber, dbName, dbUserName,                    dbPassword, 1);            System.out.println("Account Number from DB " + accountNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return accountNumber;    }    public Map<String, String> getAccountNumberByStatusFromDB(String accountStatus) {        Map<String, String> accountNumber = new HashMap<>();        String getAccountNumberByStatus = "Select account_no, accs.description, actual_balance, credit_limit from accounts a\r\n"                + "inner join account_status accs \r\n"                + "on a.account_status_oid = accs.account_status_oid where customer_mid in \r\n"                + "(Select customer_mid from internet_user_access iua \r\n"                + "inner join m_customers mc on iua.member_oid = mc.customer_mid \r\n"                + "where internet_user_oid = (Select internet_user_oid from internet_users \r\n" + "where logon_id = '"                + olsUser + "' and accs.description='" + accountStatus + "'))";        try {            accountNumber = DataBaseUtils.getMySQLConnectionAndEntireRowValue(getAccountNumberByStatus, dbName,                    dbUserName, dbPassword);            System.out.println("Account Number from DB " + accountNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return accountNumber;    }    public String getCustomerNumberWithCardsFromDB(String scenarioType) {        System.out.println("Scenario type is " + scenarioType);        String customerNumberWithCards = " ";        String queryToGetCustomerNumberWithCards = " ";        if (scenarioType.equalsIgnoreCase("associatedUser")) {            queryToGetCustomerNumberWithCards = "Select customer_no from internet_user_access iua\r\n" +                    "inner join m_customers mc on iua.member_oid = mc.customer_mid \r\n" +                    "where internet_user_oid = (Select internet_user_oid from internet_users where logon_id = '" + olsUser + "')" +                    "and mc.customer_mid in (select customer_mid from CARDS)\r\n";        } else {            queryToGetCustomerNumberWithCards = "Select customer_no from internet_user_access iua \r\n" +                    "inner join m_customers mc on iua.member_oid = mc.customer_mid \r\n" +                    "where internet_user_oid in (Select internet_user_oid from internet_users where logon_id != '" + olsUser + "')" +                    "and mc.customer_mid in (select customer_mid from CARDS)\r\n";        }        try {            customerNumberWithCards = DataBaseUtils.getMySQLConnection(queryToGetCustomerNumberWithCards, dbName, dbUserName, dbPassword);            System.out.println("customer Number with cards from DB " + customerNumberWithCards);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return customerNumberWithCards;    }    public Map<String, String> getTransactionfromDB() {        String getValidationData = " ";        Map<String, String> transactionDetails = new HashMap<String, String>();        getValidationData = "Select mc.customer_no, t.card_no, ml.location_no, t.reference, clv.customer_cost_centre_code, tlie.product_description from transactions t inner join m_customers mc on\r\n" +                "					t.customer_mid = mc.customer_mid\r\n" +                "					inner join m_locations ml on\r\n" +                "					t.location_mid = ml.location_mid\r\n" +                "					inner join card_list_view clv on \r\n" +                "					t.card_oid = clv.card_oid \r\n" +                "					inner join transaction_line_items_enquiry tlie on\r\n" +                "					t.transaction_oid = tlie.transaction_oid\r\n" +                "					where t.customer_mid in (Select mc.customer_mid from internet_user_access iua\r\n" +                "					inner join m_customers mc on iua.member_oid = mc.customer_mid \r\n" +                "					where internet_user_oid = (Select internet_user_oid from internet_users\r\n" +                "					where logon_id = '" + olsUser + "'))";        try {            transactionDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(getValidationData, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return transactionDetails;    }    public Map<String, String> getLocationsfromDB() {        String getLocation = " ";        Map<String, String> locationDetails = new HashMap<String, String>();        getLocation = "Select distinct ml.location_no, ml.name, ml.external_code, ml.latitude,ml.trading_name, lt.description AS LOCATION_TYPE, c.description AS LOCATION_STATUS, \r\n"                + "ml.longitude, le.postal_address_line, le.postal_postal_code from m_locations ml\r\n"                + "inner join location_types lt on  ml.location_type_did = lt.description_oid \r\n"                + "inner join constants c on ml.location_status_cid = c.constant_oid \r\n"                + "left join location_enquiry le on ml.location_mid = le.location_mid where ml.client_mid = (Select distinct client_mid from m_customers mc inner join internet_user_access iua\r\n"                + "on mc.customer_mid = iua.member_oid where internet_user_oid = (Select internet_user_oid from internet_users \r\n"                + "where logon_id = '" + olsUser + "'))";        try {            System.out.println("Location Query --:" + getLocation);            locationDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(getLocation, dbName, dbUserName,                    dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return locationDetails;    }    public Map<String, String> getSearchCardDetailsFromDB(String customerNo) {        String cardDetailsQuery = "Select card_no, v.description, v.license_plate, v.vehicle_id, d.driver_name, d.short_name, d.driver_id from cards c \r\n" +                "inner join card_status cs \r\n" +                "on c.card_status_oid = cs.card_status_oid  \r\n" +                "inner join vehicles v on\r\n" +                "c.vehicle_oid = v.vehicle_oid\r\n" +                "inner join drivers d on \r\n" +                "c.driver_oid = d.driver_oid\r\n" +                "where c.customer_mid in (select customer_mid from m_customers mc where mc.customer_no='" + customerNo + "')";        Map<String, String> searchCardDetails = null;        try {            searchCardDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(cardDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Card search details : " + searchCardDetails);        return searchCardDetails;    }    public String getCreatedPasswordAtDateFromDB(String internetUser) {        String passwordCreatedDate = " ";        String getPasswordCreatedDate = "select password_created_at from users where LOGON_ID = '"                + internetUser + "'";        try {            passwordCreatedDate = DataBaseUtils.getMySQLConnection(getPasswordCreatedDate, dbName, dbUserName,                    dbPassword);            System.out.println("Password created at from DB " + passwordCreatedDate);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return passwordCreatedDate;    }    public void updateCreatedPasswordAtDateThroughDB(String passwordCreatedDate, String internetUser) {        String updatePasswordCreatedDate = "update users set password_created_at='" + passwordCreatedDate + "'  where logon_id='" + internetUser + "'";        try {            DataBaseUtils.executeQueryAndCommit(updatePasswordCreatedDate, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public String changingDateFormat(String options, String format) throws ParseException {        String currentProcessingDate = getProcessingDateFromMClients();        String sDate;        DateFormat actualDateFormat, targetFormat;        if (options.equalsIgnoreCase("Current")) {            sDate = currentProcessingDate;            actualDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        } else {            sDate = enterADateValueInStatusBeginDateField(options, currentProcessingDate);            actualDateFormat = new SimpleDateFormat("dd-MMM-yy hh.mm.ss");        }        System.out.println("sDate --> " + sDate);        Date paredDate = actualDateFormat.parse(sDate);        if (format.equalsIgnoreCase("DBFormat"))            targetFormat = new SimpleDateFormat("dd-MMM-yy hh.mm.ss");        else if (format.equalsIgnoreCase("DBFormatWithouTime"))            targetFormat = new SimpleDateFormat("dd-MMM-yy");        else if (format.equalsIgnoreCase("DBFormatforPricing"))            targetFormat = new SimpleDateFormat("yyyy-MM-dd");        else            targetFormat = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");        String formatedDate = targetFormat.format(paredDate);        System.out.println("formatedDate --> " + formatedDate);        return formatedDate;    }    public String enterADateValueInStatusBeginDateField(String beginDate, String currentDate) {        String beginDateValue = "";        String parseDate = "";        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        try {            dateFormatter.parse(currentDate);            Date newDate;            Calendar cal = Calendar.getInstance();            cal.setTime(dateFormatter.parse(currentDate));            if (beginDate.equals("Past")) {                cal.add(Calendar.MONTH, -3);            } else if (beginDate.equals("PastSix")) {                cal.add(Calendar.MONTH, -6);            } else if (beginDate.equals("oneDayBefore")) {                cal.add(Calendar.DATE, -1);            } else if (beginDate.equals("WayFuture")) {                cal.add(Calendar.YEAR, +2);            } else if (beginDate.equals("MoreThanProduct")) {                cal.add(Calendar.YEAR, +6);            }            newDate = cal.getTime();            DateFormat df = new SimpleDateFormat("dd-MMM-yy hh.mm.ss");            beginDateValue = df.format(newDate);            parseDate = beginDateValue + ".000000000 AM";            System.out.println("Parse Date " + parseDate);        } catch (ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return parseDate;    }    public String getLogonStatusCIDFromDB(String logonID) {        initializeDBEnvironment();        String logonStatusCid = "";        String queryToGetLogonStatusCid = "select logon_status_cid from Users where logon_ID='" + logonID + "'";        try {            logonStatusCid = DataBaseUtils.getMySQLConnection(queryToGetLogonStatusCid, dbName, dbUserName, dbPassword);            System.out.println("logon_status_cid from DB " + logonStatusCid);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return logonStatusCid;    }    /*       UI DB Utils        */    public Map<String, String> getUserDetailsFromDB(String logonID) {        initializeDBEnvironment();        String cardDetailsQuery = "select * from users where logon_id = '" + logonID + "'";        Map<String, String> userDetails = null;        try {            userDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(cardDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("User details : " + userDetails);        return userDetails;    }    public Map<String, String> getQueryResultsOnMap(String query) {        initializeDBEnvironment();        Map<String, String> userDetails = null;        try {            userDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(query, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Card search details : " + userDetails);        return userDetails;    }    public List<Map<String, String>> getAllRowsOfQueryResultsOnListMap(String query) {        initializeDBEnvironment();        List<Map<String, String>> userDetails = null;        try {            userDetails = DataBaseUtils.getMySQLConnectionAndAllRowsInList(query, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Card search details : " + userDetails);        return userDetails;    }    /*     Change the current password to null     */    public void updateCurrentPasswordToNull(String logonID) {        initializeDBEnvironment();        String passwordExpiryQuery = "update users set password = null where logon_id = '" + logonID + "'";        try {            DataBaseUtils.executeQueryAndCommit(passwordExpiryQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    /*    Set the password expiry date     */    public void setPasswordExpiryDate(String noOfDaysToExpire, String userName) {        initializeDBEnvironment();        String passwordExpiryQuery = "update users set password_created_at = sysdate-" + noOfDaysToExpire + "  where logon_id = '" + userName + "'";        try {            DataBaseUtils.executeQueryAndCommit(passwordExpiryQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    /*    Method to unlock account setting LOGON_STATUS_CID and FAILED_LOGON_COUNT     */    public void updateLogonStatusCID(String logonID, int logonStatusCID) {        initializeDBEnvironment();        try {            String query = "update users set logon_status_cid = " + logonStatusCID + ", FAILED_LOGON_COUNT = 0 where logon_id = '" + logonID + "'";            System.out.println(query);            DataBaseUtils.executeQueryAndCommit(query, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    /*   Method to unlock account setting LOGON_STATUS_CID and FAILED_LOGON_COUNT    */    public String getMaxPasswordAttemptsForAccessGroupOID(String logonID) {        initializeDBEnvironment();        Map<String, String> loginTblData;        Map<String, String> maxPwdAttemps = null;        try {            String query = "select * from users where logon_id = '" + logonID + "'";            loginTblData = DataBaseUtils.getMySQLConnectionAndEntireRowValue(query, dbName, dbUserName, dbPassword);            String accessGroupOID = "select * from Access_groups where access_group_oid = " + loginTblData.get("ACCESS_GROUP_OID");            maxPwdAttemps = DataBaseUtils.getMySQLConnectionAndEntireRowValue(accessGroupOID, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return maxPwdAttemps.get("MAX_PASSWORD_ATTEMPTS");    }    public Map<String, String> getTokenCreatedFromDB(String logonID) {        String token = "select token,created,Expires from password_link where LOGON_ID ='" + logonID + "' order by created Desc";        Map<String, String> tokenDetails = null;        try {            tokenDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(token, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return tokenDetails;    }    public void setCurrentSystemDateForExpiredPassword(String expiredPassword, String user) {        String currentPasswordCreatedDate = "update users set password_created_at = sysdate-1 where logon_id='" + user + "'";        try {            DataBaseUtils.executeQueryAndCommit(currentPasswordCreatedDate, dbName, dbUserName, dbPassword);            System.out.println("Current password for the user is " + currentPasswordCreatedDate);        } catch (ClassNotFoundException e) {// TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {// TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {// TODO Auto-generated catch block            e.printStackTrace();        }    }    public Map<String, String> getTokenDetailsFromDB(String logonID) {        initializeDBEnvironment();        String token = "select *from password_link where USER_LOGON_ID='" + logonID + "' and USED='N'order by created Desc ";        Map<String, String> tokenDetails = null;        try {            tokenDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(token, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return tokenDetails;    }    public Map<String, String> getTokenUsedColumnFromDB(String token) {        initializeDBEnvironment();        String gettokendetails = "select *from password_link where token='" + token + "'  ";        Map<String, String> tokenDetails = null;        try {            tokenDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(gettokendetails, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return tokenDetails;    }    public String getContactOidCustomerFromDB(String cusNo, String scenarioType) {        initializeDBEnvironment();        String contactOid = "", queryToGetContactOid = "";        if (scenarioType.equalsIgnoreCase("associated")) {            queryToGetContactOid = "select CONTACT_OID from CONTACTS " +                    " where MEMBER_OID in (select CUSTOMER_MID from M_CUSTOMERS mcu where mcu.CUSTOMER_NO='" + cusNo + "' and " +                    " mcu.CLIENT_MID in (select mc.CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        } else            queryToGetContactOid = "select CONTACT_OID from CONTACTS " +                    " where MEMBER_OID not in (select CUSTOMER_MID from M_CUSTOMERS mcu where mcu.CUSTOMER_NO='" + cusNo + "' and " +                    " mcu.CLIENT_MID in (select mc.CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        try {            contactOid = DataBaseUtils.getMySQLConnection(queryToGetContactOid, dbName, dbUserName,                    dbPassword);            System.out.println("conatactOid" + contactOid);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return contactOid;    }    public boolean checkingThePresenceOfCostCentreDB(String CUSTOMER_COST_CENTRE_CODE, String DESCRIPTION, String SHORT_DESCRIPTION) {        initializeDBEnvironment();        String costCentreCode = "";        boolean presence = true;        String queryToGetCostCentreCode = "select * from CUSTOMER_COST_CENTRES"                + " where CUSTOMER_COST_CENTRE_CODE='" + CUSTOMER_COST_CENTRE_CODE + "' and DESCRIPTION='" + DESCRIPTION + "' and SHORT_DESCRIPTION='" + SHORT_DESCRIPTION + "'";        try {            costCentreCode = DataBaseUtils.getMySQLConnection(queryToGetCostCentreCode, dbName, dbUserName,                    dbPassword);            System.out.println("costCentreCode" + costCentreCode);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (costCentreCode.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public boolean checkingThePresenceOfContactsInDB(String userId, String CONTACT_NAME, String email, String mobile1, String contactTypeOid) {        initializeDBEnvironment();        String getContacts = "";        boolean presence = true;        String queryToGetContacts = "Select * from contacts where CONTACT_NAME='" + CONTACT_NAME + "' and " +                "LAST_UPDATED_BY='" + userId + "' and EMAIL_ADDRESS='" + email + "' and " +                "PHONE_MOBILE_1='" + mobile1 + "' and CONTACT_TYPE_OID=" + contactTypeOid + " ORDER by LAST_UPDATED_AT DESC";        try {            getContacts = DataBaseUtils.getMySQLConnection(queryToGetContacts, dbName, dbUserName,                    dbPassword);            System.out.println("getContacts" + getContacts);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (getContacts.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public boolean checkingThePresenceOfContactBasedOnContactOid(String contactOid) {        initializeDBEnvironment();        String getContacts = "";        boolean presence = true;        String queryToGetContacts = "Select * from contacts where CONTACT_OID='" + contactOid + "'";        try {            getContacts = DataBaseUtils.getMySQLConnection(queryToGetContacts, dbName, dbUserName,                    dbPassword);            System.out.println("getContacts" + getContacts);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (getContacts.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public String getCustomerCostCentreCodeFromDB(String cusNo) {        initializeDBEnvironment();        String costCentreCode = "";//		String queryToGetCostCentreCode = "select CUSTOMER_COST_CENTRE_CODE from CUSTOMER_COST_CENTRES where CUSTOMER_MID=(select CUSTOMER_MID from M_CUSTOMERS where CUSTOMER_NO='" + cusNo + "')";        String queryToGetCostCentreCode = "select CUSTOMER_COST_CENTRE_CODE from CUSTOMER_COST_CENTRES"                + " where CUSTOMER_MID=(select CUSTOMER_MID from M_CUSTOMERS mcu where mcu.CUSTOMER_NO='" + cusNo + "' and"                + " mcu.CLIENT_MID=(select mc.CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        try {            costCentreCode = DataBaseUtils.getMySQLConnection(queryToGetCostCentreCode, dbName, dbUserName,                    dbPassword);            System.out.println("costCentreCode" + costCentreCode);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return costCentreCode;    }    public String getCustomerNumberFromDB(String scenarioType) {        initializeDBEnvironment();        System.out.println("Scenario type is " + scenarioType);        String customerNumber = " ";        String queryToGetCustomerNumber = " ";        if (scenarioType.equalsIgnoreCase("associatedUser")) {            queryToGetCustomerNumber =                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc " +                            "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID " +                            "inner join USERS us on us.USER_OID = um.USER_OID " +                            "Where us.LOGON_ID='" + olsUser + "' and mc.contact_name is not null";        } else {            queryToGetCustomerNumber =                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc\n" +                            "Where mc.CUSTOMER_MID not in \n" +                            "(Select um.MEMBER_OID from USER_MEMBERS um \n" +                            "inner join USERS us on us.USER_OID = um.USER_OID where us.LOGON_ID='" + olsUser + "' )";        }        try {            customerNumber = DataBaseUtils.getMySQLConnection(queryToGetCustomerNumber, dbName, dbUserName, dbPassword);            System.out.println("customer Number from DB " + customerNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return customerNumber;    }    public String getStateAndCountriesBasedOnClient(String scenarioType) {        initializeDBEnvironment();        System.out.println("Scenario type is " + scenarioType);        String state = "", queryToGetState = "";        String queryToGetCustomerNumber = " ";        if (scenarioType.equalsIgnoreCase("associated")) {            queryToGetState = "select DESCRIPTION from STATES where COUNTRY_OID in (" +                    " select COUNTRY_OID from M_CLIENTS where CLIENT_MID =  (select CLIENT_MID from M_CLIENTS" +                    " where NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        } else {            queryToGetState = "select DESCRIPTION from STATES where COUNTRY_OID not in (" +                    " select COUNTRY_OID from M_CLIENTS where CLIENT_MID =  (select CLIENT_MID from M_CLIENTS" +                    " where NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        }        try {            state = DataBaseUtils.getMySQLConnection(queryToGetState, dbName, dbUserName, dbPassword);            System.out.println("customer Number from DB " + queryToGetState);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return state;    }    public Map<String, String> getContactTypeBasedOnClient(String scenarioType, boolean allowed) {        initializeDBEnvironment();        System.out.println("Scenario type is " + scenarioType);        Map<String, String> contactTypeTable = null;        String queryToContactTypeTable = " ";        if (scenarioType.equalsIgnoreCase("associated") && allowed) {            queryToContactTypeTable = "Select ct.DESCRIPTION,ct.CONTACT_TYPE_OID,ct.IS_MULTIPLE_CONTACTS_ALLOWED from CONTACT_TYPES ct " +                    " where CLIENT_MID in (Select mc.CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and " +                    " ct.IS_MULTIPLE_CONTACTS_ALLOWED='Y'";        } else if (scenarioType.equalsIgnoreCase("associated") && !allowed) {            queryToContactTypeTable = "Select ct.DESCRIPTION,ct.CONTACT_TYPE_OID,ct.IS_MULTIPLE_CONTACTS_ALLOWED from CONTACT_TYPES ct " +                    " where CLIENT_MID in (Select mc.CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and " +                    " ct.IS_MULTIPLE_CONTACTS_ALLOWED='N'";        } else {            queryToContactTypeTable = "Select ct.DESCRIPTION,ct.CONTACT_TYPE_OID,ct.IS_MULTIPLE_CONTACTS_ALLOWED from CONTACT_TYPES ct " +                    " inner join M_CLIENTS mc on mc.CLIENT_MID = ct.CLIENT_MID " +                    " where ct.IS_MULTIPLE_CONTACTS_ALLOWED='Y'" +                    " and mc.SHORT_NAME !='" + PropUtils.getPropValue(inputProp, clientCountry) + "'";        }        try {            contactTypeTable = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToContactTypeTable, dbName, dbUserName, dbPassword);            System.out.println("contact type table from DB " + contactTypeTable);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return contactTypeTable;    }    public String getCountsOfVehilesAndDrivers(String cusNo, String type) {        initializeDBEnvironment();//        System.out.println("Scenario type is "+scenarioType);        String count = "", queryToCounts = "";        String queryToGetCustomerNumber = " ";        if (type.equalsIgnoreCase("vehicle")) {            queryToCounts = "select count(*) from VEHICLES "                    + " where CUSTOMER_MID=(select CUSTOMER_MID from M_CUSTOMERS mcu where mcu.CUSTOMER_NO='" + cusNo + "' and"                    + " mcu.CLIENT_MID=(select mc.CLIENT_MID from M_CLIENTS mc where mc.SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        } else {            queryToCounts = "select count(*) from DRIVERS "                    + " where CUSTOMER_MID=(select CUSTOMER_MID from M_CUSTOMERS mcu where mcu.CUSTOMER_NO='" + cusNo + "' and"                    + " mcu.CLIENT_MID=(select mc.CLIENT_MID from M_CLIENTS mc where mc.SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        }        try {            count = DataBaseUtils.getMySQLConnection(queryToCounts, dbName, dbUserName, dbPassword);            System.out.println("Total counts from DB " + count);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return count;    }    public String validatingVehilesDetails() {        initializeDBEnvironment();//        System.out.println("Scenario type is "+scenarioType);        String count = "", queryToCounts = "";        String queryToGetCustomerNumber = " ";        queryToCounts = "select * from VEHICLES where VEHICLE_OID=15923 and LICENSE_PLATE='MY12T234' " +                " and VEHICLE_ID='V1' and DESCRIPTION='Vehicle 01'";        try {            count = DataBaseUtils.getMySQLConnection(queryToCounts, dbName, dbUserName, dbPassword);            System.out.println("Total counts from DB " + count);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return count;    }    public boolean checkingThePresenceOfVehicleDetailsInDB(String vehicleOid, String licencePlate,                                                           String status, String cardNo) {        initializeDBEnvironment();        String getVehicleDetails = "", getDetails = "";        boolean presence = false;        getVehicleDetails =                "Select cve.CARD_NO from CARD_VEHICLES_ENQUIRY cve " +                        "inner join CONSTANTS const on const.CONSTANT_OID=cve.VEHICLE_STATUS_CID " +                        "Where cve.CARD_NO='" + cardNo + "' and cve.VEHICLE_OID='" + vehicleOid + "' and cve.LICENSE_PLATE='" + licencePlate + "' and " +                        "and const.DESCRIPTION='" + status + "'";//                "select * from VEHICLES where VEHICLE_OID='" + vehicleOid + "' and LICENSE_PLATE='" + licencePlate + "' " +//                " and VEHICLE_ID='" + vehicleId + "'" and DESCRIPTION='" + description + "'";        try {            getDetails = DataBaseUtils.getMySQLConnection(getVehicleDetails, dbName, dbUserName,                    dbPassword);            System.out.println("getDetails" + getDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (!getDetails.isEmpty()) {            presence = true;        }        System.out.println("presence---->" + presence);        return presence;    }    public boolean checkingThePresenceOfDriverDetailsInDB(String driverOid, String driverName,                                                          String driverId, String shortName, String status, String cardNo) {        initializeDBEnvironment();        String getDriverDetails = "", getDetails = "";        boolean presence = false;        getDriverDetails =                "Select cde.CARD_NO from CARD_DRIVERS_ENQUIRY cde " +                        "inner join CONSTANTS const on const.CONSTANT_OID=cde.DRIVER_STATUS_CID " +                        "Where cde.CARD_NO='" + cardNo + "' and cde.DRIVER_OID='" + driverOid + "' and " +                        "cde.DRIVER_NAME='" + driverName + "' and cde.DRIVER_ID='" + driverId + "' and " +                        "cde.SHORT_NAME='" + shortName + "' and const.DESCRIPTION='" + status + "'";//                "select * from DRIVERS where DRIVER_OID='" + driverOid + "' and DRIVER_NAME='" + driverName + "' " +//                " and DRIVER_ID='" + driverId + "' and SHORT_NAME='" + shortName + "'";        try {            getDetails = DataBaseUtils.getMySQLConnection(getDriverDetails, dbName, dbUserName,                    dbPassword);            System.out.println("getDetails" + getDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (!getDetails.isEmpty()) {            presence = true;        }        System.out.println("presence---->" + presence);        return presence;    }    /*    Method to execute update query     */    public void executeUpdateQuery(String query) {        try {            initializeDBEnvironment();            DataBaseUtils.executeQueryAndCommit(query, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public boolean checkingThePresenceOfNewUserIdInDB(String logonId) {        initializeDBEnvironment();        String getUserLogonId = "";        boolean presence = true;        String queryToGetLogOnId = "select logon_id from users where logon_id='" + logonId + "'";        try {            getUserLogonId = DataBaseUtils.getMySQLConnection(queryToGetLogOnId, dbName, dbUserName,                    dbPassword);            System.out.println("User from DB is " + getUserLogonId);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (getUserLogonId.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public Map<String, String> getEntireCustomerDetailsFromDB(String scenarioType, String newUser) {        initializeDBEnvironment();        String customerDetailsQuery;        Map<String, String> toGetCustomerDetails = null;        if (scenarioType.equalsIgnoreCase("associatedUser")) {            customerDetailsQuery = "Select * from M_CUSTOMERS mc "                    + "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID "                    + "inner join USERS us on us.USER_OID = um.USER_OID " + "Where us.LOGON_ID='" + newUser + "'";        } else {            customerDetailsQuery = "Select * from M_CUSTOMERS mc "                    + "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID "                    + "inner join USERS us on us.USER_OID = um.USER_OID " + "Where us.LOGON_ID='" + newUser + "'";        }        try {            toGetCustomerDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(customerDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Customer details : " + toGetCustomerDetails);        return toGetCustomerDetails;    }    public String getMemberOidFromUserMembersTableFromDB(String userOid) {        initializeDBEnvironment();        String memberOid = "";        String queryToGetMemberOid = "select member_oid from user_members where user_oid='" + userOid + "'";        try {            memberOid = DataBaseUtils.getMySQLConnection(queryToGetMemberOid, dbName, dbUserName, dbPassword);            //System.out.println("Member_oid from user_members table is " + memberOid);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return memberOid;    }    public String getUSerStatusDescription(String userLogOnStatusCid) {        initializeDBEnvironment();        String userStatusDescription = "";        String queryToGetUserDescription = "select description from constants where CONSTANT_OID='" + userLogOnStatusCid + "'";        try {            userStatusDescription = DataBaseUtils.getMySQLConnection(queryToGetUserDescription, dbName, dbUserName, dbPassword);            System.out.println("status description from constants table is " + userStatusDescription);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return userStatusDescription;    }    public String getCustomerNumberForUserFromDB(String scenarioType, String userName) {        initializeDBEnvironment();        System.out.println("Scenario type is " + scenarioType);        String customerNumber = " ";        String queryToGetCustomerNumber = " ";        if (scenarioType.equalsIgnoreCase("associatedUser")) {            queryToGetCustomerNumber =//                "select CUSTOMER_NO from M_CUSTOMERS where CUSTOMER_MID in " +//                "( select MEMBER_OID from USER_MEMBERS where USER_OID=(select USER_OID from users where LOGON_ID='"+olsUser+"'))";                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc "                            + "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID "                            + "inner join USERS us on us.USER_OID = um.USER_OID " + " Where us.LOGON_ID='" + userName                            + "'";        } else {            queryToGetCustomerNumber =//                "select CUSTOMER_NO from M_CUSTOMERS where CUSTOMER_MID in " +//                "( select MEMBER_OID from USER_MEMBERS where USER_OID!=(select USER_OID from users where LOGON_ID='"+olsUser+"'))";                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc " +                            "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID " +                            "inner join USERS us on us.USER_OID = um.USER_OID " +                            "Where us.LOGON_ID!='" + userName + "'";        }        try {            customerNumber = DataBaseUtils.getMySQLConnection(queryToGetCustomerNumber, dbName, dbUserName, dbPassword);            System.out.println("customer Number from DB " + customerNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return customerNumber;    }    public List<Map<String, String>> getAccesGroupDescriptionFromAccessGroupsTable() {        initializeDBEnvironment();        List<Map<String, String>> description = null;        String queryToGetDescriptionFromAccessGroups = "select description from access_groups ag \n" +                "inner join m_clients mc on mc.CLIENT_GROUP_MID = ag.CLIENT_GROUP_MID \n" +                "where client_mid= (select CLIENT_MID from M_CLIENTS  \n" +                "where SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and ag.ACCESS_MEMBER_TYPE_CID=2703";        try {            description = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetDescriptionFromAccessGroups, dbName, dbUserName, dbPassword);            System.out.println("Description from access groups table is " + description);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return description;    }    public String getClientGroupMidFromMClients() {        initializeDBEnvironment();        String clientGroupMid = "";        String queryToGetClientGroupMid = "select CLIENT_GROUP_MID from m_clients where client_mid=(select CLIENT_MID from M_CLIENTS" +                " where SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            clientGroupMid = DataBaseUtils.getMySQLConnection(queryToGetClientGroupMid, dbName, dbUserName, dbPassword);            System.out.println("client_group_mid from users table is " + clientGroupMid);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return clientGroupMid;    }    public List<Map<String, String>> getAllRowsCustomerNumberFromCustomerTable(String scenarioType, String logOnId) {        initializeDBEnvironment();        List<Map<String, String>> toGetCustomerNumbers = null;        String customerNumbersRow;        //String queryToGetCustomerNumber = "select CUSTOMER_NO from m_customers where customer_mid in(select member_oid from user_members where user_oid=(select user_oid from users where logon_id='" + logOnId + "') and member_type_cid='103')";        if (scenarioType.equalsIgnoreCase("associatedUser")) {            customerNumbersRow =//                "select CUSTOMER_NO from M_CUSTOMERS where CUSTOMER_MID in " +//                "( select MEMBER_OID from USER_MEMBERS where USER_OID=(select USER_OID from users where LOGON_ID='"+olsUser+"'))";                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc "                            + "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID "                            + "inner join USERS us on us.USER_OID = um.USER_OID " + "Where us.LOGON_ID='" + logOnId                            + "'";        } else {            customerNumbersRow =//                "select CUSTOMER_NO from M_CUSTOMERS where CUSTOMER_MID in " +//                "( select MEMBER_OID from USER_MEMBERS where USER_OID!=(select USER_OID from users where LOGON_ID='"+olsUser+"'))";                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc "                            + "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID "                            + "inner join USERS us on us.USER_OID = um.USER_OID " + "Where us.LOGON_ID!='" + logOnId                            + "'";        }        try {            toGetCustomerNumbers = DataBaseUtils.getMySQLConnectionAndAllRowsInList(customerNumbersRow, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Customer Numbers from DB " + toGetCustomerNumbers);        return toGetCustomerNumbers;    }    public String getProcessingDateFromMClients() {        initializeDBEnvironment();        String processingDate = "";        String queryToGetClientProcessingDate = "select PROCESSING_DATE from m_clients where client_mid=(select CLIENT_MID from M_CLIENTS" +                " where NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            processingDate = DataBaseUtils.getMySQLConnection(queryToGetClientProcessingDate, dbName, dbUserName, dbPassword);            System.out.println("Processing date from m_clients table is " + processingDate);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return processingDate;    }    public boolean checkingThePresenceOfFileNameInStoredReportsTableFromDB(String userOid, String customerNo, String reportTypeDescription) {        initializeDBEnvironment();        String getFileNameForStoredreports = "";        boolean presence = true;        String queryToGetLogOnId = "\n" +                "select FILE_NAME from stored_reports where report_type_oid=(select report_type_oid from report_types \n" +                "where DESCRIPTION='" + reportTypeDescription + "' and client_mid=(select CLIENT_MID from M_CLIENTS  \n" +                "where SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and MEMBER_TYPE_CID in (select member_type_cid from user_members where user_oid='" + userOid + "')) \n" +                "and MEMBER_TYPE_CID in (select member_type_cid from user_members where user_oid='" + userOid + "') \n" +                "and member_oid=(select customer_mid from m_customers where customer_no='" + customerNo + "')";        try {            getFileNameForStoredreports = DataBaseUtils.getMySQLConnection(queryToGetLogOnId, dbName, dbUserName,                    dbPassword);            System.out.println("File name from DB is " + getFileNameForStoredreports);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (getFileNameForStoredreports.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public String getMemberTypeDescriptionFromConstantsTable(String userOid) {        initializeDBEnvironment();        String memberTypeCid = "";        String queryToGetMemberType = "select description from constants where CONSTANT_OID in (select member_type_cid from user_members where user_oid='" + userOid + "')";        try {            memberTypeCid = DataBaseUtils.getMySQLConnection(queryToGetMemberType, dbName, dbUserName, dbPassword);            System.out.println("Member type cid from constants table is " + memberTypeCid);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return memberTypeCid;    }    public String getReportCategoryOidFromReportCategoriesTable(String desc) {        initializeDBEnvironment();        String reportCategoryDesc = " ";        String queryToGetReportCategory = "select REPORT_CATEGORY_OID from report_categories where description = '" + desc + "' and client_mid=(select CLIENT_MID from M_CLIENTS \n" +                " where SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            reportCategoryDesc = DataBaseUtils.getMySQLConnection(queryToGetReportCategory, dbName, dbUserName, dbPassword);            System.out.println("Member type cid from constants table is " + reportCategoryDesc);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return reportCategoryDesc;    }    public List<Map<String, String>> getReportCategoriesFromReportTypeTemplateViewTable(String reportCategoryOid, String userOid) {        initializeDBEnvironment();        String reportCategoryDetails;        List<Map<String, String>> toGetReportDetails = null;        reportCategoryDetails = "SELECT DESCRIPTION,IS_ONLINE_SCHEDULED,IS_ADHOC FROM REPORT_TYPE_TEMPLATE_VIEW \n" +                "WHERE CLIENT_MID=(select CLIENT_MID from M_CLIENTS  \n" +                "Where SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') AND REPORT_CATEGORY_OID='" + reportCategoryOid + "' \n" +                "AND MEMBER_TYPE_CID in(select member_type_cid from user_members where user_oid='" + userOid + "') \n" +                "AND (IS_ONLINE_SCHEDULED ='Y' OR IS_ADHOC='Y')";        try {            toGetReportDetails = DataBaseUtils.getMySQLConnectionAndAllRowsInList(reportCategoryDetails, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Report details : " + toGetReportDetails);        return toGetReportDetails;    }    public String getPasswordLimitFromAccessRoleTable() {        initializeDBEnvironment();        String quertyToGetPasswordLimitCount = null;        try {            String query = "select MAX_PASSWORD_ATTEMPTS from access_roles where DESCRIPTION like '%OMV AT Customer%' ";            quertyToGetPasswordLimitCount = DataBaseUtils.getMySQLConnection(query, dbName, dbUserName, dbPassword);            System.out.println(" password constrains for the logged on user is " + quertyToGetPasswordLimitCount);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return quertyToGetPasswordLimitCount;    }    public List<Map<String, String>> getReportParamsBasedOnReportType(String reportType) {        initializeDBEnvironment();        String reportParam;        List<Map<String, String>> listOfReportParams = null;        reportParam = "select rtp.DATA_TYPE_CID,rtp.LABEL, rtp.PARAM_CONFIG, c.description from report_template_params rtp \n" +                "inner join constants c on c.constant_oid = rtp.DATA_TYPE_CID where report_template_oid in \n" +                "(select report_template_oid from report_types where description= '" + reportType + "' and client_mid=(select CLIENT_MID from M_CLIENTS \n" +                "Where SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'))";        try {            listOfReportParams = DataBaseUtils.getMySQLConnectionAndAllRowsInList(reportParam, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfReportParams;    }    public boolean checkingThePresenceOfCreatedScheduledtemplate(String userOid, String newReportname, String labelName, String reportType) {        initializeDBEnvironment();        Map<String, String> scheduledReportDetails = new HashMap<String, String>();        boolean createdNewReport = true;        String queryToGetCretedReportDetails = "\r\n" +                "select  rap.LABEL, rap.VALUE, rt.description as report_Type_Descritption,ra.* from report_assignments ra\r\n" +                "inner join report_types rt on rt.REPORT_TYPE_OID = ra.REPORT_TYPE_OID \r\n" +                " inner join report_Assignment_params rap on rap.REPORT_ASSIGNMENT_OID = ra.REPORT_ASSIGNMENT_OID \r\n" +                " where user_oid='" + userOid + "' and ra.DESCRIPTION = '" + newReportname + "' and label='" + labelName + "' and rt.description='" + reportType + "' ";        try {            scheduledReportDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCretedReportDetails, dbName, dbUserName,                    dbPassword);            System.out.println("New scheduled report details from DB is " + scheduledReportDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (scheduledReportDetails.isEmpty()) {            createdNewReport = false;        }        return createdNewReport;    }    public String getReportTypeDescBasedOnTemplateName(String userOid, String newReportname, String userReportType) {        initializeDBEnvironment();        String reportDesc = null;        String queryToGetReportDescription;        if (userReportType.equals("associatedUserScheduledReportType")) {            queryToGetReportDescription = "select rt.description from report_assignments ra \n" +                    "inner join report_types rt on rt.REPORT_TYPE_OID = ra.REPORT_TYPE_OID where ra.user_oid='" + userOid + "' and ra.description='" + newReportname + "'";        } else {            queryToGetReportDescription = "select rt.description from report_assignments ra \n" +                    "inner join report_types rt on rt.REPORT_TYPE_OID = ra.REPORT_TYPE_OID where ra.user_oid!='" + userOid + "'";        }        try {            reportDesc = DataBaseUtils.getMySQLConnection(queryToGetReportDescription, dbName, dbUserName,                    dbPassword);            System.out.println("Report description name based on template is " + reportDesc);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return reportDesc;    }    public Map<String, String> getAllScheduledRepordetails(String userOid, String newReportname, String reportTypeDesc) {        initializeDBEnvironment();        Map<String, String> scheduledReportDetails = new HashMap<String, String>();        String queryToGetCretedReportDetails = "select ra.REPORT_ASSIGNMENT_OID, rt.description as report_Type_Descritption, fq.DESCRIPTION as frequency_description, ra.IS_ADHOC_REPORT, ra.IS_ENABLED, ra.CREATED_ON, c.description as delivery_type_description, ra.EMAIL_ADDRESS, ra.DESCRIPTION as report_assignment_description \n" +                "from report_assignments ra \n" +                "inner join report_types rt on rt.REPORT_TYPE_OID = ra.REPORT_TYPE_OID \n" +                "inner join frequencies fq on fq.FREQUENCY_OID = ra.FREQUENCY_OID \n" +                "inner join constants c on c.constant_oid = ra.DELIVERY_TYPE_CID where ra.user_oid='" + userOid + "' and ra.description='" + newReportname + "'" +                "and rt.description='" + reportTypeDesc + "'  order by ra.REPORT_ASSIGNMENT_OID desc ";        try {            scheduledReportDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCretedReportDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Scheduled report details based on template name from DB is " + scheduledReportDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return scheduledReportDetails;    }    public String getCountOfUSerScheduledReports(String userOid) {        initializeDBEnvironment();        String countOfReport = null;        String queryToGetcountOfReports = "select count(*) from report_assignments where user_oid='" + userOid + "'";        try {            countOfReport = DataBaseUtils.getMySQLConnection(queryToGetcountOfReports, dbName, dbUserName,                    dbPassword);            System.out.println("Report description name based on template is " + countOfReport);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return countOfReport;    }    public List<Map<String, String>> getListOfReportsBasedOnLoggedOnUser(String userOid, String userScheduledReportType) {        initializeDBEnvironment();        String queryToGetDescriptionFromReportAssigments;        List<Map<String, String>> listOfReports = null;        if (userScheduledReportType.equals("associatedUserScheduledReport")) {            queryToGetDescriptionFromReportAssigments = "select rt.description,ra.DESCRIPTION as report_assignment_description,ra.IS_ENABLED, ra.CREATED_ON,fq.DESCRIPTION as frequency_description from report_assignments ra \r\n" +                    "inner join report_types rt on rt.REPORT_TYPE_OID = ra.REPORT_TYPE_OID \r\n" +                    "inner join frequencies fq on fq.FREQUENCY_OID = ra.FREQUENCY_OID  where ra.user_oid='" + userOid + "'";        } else {            queryToGetDescriptionFromReportAssigments = "select rt.description,ra.DESCRIPTION as report_assignment_description,ra.IS_ENABLED, ra.CREATED_ON,fq.DESCRIPTION as frequency_description from report_assignments ra \r\n" +                    "inner join report_types rt on rt.REPORT_TYPE_OID = ra.REPORT_TYPE_OID \r\n" +                    "inner join frequencies fq on fq.FREQUENCY_OID = ra.FREQUENCY_OID  where ra.user_oid!='" + userOid + "'";        }        try {            listOfReports = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetDescriptionFromReportAssigments, dbName, dbUserName, dbPassword);            System.out.println("List of reports based on logged on user is " + listOfReports);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfReports;    }    public Map<String, String> validateSpecificAccountInformations(String customerNo) {        initializeDBEnvironment();        Map<String, String> accountDetails = null;        String queryToGetSpecificAccountDetails;        queryToGetSpecificAccountDetails = "select mcust.customer_no,mcust.name,c.description,mcust.EMAIL_ADDRESS,mcust.PHONE_BUSINESS,mcust.PHONE_FAX,mcust.PHONE_MOBILE_1,\r\n" +                "mcust.CONTACT_NAME,ad.ADDRESS_LINE, ad.POSTAL_CODE, ad.SUBURB  from m_customers mcust\r\n" +                "inner join accounts a on a.account_no = mcust.customer_no and a.customer_mid = mcust.customer_mid\r\n" +                "inner join account_status acs on acs.ACCOUNT_STATUS_OID = a.ACCOUNT_STATUS_OID\r\n" +                "inner join constants c on c.constant_oid = acs.ACCOUNT_STATUS_TYPE_CID\r\n" +                "inner join addresses ad on ad.ADDRESS_OID = mcust.STREET_ADDRESS_OID\r\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\r\n" +                "where mc.NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "' and mcust.customer_no= '" + customerNo + "' ";        try {            accountDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetSpecificAccountDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Account informations from DB is " + accountDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return accountDetails;    }    public List<Map<String, String>> getReportTypeAndTemplateNameDescription(String userOid, String reportTypeDesc) {        initializeDBEnvironment();        List<Map<String, String>> templateDetails = null;        String queryToGetTemplate = "select rt.description, ra.description as report_template_description from report_Assignments ra \r\n" +                "inner join report_types rt on rt.REPORT_TYPE_OID = ra.REPORT_TYPE_OID where ra.user_oid='" + userOid + "' and rt.description='" + reportTypeDesc + "' \r\n" +                "order by ra.LAST_UPDATED_AT desc";        try {            templateDetails = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetTemplate, dbName, dbUserName,                    dbPassword);            System.out.println("Report description name based on template is " + templateDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return templateDetails;    }    public String getCustomerNumberHavingCardsFromDB(String scenarioType) {        initializeDBEnvironment();        System.out.println("Scenario type is " + scenarioType);        String customerNumber = " ";        String queryToGetCustomerNumber = " ";        if (scenarioType.equalsIgnoreCase("associatedUser")) {            queryToGetCustomerNumber =                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc " +                            "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID " +                            "inner join USERS us on us.USER_OID = um.USER_OID " +                            "inner join Accounts ac on ac.CUSTOMER_MID = mc.CUSTOMER_MID " +                            "inner join ACCOUNT_STATUS acs on acs.ACCOUNT_STATUS_OID = ac.ACCOUNT_STATUS_OID " +                            "Where us.LOGON_ID='" + olsUser + "'";        } else {            queryToGetCustomerNumber =                    "Select distinct mc.CUSTOMER_NO from M_CUSTOMERS mc " +                            "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID " +                            "inner join USERS us on us.USER_OID = um.USER_OID " +                            "Where us.LOGON_ID!='" + olsUser + "'";        }        try {            customerNumber = DataBaseUtils.getMySQLConnection(queryToGetCustomerNumber, dbName, dbUserName, dbPassword);            System.out.println("customer Number from DB " + customerNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return customerNumber;    }    public List<Map<String, String>> getCustomerCardOfferProductAndType(String customerNumber) {        initializeDBEnvironment();        List<Map<String, String>> cardDetails = null;        String queryToGetCustomerCardProductsOffers;        if (!customerNumber.equalsIgnoreCase("invalidCus")) {            queryToGetCustomerCardProductsOffers =                    "Select cprg.DESCRIPTION as cardprogram,ccf.DESCRIPTION as cardoffer,cp.DESCRIPTION as cardproduct,con.DESCRIPTION as cardtype from CUSTOMER_CARD_OFFERS ccf \n" +                            " inner join CARD_PRODUCTS cp on cp.CARD_OFFER_OID = ccf.CARD_OFFER_OID\n" +                            " inner join M_CUSTOMERS mcu on mcu.CUSTOMER_MID = ccf.CUSTOMER_MID\n" +                            " inner join m_clients mcl on mcl.CLIENT_MID = mcu.CLIENT_MID\n" +                            " inner join CARD_PROGRAMS cprg on cprg.CARD_PROGRAM_OID = mcu.CARD_PROGRAM_OID\n" +                            " inner join CONSTANTS con on con.CONSTANT_OID = ccf.CARD_TYPE_CID\n" +                            " where ccf.CUSTOMER_NO='" + customerNumber + "'" +                            " and mcl.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'";        } else            queryToGetCustomerCardProductsOffers =                    "Select cprg.DESCRIPTION as cardprogram,ccf.DESCRIPTION as cardoffer,cp.DESCRIPTION as cardproduct,con.DESCRIPTION as cardtype from CUSTOMER_CARD_OFFERS ccf \n" +                            " inner join CARD_PRODUCTS cp on cp.CARD_OFFER_OID = ccf.CARD_OFFER_OID\n" +                            " inner join M_CUSTOMERS mcu on mcu.CUSTOMER_MID = ccf.CUSTOMER_MID\n" +                            " inner join m_clients mcl on mcl.CLIENT_MID = mcu.CLIENT_MID\n" +                            " inner join CARD_PROGRAMS cprg on cprg.CARD_PROGRAM_OID = mcu.CARD_PROGRAM_OID\n" +                            " inner join CONSTANTS con on con.CONSTANT_OID = ccf.CARD_TYPE_CID\n" +                            " where mcl.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'";        try {            cardDetails = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetCustomerCardProductsOffers, dbName, dbUserName, dbPassword);            System.out.println("customer Number from DB " + customerNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardDetails;    }    public String getCardNumberForSpecificCustomer(String scenarioType, String customerNumber) {        initializeDBEnvironment();        System.out.println("Scenario type is " + scenarioType);        String cardNumber = " ";        String queryToGetCustomerNumber = " ";        if (scenarioType.equalsIgnoreCase("associatedCard")) {            queryToGetCustomerNumber =                    "Select c.CARD_NO from cards c inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                            "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n" +                            "where mc.CUSTOMER_NO=" + customerNumber + " and " +                            "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                            "and c.REPLACE_CARD_OID is null and(cs.DESCRIPTION like '%Active' or cs.DESCRIPTION = 'No Transactions' or cs.DESCRIPTION like 'Normal Service' or cs.DESCRIPTION like 'Pending Use')";        } else if (scenarioType.equalsIgnoreCase("associated")) {            queryToGetCustomerNumber =                    "Select c.CARD_NO from cards c inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                            "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n" +                            "where mc.CUSTOMER_NO=" + customerNumber + " and " +                            "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                            "and c.REPLACE_CARD_OID is null ";        } else if (scenarioType.equalsIgnoreCase("defaultProf")) {            queryToGetCustomerNumber =                    "Select c.CARD_NO from cards c inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                            "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n " +                            "inner join CARD_CONTROL_PROFILES ccp on ccp.CARD_CONTROL_PROFILE_OID=c.CARD_CONTROL_PROFILE_OID\n " +                            "where mc.CUSTOMER_NO=" + customerNumber + " and " +                            "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                            "and c.REPLACE_CARD_OID is null and(cs.DESCRIPTION like '%Active' or cs.DESCRIPTION = 'No Transactions' or cs.DESCRIPTION like 'Normal Service' or cs.DESCRIPTION like 'Pending Use')" +                            "and ccp.PROFILE_CATEGORY_CID = 502";        } else if (scenarioType.equalsIgnoreCase("privateProf")) {            queryToGetCustomerNumber =                    "Select c.CARD_NO from cards c inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                            "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n " +                            "inner join CARD_CONTROL_PROFILES ccp on ccp.CARD_CONTROL_PROFILE_OID=c.CARD_CONTROL_PROFILE_OID\n " +                            "where mc.CUSTOMER_NO=" + customerNumber + " and " +                            "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                            "and c.REPLACE_CARD_OID is null and(cs.DESCRIPTION like '%Active' or cs.DESCRIPTION = 'No Transactions' or cs.DESCRIPTION like 'Normal Service' or cs.DESCRIPTION like 'Pending Use')" +                            "and ccp.PROFILE_CATEGORY_CID = 503";        } else {            queryToGetCustomerNumber =                    "Select c.CARD_NO from cards c inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                            "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n" +                            "where mc.CUSTOMER_NO!=" + customerNumber + " and " +                            "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                            "and c.REPLACE_CARD_OID is null and(cs.DESCRIPTION like '%Active' or cs.DESCRIPTION = 'No Transactions' or cs.DESCRIPTION like 'Normal Service' or cs.DESCRIPTION like 'Pending Use')";        }        try {            cardNumber = DataBaseUtils.getMySQLConnection(queryToGetCustomerNumber, dbName, dbUserName, dbPassword);            System.out.println("Card Number from DB " + cardNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardNumber;    }    public Map<String, String> getValidCardNumberAndItsCustomer() {        initializeDBEnvironment();        Map<String, String> result = new HashMap<>();        String queryToGetCustomerNumber = " ";        queryToGetCustomerNumber =                "Select c.CARD_NO as cardNumber,mc.CUSTOMER_NO as customerNumber,cs.DESCRIPTION as status from cards c " +                        "inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID " +                        "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID " +                        "inner join USER_MEMBERS um on um.MEMBER_OID = mc.CUSTOMER_MID " +                        "inner join Users us on us.USER_OID = um.USER_OID " +                        "where us.LOGON_ID='" + olsUser + "' and " +                        "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and " +                        "c.REPLACE_CARD_OID is null and " +                        "(cs.DESCRIPTION like '%Active' or cs.DESCRIPTION = 'No Transactions' or " +                        "cs.DESCRIPTION like 'Normal Service' or cs.DESCRIPTION like 'Pending Use')";        try {            result = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCustomerNumber, dbName, dbUserName, dbPassword);            System.out.println("Card Number andd customer from DB " + result);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return result;    }    public Map<String, String> getCustomerDefaultProf(String customerNumber, String cardOffer) {        initializeDBEnvironment();        Map<String, String> cardDetails = new HashMap<>();        String queryToGetCustomerDefaultCardProf =                "Select ccp.DESCRIPTION,pr.DESCRIPTION as PRODUCT_RESTRICTION,\n" +                        " tl.DESCRIPTION as TIME_LIMIT,lr.DESCRIPTION as LOCATION_RESTRICTION from M_CUSTOMERS mcu\n" +                        " inner join M_CLIENTS mcl on mcl.CLIENT_MID=mcu.CLIENT_MID\n" +                        " inner join CUSTOMER_CARD_PROFILES cucp on cucp.CUSTOMER_MID=mcu.CUSTOMER_MID\n" +                        " inner join CARD_CONTROL_PROFILES ccp on ccp.CARD_CONTROL_PROFILE_OID=cucp.CARD_CONTROL_PROFILE_OID\n" +                        " inner join CARD_CONTROLS cc on cc.CARD_CONTROL_PROFILE_OID=cucp.CARD_CONTROL_PROFILE_OID\n" +                        " left join PRODUCT_RESTRICTIONS pr on pr.PRODUCT_RESTRICTION_OID=cc.PRODUCT_RESTRICTION_OID\n" +                        " left join TIME_LIMITS tl on tl.TIME_LIMIT_OID=cc.TIME_LIMIT_OID\n" +                        " left join LOCATION_RESTRICTIONS lr on lr.LOCATION_RESTRICTION_OID=cc.LOCATION_RESTRICTION_OID\n" +                        " inner join CARD_OFFERS co on co.CLIENT_MID=mcu.CLIENT_MID\n" +                        " where mcu.CUSTOMER_NO='" + customerNumber + "' and co.DESCRIPTION='" + cardOffer + "'\n" +                        " and mcl.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'";        try {            cardDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCustomerDefaultCardProf, dbName, dbUserName, dbPassword);            System.out.println("customer Number from DB " + customerNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardDetails;    }    public Map<String, String> getCardDetailsFromDB(String cardNumber) {        initializeDBEnvironment();        Map<String, String> cardDetails = new HashMap<>();        String queryToGetCustomerDetails =                "Select ccp.DESCRIPTION,clv.CARD_EXPIRES_ON,clv.OLS_CARD_OFFER_DESCRIPTION as CARD_OFFER," +                        "clv.OLS_CARD_PRODUCT_DESCRIPTION as CARD_PRODUCT,clv.CARD_TYPE_DESCRIPTION as CARD_TYPE," +                        "clv.CARD_STATUS_DESCRIPTION as status,clv.EMBOSSING_NAME,DRIVER_NAME,DRIVER_ID," +                        "VEHICLE_DESCRIPTION,LICENSE_PLATE from CARD_LIST_VIEW clv " +                        "inner join CARD_CONTROL_PROFILES ccp on ccp.CARD_CONTROL_PROFILE_OID=clv.CARD_CONTROL_PROFILE_OID " +                        "inner join M_CLIENTS mcl on mcl.CLIENT_MID=clv.CLIENT_MID " +                        "where clv.CARD_NO=" + cardNumber + " and mcl.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "'";        try {            cardDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCustomerDetails, dbName, dbUserName, dbPassword);            //  System.out.println("card details from DB " + cardDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardDetails;    }//Need to check    public String enterADateValueInStatusBeginDateField(String beginDate, String currentDate, String scenarioType) {        String beginDateValue = "";        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        try {            dateFormatter.parse(currentDate);            Date newDate;            Calendar cal = Calendar.getInstance();            cal.setTime(dateFormatter.parse(currentDate));            if (beginDate.equals("Past")) {                cal.add(Calendar.MONTH, -3);            } else if (beginDate.equals("PastSix")) {                cal.add(Calendar.MONTH, -6);            } else if (beginDate.equals("oneDayBefore")) {                cal.add(Calendar.DATE, -1);            } else if (beginDate.equals("pastOneMonth")) {                cal.add(Calendar.MONTH, -1);            } else if (beginDate.equals("futureDate")) {                cal.add(Calendar.MONTH, +1);            }            newDate = cal.getTime();            if (scenarioType.equals("dbFormat")) {                DateFormat df = new SimpleDateFormat("dd-MMM-yy hh:mm:ss");                beginDateValue = df.format(newDate);                beginDateValue = beginDateValue + ".000000000 AM";            } else if (scenarioType.equals("olsFormat")) {                // 	System.out.println("Report date");                DateFormat df = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");                beginDateValue = df.format(newDate);            }            System.out.println("Generated new Date is " + beginDateValue);        } catch (ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return beginDateValue;    }    public List<Map<String, String>> getCardNumberWithStatusForSpecificCustomer(String scenarioType, String customerNumber) {        initializeDBEnvironment();        System.out.println("Scenario type is " + scenarioType);        List<Map<String, String>> cardNumber = null;        String queryToGetCardNumber = " ";        if (scenarioType.equalsIgnoreCase("associatedCard")) {            queryToGetCardNumber =                    "Select c.CARD_NO, cs.description, cso.description as olsStatusDescription from cards c inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                            "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n" +                            "inner join card_status_ols cso on cso.card_status_oid=cs.CARD_STATUS_OID\n" +                            "where mc.CUSTOMER_NO=" + customerNumber + " and \n" +                            "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                            "and c.REPLACE_CARD_OID is null and(cs.DESCRIPTION like '%Active' or cs.DESCRIPTION = 'No Transactions'\n" +                            "or cs.DESCRIPTION like 'Normal Service' or cs.DESCRIPTION like 'Pending Use')";        } else {            queryToGetCardNumber =                    "Select c.CARD_NO, cs.description, cso.description as olsStatusDescription from cards c inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                            "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n" +                            "inner join card_status_ols cso on cso.card_status_oid=cs.CARD_STATUS_OID\n" +                            "where mc.CUSTOMER_NO!=" + customerNumber + " and " +                            "mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                            "and c.REPLACE_CARD_OID is null and(cs.DESCRIPTION like '%Active' or cs.DESCRIPTION = 'No Transactions' "                            + "or cs.DESCRIPTION like 'Normal Service' or cs.DESCRIPTION like 'Pending Use')";        }        try {            cardNumber = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetCardNumber, dbName, dbUserName, dbPassword);            System.out.println("Card Number and status from DB " + cardNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardNumber;    }    public Map<String, String> getUpdatedStatusForSpecificCardNumber(String customerNumber, String cardNumber) {        initializeDBEnvironment();        Map<String, String> cardNumberWithStatus = null;        String queryToGetCardNumber = " ";        queryToGetCardNumber =                "Select c.CARD_NO, cs.description, cso.description as olsStatusDescription from cards c \n" +                        "inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID\n" +                        "inner join CARD_STATUS cs on cs.CARD_STATUS_OID=c.CARD_STATUS_OID\n" +                        "inner join card_status_ols cso on cso.card_status_oid=cs.CARD_STATUS_OID\n" +                        "where mc.CUSTOMER_NO=" + customerNumber + " and c.CARD_NO=" + cardNumber + " \n" +                        "and mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            cardNumberWithStatus = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCardNumber, dbName, dbUserName, dbPassword);            System.out.println("Card Number and status from DB " + cardNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardNumberWithStatus;    }    public boolean checkingThePresenceOfCardRequestInDB(String customerNo, String cardNo) {        initializeDBEnvironment();        String cardRequest = "";        boolean presence = true;        String queryToGetCardRequestTable = "select cr.card_oid,cr.CARD_REQUEST_OID, cr.REQUESTED_AT from card_requests cr\n" +                "inner join cards c on c.card_oid=cr.card_oid \n" +                "inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID where mc.CUSTOMER_NO=" + customerNo + " and c.CARD_NO=" + cardNo + " \n" +                "and mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') \n" +                "order by cr.CARD_REQUEST_OID desc";        try {            cardRequest = DataBaseUtils.getMySQLConnection(queryToGetCardRequestTable, dbName, dbUserName,                    dbPassword);            System.out.println("Card request from dB is " + cardRequest);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (cardRequest.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public boolean checkingThePresenceOfGeneratedNewCardNumberInDB(String customerNo, String cardNo) {        initializeDBEnvironment();        String newCardNumber = "";        boolean presence = true;        String queryToGetGeneratedNewCardNo = "select *from cards c\n" +                "inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=c.CUSTOMER_MID where mc.CUSTOMER_NO=" + customerNo + " and c.CARD_NO=" + cardNo + " \n" +                "and mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            newCardNumber = DataBaseUtils.getMySQLConnection(queryToGetGeneratedNewCardNo, dbName, dbUserName,                    dbPassword);            System.out.println("Card request from dB is " + newCardNumber);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (newCardNumber.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public String getTotalSpendingAmountOfTransactions(String cusNo, String effectiveDateFrom, String effetiveDateTo) {        initializeDBEnvironment();        String totalAmount = null;        String queryToGetSpendingAmount = "select SUM(CUSTOMER_AMOUNT)from transactions t \n" +                "inner join M_CUSTOMERS mc on mc.CUSTOMER_MID=t.CUSTOMER_MID\n" +                "where t.effective_at > '" + effectiveDateFrom + "' \n" +                "AND t.effective_at <= '" + effetiveDateTo + "' and mc.CUSTOMER_NO=" + cusNo + "\n" +                "and mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and TRANSACTION_CATEGORY_CID=4701";        try {            totalAmount = DataBaseUtils.getMySQLConnection(queryToGetSpendingAmount, dbName, dbUserName,                    dbPassword);            System.out.println("Total spending amount for specific transaction is " + totalAmount);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return totalAmount;    }    public Map<String, String> getTransactionSearchDetailsFromDB(String reference, String cusNo) {        initializeDBEnvironment();        Map<String, String> transactionSearchDetails = null;        String transactionDetailsQuery = "select te.CUSTOMER_AMOUNT, te.REFERENCE,te.CARD_NO, te.DRIVER_NAME,te.TRANSACTION_TYPE_DESCRIPTION,te.LOCATION_ADDRESS,\n" +                "te.LOCATION_NAME, c.description as trans_category_desc,\n" +                "te.POSTED_AT, te.EFFECTIVE_AT,pt.description as product_translation_desc,v.description as vehicle_desc,ct.DESCRIPTION as captureType_desc from transaction_enquiry te\n" +                "inner join constants c on c.constant_oid = te.TRANSACTION_CATEGORY_CID \n" +                "left join vehicles v on v.VEHICLE_OID = te.VEHICLE_OID\n" +                "left join transaction_line_items tli on tli.TRANSACTION_OID = te.TRANSACTION_OID\n" +                "left join product_translations pt on pt.PRODUCT_TRANSLATION_OID = tli.PRODUCT_TRANSLATION_OID\n" +                "left join capture_types ct on ct.CAPTURE_TYPE_OID = te.CAPTURE_TYPE_OID \n" +                "where te.customer_no=" + cusNo + " and reference='" + reference + "'";        try {            transactionSearchDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(transactionDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Transaction details : " + transactionSearchDetails);        return transactionSearchDetails;    }    public Map<String, String> getCardActions(String cardNo) {        initializeDBEnvironment();        Map<String, String> cardActionDetails = null;        String cardActionDetailsQuery = "select c.card_status_oid, cs.is_valid, cs.description, csm.is_status_change from cards c\n" +                "inner join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "inner join card_status_ols_mapping csm on csm.card_status_oid = c.card_status_oid\n" +                "where card_no='" + cardNo + "'";        try {            cardActionDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(cardActionDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Card action details : " + cardActionDetails);        return cardActionDetails;    }    public List<Map<String, String>> getListOfClientCountriesFromDB(String logonID) {        initializeDBEnvironment();        List<Map<String, String>> clientCountries = null;        String countryDetailsQuery = "select mc.name from m_clients mc where mc.client_mid in \n" +                "(select arc.client_mid From access_role_clients arc\n" +                "inner join user_roles ur on ur.access_role_oid= arc.access_role_oid\n" +                "inner join users u on u.user_oid = ur.user_oid\n" +                "where u.logon_id = '" + logonID + "')";        try {            clientCountries = DataBaseUtils.getMySQLConnectionAndAllRowsInList(countryDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Client country details : " + clientCountries);        return clientCountries;    }    public Map<String, String> getSpecificCountryDetailsFromDB(String logonID) {        initializeDBEnvironment();        Map<String, String> countries = null;        String countryDetailsQuery = "select agc.ACCESS_GROUP_OID, agc.client_mid, mc.name from access_group_clients agc  \n" +                "inner join users us on us.access_group_oid = agc.access_group_oid\n" +                "inner join m_Clients mc on mc.client_mid = agc.client_mid\n" +                "where us.logon_id='" + logonID + "'";        try {            countries = DataBaseUtils.getMySQLConnectionAndEntireRowValue(countryDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Specific country details : " + countries);        return countries;    }    public Map<String, String> getCardsWithCostCentre() {        initializeDBEnvironment();        Map<String, String> cardsWithCostCentres = null;        String cardsWithCostCentresQuery = "Select distinct ccc.CUSTOMER_COST_CENTRE_CODE, c.CARD_NO,c.CUSTOMER_MID from M_CUSTOMERS mc\n" +                " inner join CUSTOMER_COST_CENTRES ccc on ccc.CUSTOMER_MID = mc.CUSTOMER_MID\n" +                " inner join COST_CENTRES cc on cc.CUSTOMER_COST_CENTRE_OID = ccc.CUSTOMER_COST_CENTRE_OID\n" +                " inner join cards c on c.card_oid = cc.card_oid\n" +                " where mc.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')" +                " and ROWNUM<=50";        try {            cardsWithCostCentres = DataBaseUtils.getMySQLConnectionAndEntireRowValueForSpecificRowIndex(cardsWithCostCentresQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Cards With CostCentres : " + cardsWithCostCentres);        return cardsWithCostCentres;    }    public Map<String, String> getLocationDetails() {        initializeDBEnvironment();        Map<String, String> locationDetails = null;        String cardsWithCostCentresQuery = "Select le.LOCATION_NO,le.EXTERNAL_CODE,le.NAME from Location_ENQUIRY le " +                " where le.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')" +                " and ROWNUM<=50";        try {            locationDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValueForSpecificRowIndex(cardsWithCostCentresQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Cards With CostCentres : " + locationDetails);        return locationDetails;    }    public Map<String, String> getDriverId() {        initializeDBEnvironment();        Map<String, String> driverDetails = null;        String driverDetailsQuery = "Select cde.DRIVER_ID from CARD_DRIVERS_ENQUIRY cde " +                " where cde.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')" +                " and ROWNUM<=50";        try {            driverDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValueForSpecificRowIndex(driverDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Cards With CostCentres : " + driverDetails);        return driverDetails;    }    public Map<String, String> getVehicleId() {        initializeDBEnvironment();        Map<String, String> vehicleDetails = null;        String vehicleDetailsQuery = "Select cve.VEHICLE_ID from CARD_VEHICLES_ENQUIRY cve " +                " where cve.CLIENT_MID=(Select CLIENT_MID from M_CLIENTS mc where mc.SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')" +                " and ROWNUM<=50";        try {            vehicleDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValueForSpecificRowIndex(vehicleDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Cards With CostCentres : " + vehicleDetails);        return vehicleDetails;    }    public void dataSetupForAuthTransactions(String cardNo, String locationCode, String locationName, String driverId, String vehicleId,                                             String effectiveDate, String reference, String currencyCode, String originalAmount, String clientMid, String customerMid) {        String insertDataForAuthTransactionsQuery = "INSERT INTO auth_transaction_logs\n" +                " (LOCATION_CODE, CARD_NO, DATE_TIME_EFFECTIVE, REFERENCE, CAPTURE_TYPE ,CURRENCY_CODE, TRANSACTION_CODE, ORIGINAL_AMOUNT, CLIENT_MID,\n" +                " AUTHORISATION_NO, DRIVER_ID, VEHICLE_ID, LOCATION_NAME, CUSTOMER_MID, ISSUER_CURRENCY_CODE, ORIGINAL_CURRENCY_CODE, ORIG_STAN,ISSUER_AMOUNT)\n" +                " VALUES ('" + locationCode + "', '" + cardNo + "','" + effectiveDate + "','" + reference + "','X','" + currencyCode + "', 'AUTH', '" + originalAmount + "'," + clientMid + ",\n" +                " '000001','" + driverId + "','" + vehicleId + "','" + locationName + "','" + customerMid + "','702','702','" + reference + "','" + originalAmount + "')";        try {            DataBaseUtils.executeQueryAndCommit(insertDataForAuthTransactionsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public List<Map<String, String>> getListOfCardOids(String customerNo) {        initializeDBEnvironment();        List<Map<String, String>> card_oids = null;        String countryDetailsQuery = "\n" +                "select c.card_oid, c.card_no from cards c \n" +                "inner join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "inner join m_customers mc on mc.customer_mid = c.customer_mid \n" +                "where cs.description = 'Requested - Not Issued'\n" +                "and mc.CUSTOMER_NO = '" + customerNo + "' and cs.client_mid = (Select CLIENT_MID from M_CLIENTS mc\n" +                "where mc.SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') " +                "and c.replace_card_oid is null order by card_oid desc";        try {            card_oids = DataBaseUtils.getMySQLConnectionAndAllRowsInList(countryDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Card_oid and card number from DB : " + card_oids);        return card_oids;    }    public void updateCardStatusFromRequestedStatusToNoTransaction(String cardOid) {        String updateCardstatus = "update cards set CARD_STATUS_OID = 729 where card_oid='" + cardOid + "'";        try {            DataBaseUtils.executeQueryAndCommit(updateCardstatus, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public void updateCardStatusAsNotransactionInCardStatusLogsTable(String cardOid) {        String updateCardStatusInLogs = "update card_status_logs set CARD_STATUS_OID = 729 where card_oid='" + cardOid + "'";        try {            DataBaseUtils.executeQueryAndCommit(updateCardStatusInLogs, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public List<Map<String, String>> getTransactionOidFromTransactionTable() {        initializeDBEnvironment();        List<Map<String, String>> transOids = null;        String queryToGetTransactionOid = "select te.transaction_oid, te.CARD_OID,te.LOCATION_MID,te.DRIVER_OID,te.VEHICLE_OID\n" +                "from transaction_enquiry te where te.TRANSACTION_CATEGORY_CID = 4701 and te.CARD_OID is not null\n" +                "and te.LOCATION_MID is not null and te.DRIVER_OID is not null\n" +                "and rownum<=10";        try {            transOids = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetTransactionOid, dbName, dbUserName,                    dbPassword);            System.out.println("Transaction oid from transaction table is " + transOids);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return transOids;    }    public Map<String, String> getTransactionDetailsBasedOnTransOid(String transactionOid) {        Map<String, String> transactionDetails = new HashMap<>();        String getAccountNumberByStatus = "select mc.CUSTOMER_NO, te.reference, c.card_no, te.LICENSE_PLATE, te.DRIVER_NAME, te.LOCATION_NO, \n" +                "te.LOCATION_NAME,ccc.customer_cost_centre_code \n" +                "from transaction_enquiry te\n" +                "inner join m_customers mc on mc.CUSTOMER_MID = te.customer_mid \n" +                "inner join cards c on c.card_oid = te.CARD_OID \n" +                "left join cost_centres cc on cc.cost_centre_oid = te.cost_centre_oid\n" +                "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                "where te.transaction_oid = '" + transactionOid + "'";        try {            transactionDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(getAccountNumberByStatus, dbName,                    dbUserName, dbPassword);            System.out.println("Account Number from DB " + transactionDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return transactionDetails;    }    public List<Map<String, String>> getAllTransactionDetailsFromTransactionEnquiryTable(String transaction_oid) {        initializeDBEnvironment();        List<Map<String, String>> transDetails = null;        String queryToGetTransactionDetails = "select pt.description ,ct.description as capture_type_description, c.description as transaction_class_desc ,te.* from transaction_enquiry te\n" +                "inner join transaction_line_items tli on tli.transaction_oid = te.transaction_oid\n" +                "inner join product_translations pt on pt.product_translation_oid = tli.product_translation_oid\n" +                "inner join capture_types ct on ct.CAPTURE_TYPE_OID = te.CAPTURE_TYPE_OID\n" +                "inner join constants c on c.constant_oid = te.transaction_class_cid\n" +                "where te.transaction_oid='" + transaction_oid + "'";        try {            transDetails = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetTransactionDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Transaction details from transaction table is " + transDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return transDetails;    }    public List<Map<String, String>> getAuthTransactionDetailsfromAuthTransaction() {        initializeDBEnvironment();        List<Map<String, String>> authTransDetails = null;        String queryToGetAuthTransactionDetails = "Select distinct mc.customer_no,atl.card_no,atl.auth_transaction_log_oid,atl.authorisation_no,\n" +                "atl.location_code,atl.location_name,le.location_no,d.driver_id,d.driver_name," +                //"CCC.CUSTOMER_COST_CENTRE_CODE,\n" +                "V.DESCRIPTION AS VEHICLE_DESCRIPTION,v.LICENSE_PLATE,atl.orig_stan,atl.reference,atl.issuer_amount,atl.original_amount\n" +                "from auth_transaction_logs atl\n" +                "left join m_customers mc on mc.customer_mid = atl.customer_mid\n" +                "left join Location_ENQUIRY le on le.NAME = atl.location_name\n" +                "inner join cards c ON c.card_no = atl.card_no\n" +                "left join drivers d on d.card_oid=c.card_oid\n" +                "left join vehicles v on v.card_oid=c.card_oid\n" +                //   "left join cost_centres cc on c.card_oid= cc.card_oid AND to_date(atl.date_time_effective,'yyyymmddhh24miss') >= cc.EFFECTIVE_ON\n" +                //    "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                "where atl.client_mid=(Select CLIENT_MID from M_CLIENTS mc" +                " where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') \n" +                //      "and d.driver_name is not null " +                //     "and CCC.CUSTOMER_COST_CENTRE_CODE is not null" +                " and v.LICENSE_PLATE is not null";        try {            authTransDetails = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetAuthTransactionDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Transaction oid from transaction table is " + authTransDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return authTransDetails;    }    public Map<String, String> validateSpecificAccountDetailsBasedOnClientMid(String customerNo, String clientMid) {        initializeDBEnvironment();        Map<String, String> accountDetails = null;        String queryToGetSpecificAccountDetails;        queryToGetSpecificAccountDetails = "select mcust.customer_no,mcust.name,c.description,mcust.EMAIL_ADDRESS,mcust.PHONE_BUSINESS,mcust.PHONE_FAX,mcust.PHONE_MOBILE_1,\r\n" +                "mcust.CONTACT_NAME,ad.ADDRESS_LINE, ad.POSTAL_CODE, ad.SUBURB  from m_customers mcust \r\n" +                "inner join accounts a on a.account_no = mcust.customer_no and a.customer_mid = mcust.customer_mid\r\n" +                "inner join account_status acs on acs.ACCOUNT_STATUS_OID = a.ACCOUNT_STATUS_OID\r\n" +                "inner join constants c on c.constant_oid = acs.ACCOUNT_STATUS_TYPE_CID\r\n" +                "inner join addresses ad on ad.ADDRESS_OID = mcust.STREET_ADDRESS_OID\r\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\r\n" +                " where mcust.customer_no= '" + customerNo + "' and mcust.client_mid='" + clientMid + "' ";        try {            accountDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetSpecificAccountDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Account informations from DB is " + accountDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return accountDetails;    }    public List<Map<String, String>> getCustomerCostCentreCode(String accessLevel) {        initializeDBEnvironment();        List<Map<String, String>> costCentresValues = null;        String queryToGetCostCentres = null;        if (accessLevel.equals("clientLevel")) {            queryToGetCostCentres = "select CUSTOMER_COST_CENTRE_CODE from customer_cost_centres cc\n" +                    "inner join m_customers mcust on mcust.customer_mid = cc.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid=(Select CLIENT_MID from M_CLIENTS mc \n" +                    "where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and rownum<=100";        } else {            queryToGetCostCentres = "select CUSTOMER_COST_CENTRE_CODE from customer_cost_centres cc\n" +                    "inner join m_customers mcust on mcust.customer_mid = cc.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid=(Select CLIENT_MID from M_CLIENTS mc\n" +                    "where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        }        try {            costCentresValues = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetCostCentres, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of cost centre values is " + costCentresValues);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return costCentresValues;    }    public List<Map<String, String>> getListOfCustomerNumbers(String accessLevel) {        initializeDBEnvironment();        List<Map<String, String>> customerNumbers = null;        String queryToGetCustomers = null;        if (accessLevel.equals("clientLevel")) {            queryToGetCustomers = "select customer_no from m_customers mcust\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid=(Select CLIENT_MID from M_CLIENTS mc\n" +                    " where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and rownum<=100";        } else {            queryToGetCustomers = "select customer_no from m_customers mcust\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid=(Select CLIENT_MID from M_CLIENTS mc\n" +                    "where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')and rownum<=100";        }        try {            customerNumbers = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetCustomers, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of customer numbers is " + customerNumbers);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return customerNumbers;    }    public List<Map<String, String>> getListOfLocationNumbers(String accessLevel) {        initializeDBEnvironment();        List<Map<String, String>> locationNumbers = null;        String queryToGetLocations = null;        if (accessLevel.equals("clientLevel")) {            queryToGetLocations = "select ml.client_mid,ml.location_no from m_locations ml\n" +                    "inner join m_clients mc on mc.client_mid = ml.client_mid\n" +                    "where mc.client_mid=(Select CLIENT_MID from M_CLIENTS mc\n" +                    "where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and rownum<=100";        } else {            queryToGetLocations = "select ml.client_mid,ml.location_no from m_locations ml \n" +                    "inner join m_clients mc on mc.client_mid = ml.client_mid \n" +                    "where mc.client_mid=(Select CLIENT_MID from M_CLIENTS mc \n" +                    "where mc.NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "') and rownum<=100";        }        try {            locationNumbers = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetLocations, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of location numbers is " + locationNumbers);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return locationNumbers;    }    public List<Map<String, String>> getListOfTransactionForDispute() {        initializeDBEnvironment();        List<Map<String, String>> listOfTransactions = null;        String queryToGetTransactions = null;        queryToGetTransactions = "select distinct reference, transaction_oid From transactions\n" +                "where pos_transaction_oid is not null and EFFECTIVE_AT<=sysdate-90\n" +                "and transaction_oid not in (select transaction_oid from disputed_transactions)\n" +                "and transaction_category_cid=4701";        try {            listOfTransactions = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetTransactions, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of transactions for dispute transaction " + listOfTransactions);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfTransactions;    }    public List<Map<String, String>> getValidListOfCustomerAndCardNumbersBasedOnCardPinCtrl(String paramPinType, boolean actionApplicable) {        initializeDBEnvironment();        List<Map<String, String>> listOfCustomerNumbers = null;        String queryToGetListOfCustomers = null;        String queryCard = null;        String queryCommon = "Select distinct mcu.customer_no,mcu.client_mid,mcu.pin_offset as cus_pin,mcu.is_pin_req,mcu.customer_mid,\n" +                "c.card_no,c.pin_offset,c.card_product_oid,c.pin_option_cid,c.card_oid,c.IS_GENERATED_PIN,c.update_count from cards c \n" +                "inner join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                "inner join card_offers co on co.card_offer_oid = cp.card_offer_oid\n" +                "inner join m_customers mcu on mcu.customer_mid = c.customer_mid\n" +                "where c.replace_Card_oid is null and mcu.is_pin_req ='Y'\n" +                "and co.client_mid=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "') and rownum<=100\n";        if (actionApplicable) {            queryCard =                    queryCommon + " and c.card_Status_oid  in (select card_Status_oid from card_status where is_Valid='Y' and is_active='Y')\n" +                            "and c.card_Status_oid  in (select card_Status_oid from card_Status_ols_mapping where is_Status_change='Y')\n ";        } else            queryCard =                    queryCommon + " and c.card_Status_oid  in (select card_Status_oid from card_status where is_Valid='N' and is_active='N')\n" +                            "and c.card_Status_oid  in (select card_Status_oid from card_Status_ols_mapping where is_Status_change='N')\n ";        if (paramPinType.equalsIgnoreCase("resetPin") || paramPinType.equalsIgnoreCase("changePinTypeSysPin")) {            queryToGetListOfCustomers =                    queryCard + "and cp.card_pin_control_cid in (5110,5120,5130) ";        } else if (paramPinType.equalsIgnoreCase("changePin") || paramPinType.equalsIgnoreCase("changePinTypeWishPin")) {            queryToGetListOfCustomers =                    queryCard + "and cp.card_pin_control_cid !=5150 and mcu.pin_offset is not null \n";        } else if (paramPinType.equalsIgnoreCase("reissuePin")) {            queryToGetListOfCustomers =                    queryCard + "and cp.card_pin_control_cid =5150 \n";        } else {            queryToGetListOfCustomers = queryCard;        }        try {            listOfCustomerNumbers = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCustomers, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Customer numbers is " + listOfCustomerNumbers);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfCustomerNumbers;    }    public List<Map<String, String>> getListOfCustomerNumbers() {        initializeDBEnvironment();        List<Map<String, String>> listOfCustomerNumbers = null;        String queryToGetListOfCustomers = null;        queryToGetListOfCustomers = "select distinct mc.customer_no from m_customers mc\n" +                "inner join cards c on c.customer_mid = mc.customer_mid\n" +//                "inner join transactions t on t.customer_mid = mc.customer_mid\n" +                "inner join drivers d on d.customer_mid = mc.customer_mid\n" +                "inner join vehicles v on v.customer_mid = mc.customer_mid\n" +                "inner join customer_cost_centres ccc on ccc.customer_mid = mc.customer_mid\n" +                "where mc.client_mid=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n";        try {            listOfCustomerNumbers = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCustomers, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Customer numbers is " + listOfCustomerNumbers);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfCustomerNumbers;    }    public boolean checkingThePresenceOfCostCentreDetailsInDB(String costCentreCode, String description) {        initializeDBEnvironment();        String quertToGetCostCentreDetails = "", getDetails = "";        boolean presence = false;        quertToGetCostCentreDetails =                "select CUSTOMER_COST_CENTRE_CODE, DESCRIPTION from customer_cost_Centres \n" +                        " where CUSTOMER_COST_CENTRE_CODE = '" + costCentreCode + "'and DESCRIPTION='" + description + "'";        try {            getDetails = DataBaseUtils.getMySQLConnection(quertToGetCostCentreDetails, dbName, dbUserName,                    dbPassword);            System.out.println("getDetails" + getDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (!getDetails.isEmpty()) {            presence = true;        }        System.out.println("presence---->" + presence);        return presence;    }    public List<Map<String, String>> getListOfCardsForCardSearch() {        initializeDBEnvironment();        List<Map<String, String>> cardDetails = null;        String queryToGetListOfCards = null;        queryToGetListOfCards = "select c.card_no,d.DRIVER_NAME, v.LICENSE_PLATE, mc.customer_no, cs.description as STATUS_DESCRIPTION, cso.description, \n" +                "                mcl.client_mid, mcl.Name as country_desc\n" +                //     "                ccc.customer_cost_centre_code \n" +                "                from cards c \n" +                "                inner join drivers d on d.driver_oid = c.driver_oid \n" +                "                inner join vehicles v on  v.vehicle_oid = c.vehicle_oid \n" +                //   "             inner join cost_centres cc on cc.card_oid = c.card_oid \n" +                //  "               inner join customer_cost_centres ccc on ccc.CUSTOMER_COST_CENTRE_OID = cc.CUSTOMER_COST_CENTRE_OID \n" +                "               inner join m_customers mc on mc.CUSTOMER_MID = c.CUSTOMER_MID \n" +                "                 inner join card_status cs on cs.card_status_oid = c.card_status_oid \n" +                "                 inner join card_status_ols cso on cso.card_status_oid = cs.card_status_oid \n" +                "                 inner join m_clients mcl on mcl.client_mid = mc.client_mid \n" +                "                 inner join countries c on c.country_oid = mcl.country_oid";        try {            cardDetails = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCards, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of cards is " + cardDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardDetails;    }    public List<Map<String, String>> getListOfCardControlProfilesFromDB(String customerNo, String cardOfferValue, String cardProduct) {        initializeDBEnvironment();        List<Map<String, String>> listOfProfiles = null;        String queryToGetListOfCardControlProfiles = null;        if (cardProduct == null) {            queryToGetListOfCardControlProfiles = "select ccp.card_control_profile_oid,ccp.DESCRIPTION, ccp.card_offer_oid,co.description as card_offer, ccp.card_product_oid, c.description as profile_category from card_control_profiles ccp\n" +                    "inner join constants c on c.constant_oid = ccp.PROFILE_CATEGORY_CID\n" +                    "inner join card_offers co on co.card_offer_oid = ccp.card_offer_oid\n" +                    "where (ccp.CUSTOMER_MID in (select customer_mid from m_customers where customer_no='" + customerNo + "'and client_mid=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')))\n" +                    "or(ccp.customer_mid is null and ccp.card_program_oid in (select card_program_oid from m_customers where customer_no='" + customerNo + "' and client_mid=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')))\n" +                    "and ccp.CARD_OFFER_OID in (select card_offer_oid from card_offers where description = '" + cardOfferValue + "')";        } else {            queryToGetListOfCardControlProfiles = "select ccp.card_control_profile_oid,ccp.DESCRIPTION, ccp.card_offer_oid,co.description as card_offer, ccp.card_product_oid, \n" +                    "c.description as profile_category from card_control_profiles ccp\n" +                    "inner join constants c on c.constant_oid = ccp.PROFILE_CATEGORY_CID\n" +                    "inner join card_offers co on co.card_offer_oid = ccp.card_offer_oid\n" +                    "where (ccp.customer_mid is null and ccp.card_program_oid in (select card_program_oid from m_customers where customer_no='" + customerNo + "' and client_mid=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "'))) or\n" +                    "(ccp.CUSTOMER_MID=(select customer_mid from m_customers where customer_no='" + customerNo + "' and client_mid=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "'))\n" +                    "and (ccp.card_product_oid in (select card_product_oid from card_products where description='" + cardProduct + "') or ccp.card_product_oid is null))\n" +                    "and ccp.card_offer_oid in (select card_offer_oid from card_offers where description = '" + cardOfferValue + "')";        }        try {            listOfProfiles = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCardControlProfiles, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of card control profiles is " + listOfProfiles);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfProfiles;    }    public Map<String, String> getSpecificCardControlProfileDetails(String customerNo, String cardControlProfileOid) {        initializeDBEnvironment();        Map<String, String> cardControlProfileDetails = null;        String queryToGetCardControlProfileDetails;        queryToGetCardControlProfileDetails = "select ccp.card_control_profile_oid, ccp.card_offer_oid,co.description as card_offer, ccp.description as profile_description, c.description as profile_category \n" +                //        ",pr.description as product_description," +                ",cc.is_odometer_req, cc.is_odometer_validation, ca.description as card_type, cp.description as card_product from card_control_profiles ccp\n" +                "inner join constants c on c.constant_oid = ccp.PROFILE_CATEGORY_CID\n" +                "inner join customer_card_offers co on co.card_offer_oid = ccp.card_offer_oid\n" +                "inner join constants ca on ca.constant_oid = co.CARD_TYPE_CID\n" +                "left join card_products cp on cp.card_product_oid = ccp.card_product_oid\n" +                "inner join card_controls cc on cc.card_control_profile_oid = ccp.card_control_profile_oid\n" +                //      "inner join PRODUCT_RESTRICTIONS pr on pr.PRODUCT_RESTRICTION_OID = cc.PRODUCT_RESTRICTION_OID\n" +                "where ccp.card_control_profile_oid = '" + cardControlProfileOid + "' and co.customer_no = '" + customerNo + "'";        try {            cardControlProfileDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCardControlProfileDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Specific card control profile details from DB is " + cardControlProfileDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return cardControlProfileDetails;    }    public List<Map<String, String>> getListOfCardsWithValidStatusForCSRLogin() {        initializeDBEnvironment();        List<Map<String, String>> listOfCardsForValidStatus = null;        String queryToGetListOfCards = null;        queryToGetListOfCards = "Select distinct mcu.client_mid,mcu.customer_no,mcu.customer_mid,c.card_no,c.card_oid,c.card_product_oid,cp.card_pin_control_cid\n" +                ",cs.description as status_description, cso.DESCRIPTION as ols_status_description from cards c\n" +                "inner join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                "inner join card_offers co on co.card_offer_oid = cp.card_offer_oid\n" +                "inner join m_customers mcu on mcu.customer_mid = c.customer_mid\n" +                "inner join card_status cs on cs.card_Status_oid = c.card_status_oid\n" +                "inner join card_status_ols cso on cso.card_Status_oid = cs.card_status_oid\n" +                "where co.client_mid=(select client_mid from m_clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                "and cp.card_pin_control_cid=5100\n" +                "and c.replace_Card_oid is null and cs.is_Valid='Y' and cs.is_active='Y'\n" +                "and( cs.DESCRIPTION like '%Active')\n";        try {            listOfCardsForValidStatus = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCards, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Customer numbers is " + listOfCardsForValidStatus);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfCardsForValidStatus;    }    public Map<String, String> getListOfCustomerNosHavingCards() {        initializeDBEnvironment();        Map<String, String> customerNosWithCards = null;        String queryToGetListOfCustomerNoWithCards = null;        queryToGetListOfCustomerNoWithCards = "select distinct mc.customer_mid, mc.customer_no, c.card_no, mc.name from m_customers mc\n" +                " inner join cards c on c.customer_mid = mc.customer_mid\n" +                " inner join m_clients mcli on mcli.client_mid = mc.client_mid\n" +                " where mcli.client_mid=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            customerNosWithCards = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetListOfCustomerNoWithCards, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of customer number with cards " + customerNosWithCards);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return customerNosWithCards;    }    public List<Map<String, String>> getListOfVelocityTypes() {        initializeDBEnvironment();        List<Map<String, String>> listOfVelocityTypes = null;        String queryToGetListOfVelocityTypes = null;        queryToGetListOfVelocityTypes = "select description, max_value From velocity_types where client_mid=" +                "(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            listOfVelocityTypes = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfVelocityTypes, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of velocity types is " + listOfVelocityTypes);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfVelocityTypes;    }    public List<Map<String, String>> getCustomerNoForReissueCardsEnabled() {        initializeDBEnvironment();        List<Map<String, String>> listOfCustomerNo = null;        String queryToGetListOfCustomerNo = "select distinct mcust.customer_no from m_customers mcust \n" +                "left join card_reissue_profiles crp on crp.card_program_oid = mcust.card_program_oid\n" +                "left join CARD_REISS_PROF_CONTROLS crpc on crpc.CARD_REISSUE_PROFILE_OID = crp.CARD_REISSUE_PROFILE_OID\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join cards c on c.customer_mid = mcust.customer_mid\n" +                "where mc.client_mid =(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                "and crpc.IS_AUTO_REISSUE = 'Y' \n" +                "and c.expires_on >= sysdate and c.expires_on <= sysdate+crpc.REISSUE_ON_DAYS and c.EXCLUDE_FROM_BULK_REISSUE = 'N'";        try {            listOfCustomerNo = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCustomerNo, dbName, dbUserName,                    dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfCustomerNo;    }    public List<Map<String, String>> getClientCountryCodeHavingCustomers(String countryCode) {        initializeDBEnvironment();        List<Map<String, String>> listOfCustomerNos = null;        String queryToGetListOfCustomerNo = "select mc.client_mid, mc.name, mc.country_oid, mcust.customer_no from m_clients mc\n" +                "inner join countries c on c.country_oid =  mc.country_oid\n" +                "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                "where c.country_code='" + countryCode + "' and mc.name like '%" + countryCode + "%'";        try {            listOfCustomerNos = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCustomerNo, dbName, dbUserName,                    dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfCustomerNos;    }    public Map<String, String> getAccountInformationFieldsFromDb(String cusNo) {        initializeDBEnvironment();        Map<String, String> accountInfo = null;        String cardActionDetailsQuery = "select  mc.email_address,mc.phone_mobile_1,mc.NAME, mc.PHONE_FAX, mc.EMBOSSING_NAME, mc.CONTACT_NAME, d.description, \n" +                "a.address_line,a.suburb,ast.description as status_description, mc.ext_account_ref, \n" +                "mc.authentication_answer,cv1.DESCRIPTION as band, cv2.DESCRIPTION as customer_value2_desc, cv3.DESCRIPTION as customer_value3_desc,  mc.EXTERNAL_CUSTOMER_CODE,\n" +                "mc.EXT_DELIVERY_NAME,mc.ext_delivery_ref, aci.NACE_CODE, aci.INFORMATION_CODE_NUMBER, aci.IS_INTEREST_ON_ARREARS from m_customers mc\n" +                "inner join descriptions d on d.description_oid = mc.CUSTOMER_TYPE_DID\n" +                "inner join addresses a on a.address_oid = mc.street_address_oid\n" +                "inner join accounts az on az.account_no = mc.customer_no\n" +                "inner join account_status ast on ast.ACCOUNT_STATUS_OID = az.ACCOUNT_STATUS_OID\n" +                "left join customer_values cv1 on cv1.CUSTOMER_VALUE_OID = mc.CUSTOMER_VALUE_1_OID\n" +                "left join customer_values cv2 on cv2.CUSTOMER_VALUE_OID = mc.CUSTOMER_VALUE_2_OID\n" +                "left join customer_values cv3 on cv3.CUSTOMER_VALUE_OID = mc.CUSTOMER_VALUE_3_OID\n" +                "left join account_credit_information aci on aci.account_oid = az.account_oid\n" +                "inner join m_clients m on m.client_mid = mc.client_mid\n" +                "where m.client_mid =(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')\n" +                "and mc.customer_no='" + cusNo + "'";        try {            accountInfo = DataBaseUtils.getMySQLConnectionAndEntireRowValue(cardActionDetailsQuery, dbName, dbUserName, dbPassword);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        System.out.println("Account information details : " + accountInfo);        return accountInfo;    }    public List<Map<String, String>> getListOfProductGroups() {        initializeDBEnvironment();        List<Map<String, String>> listOfProductGroups = null;        String queryToGetListOfCustomerProductGroups = null;        queryToGetListOfCustomerProductGroups = "select * from product_groups where PRODUCT_GROUP_TYPE_CID=(select constant_oid from constants where description='Restrictions')";        try {            listOfProductGroups = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfCustomerProductGroups, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of product groups " + listOfProductGroups);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfProductGroups;    }    public boolean checkingThePresenceOfLocationRestrictionDetailsInDB(String locationOid) {        initializeDBEnvironment();        String queryToGetLocationRestrictionDetails = "", locationDetails = "";        boolean presence = true;        queryToGetLocationRestrictionDetails = "select *from m_location_groups where LOCATION_GROUP_MID = '" + locationOid + "'\n" +                "and CLIENT_MID=(select client_mid from m_Clients where NAME = '" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            locationDetails = DataBaseUtils.getMySQLConnection(queryToGetLocationRestrictionDetails, dbName, dbUserName,                    dbPassword);            System.out.println("getDetails is " + locationDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (locationDetails.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public Map<String, String> getCreatedCardControlProfileDetails(String cusNo) {        initializeDBEnvironment();        Map<String, String> createdCardControlProfile = null;        String queryToGetCreatedCardControlProfiles = null;        queryToGetCreatedCardControlProfiles = "select ccp.CARD_CONTROL_PROFILE_OID,ccp.DESCRIPTION,ccp.CUSTOMER_MID,mc.customer_no from card_control_profiles ccp\n" +                "inner join m_customers mc on mc.customer_mid = ccp.customer_mid\n" +                "where mc.customer_no='" + cusNo + "' order by ccp.LAST_UPDATED_AT desc";        try {            createdCardControlProfile = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetCreatedCardControlProfiles, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of card control profile based on customer number " + createdCardControlProfile);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return createdCardControlProfile;    }    public Map<String, String> getFinancialAccountDetails(String cusNo) {        initializeDBEnvironment();        Map<String, String> financialAccountDetails = null;        String queryToGetFinancialAccountDetails = null;        queryToGetFinancialAccountDetails = "select ast.description as status,ass.description as substatus,a.OPENED_ON,\n" +                "a.CLOSED_ON,a.REINSTATED_ON,a.LAST_BILLED_ON, aci.note from accounts a\n" +                "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                "left join account_sub_status ass on ass.account_sub_status_oid = a.account_sub_status_oid\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join account_credit_information aci on aci.account_oid = a.account_oid\n" +                "where a.account_no = '" + cusNo + "' and mcust.client_mid = 101";        try {            financialAccountDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetFinancialAccountDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Get the financial account details based on customer number " + financialAccountDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return financialAccountDetails;    }    public Map<String, String> getFinancialCreditAlertDetails(String cusNo) {        initializeDBEnvironment();        Map<String, String> financialAccountDetails = null;        String queryToGetFinancialAccountDetails = null;        queryToGetFinancialAccountDetails = "select ap.credit_limit as OriginalCreditLimit,a.credit_limit as CurrentCreditLimit,\n" +                "cp.description as creditPlan,a.cust_service_expires_on as expiresOn, a.temp_credit_amount as creditExtension,\n" +                "a.TEMP_CREDIT_EXPIRES_ON as extensionExpiresOn,a.PERCENT_TRANS_ALLOW_OVER_LIMIT as percentageoverAllowed,\n" +                "cer.description as extentionReasons,a.credit_limit as calculated_limit,a.IS_OVER_CREDIT_LIMIT,cp.LIMIT_THRESHOLD_PERCENTAGE as creditLimitThresholdperc\n" +                ",a.ALERT_THRESHOLD_PERCENTAGE as alertThresholdPerc,t.description as creditLimitResponsible,aci.REQU_CREDIT_LIMIT_EXPIRES_AT as creditExpirationDate,aci.CREDIT_INFORMATION_NO as cerfoNumber,aci.REQUESTED_CREDIT_LIMIT as requestedCreditLimitMEX,\n" +                "aci.REQU_CREDIT_LIMIT_EXPIRES_AT as requestedCreditLimitExpiryDate,mcust.DEBTOR_NUMBER as debtorNumber from applications ap\n" +                "left join m_customers mcust on mcust.application_oid = ap.application_oid\n" +                "left join accounts a on a.account_no = mcust.customer_no\n" +                "left join credit_extension_reasons cer on cer.description_oid = a.TEMP_CREDIT_REASON_DID\n" +                "left join credit_plans cp on cp.credit_plan_oid = ap.credit_plan_oid\n" +                "left join account_credit_information aci on aci.account_oid = a.account_oid\n" +                "left join territories t on t.territory_oid = mcust.ADMIN_TERRITORY_OID\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + cusNo + "'";        try {            financialAccountDetails = DataBaseUtils.getMySQLConnectionAndEntireRowValue(queryToGetFinancialAccountDetails, dbName, dbUserName,                    dbPassword);            System.out.println("Get the financial account details based on customer number " + financialAccountDetails);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return financialAccountDetails;    }    public boolean checkingThePresenceofGroupPinNamefromDB(String pinName, String customerNumber) {        initializeDBEnvironment();        String groupPinName = "";        boolean presence = true;        String queryToGroupPinName = " Select cpg.name from customer_pin_groups cpg \n" +                "      inner join  M_CUSTOMERS mc on cpg.CUSTOMER_MID = mc.CUSTOMER_MID\n" +                "      where  mc.customer_no = '" + customerNumber + "' and cpg.name = '" + pinName + "'";        try {            groupPinName = DataBaseUtils.getMySQLConnection(queryToGroupPinName, dbName, dbUserName,                    dbPassword);            System.out.println("costCentreCode" + groupPinName);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (groupPinName.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public String getGroupPinNamefromDB(String customerNumber) {        initializeDBEnvironment();        String groupPinName = "";        boolean presence = true;        String queryToGroupPinName = " Select cpg.name from customer_pin_groups cpg \n" +                "      inner join  M_CUSTOMERS mc on cpg.CUSTOMER_MID = mc.CUSTOMER_MID\n" +                "      where  mc.customer_no = '" + customerNumber + "'";        try {            groupPinName = DataBaseUtils.getMySQLConnection(queryToGroupPinName, dbName, dbUserName,                    dbPassword);            System.out.println("groupPinName" + groupPinName);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return groupPinName;    }    public List<Map<String, String>> getReportType() {        initializeDBEnvironment();        List<Map<String, String>> listOfReportTypes = null;        String queryToGetListOfReportTypes = null;        queryToGetListOfReportTypes = "select DESCRIPTION from report_types\n" +                "        where MEMBER_TYPE_CID ='103' and CLIENT_MID in (select CLIENT_MID from M_CLIENTS where SHORT_NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            listOfReportTypes = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfReportTypes, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of report types " + listOfReportTypes);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfReportTypes;    }    public boolean checkingThePresenceofReportTypeNamefromDB(String reportName, String customerNumber) {        initializeDBEnvironment();        String reportTypeName = "";        boolean presence = true;        String queryToReportName = " select DESCRIPTION from report_assignments ra\n" +                "      inner join M_CUSTOMERS mc on mc.CUSTOMER_MID = ra.MEMBER_OID\n" +                "      where  mc.customer_no = '" + customerNumber + "' and DESCRIPTION = '" + reportName + "'";        try {            reportTypeName = DataBaseUtils.getMySQLConnection(queryToReportName, dbName, dbUserName,                    dbPassword);            System.out.println("reportTypeName" + reportTypeName);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (reportTypeName.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public List getDeliverytTypeandContactHierarcy(String reportAssignmentOid) {        initializeDBEnvironment();        List<Map<String, String>> listofUpdatedvalues = null;        String queryToGetListOfupdatedValues = null;        queryToGetListOfupdatedValues = "Select c.DESCRIPTION from constants c\n" +                "left join report_assignments ra on  c.CONSTANT_OID = ra.DELIVERY_TYPE_CID or c.CONSTANT_OID = ra.CONTACT_HIERARCHY_CID\n" +                "where ra.REPORT_ASSIGNMENT_OID = '" + reportAssignmentOid + "' ";        try {            listofUpdatedvalues = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfupdatedValues, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of updated values " + listofUpdatedvalues);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listofUpdatedvalues;    }    public List<Map<String, String>> getListOfSubscribedCustomerNumbers() {        initializeDBEnvironment();        List<Map<String, String>> listOfSubscribedCustomerNumbers = null;        String queryToGetListOfSubscribedCustomers = null;        queryToGetListOfSubscribedCustomers = "select mc.customer_no from m_customers mc\n" +                "inner join accounts ac on mc.customer_mid = ac.customer_mid where ac.account_oid in (\n" +                "select account_oid from SUBSCRIPTIONS)";        try {            listOfSubscribedCustomerNumbers = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfSubscribedCustomers, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Subscribed Customer numbers is " + listOfSubscribedCustomerNumbers);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfSubscribedCustomerNumbers;    }    public List<Map<String, String>> getListOfSubscriptionOid(String customerNumber) {        initializeDBEnvironment();        List<Map<String, String>> listOfSubscriptionOids = null;        String queryToGetListOfSubscriptionOids = null;        queryToGetListOfSubscriptionOids = "select su.SUBSCRIPTION_OID from subscriptions su\n" +                "inner join accounts ac on su.account_oid = ac.account_oid \n" +                "inner join m_customers mc on ac.customer_mid = mc.customer_mid where mc.customer_no = " + customerNumber + " And su.card_oid is null";        try {            listOfSubscriptionOids = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfSubscriptionOids, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Subscribed Customer numbers is " + listOfSubscriptionOids);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfSubscriptionOids;    }    public List<Map<String, String>> getSubscriptionOffers() {        initializeDBEnvironment();        List<Map<String, String>> listOfSubscriptionOffers = null;        String queryToGetListOfSubscriptionOffers = null;        queryToGetListOfSubscriptionOffers = "select DESCRIPTION from subscription_offers\n" +                "        where CLIENT_MID in (select CLIENT_MID from M_CLIENTS where NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            listOfSubscriptionOffers = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfSubscriptionOffers, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of subscription offers " + listOfSubscriptionOffers);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfSubscriptionOffers;    }    public List<Map<String, String>> getListOfProducts() {        initializeDBEnvironment();        List<Map<String, String>> listOfProducts = null;        String queryToGetListOfProducts = null;        queryToGetListOfProducts = "select DESCRIPTION from products";        try {            listOfProducts = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfProducts, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Products " + listOfProducts);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfProducts;    }    public boolean checkingThePresenceOfSubscriptionupdatedValueDB(String DBeffectiveDate, String DBexpiryDate, String subscriptionNumber, String subscriptionoid) {        initializeDBEnvironment();        String updatedSubscriotion = "";        boolean presence = true;        String queryToGetUpatedSubscription = "select * from subscriptions where EFFECTIVE_ON like '%" + DBeffectiveDate + "%' and EXPIRES_ON like '%" + DBexpiryDate + "%' and TOLL_ACCOUNT =" + subscriptionNumber + " and SUBSCRIPTION_OID =" + subscriptionoid + "\n";        try {            updatedSubscriotion = DataBaseUtils.getMySQLConnection(queryToGetUpatedSubscription, dbName, dbUserName,                    dbPassword);            System.out.println("Subcriptions" + updatedSubscriotion);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (updatedSubscriotion.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }    public List<Map<String, String>> getListOfOutlets() {        initializeDBEnvironment();        List<Map<String, String>> listOfOutlets = null;        String queryToGetListOfOutlets = null;        queryToGetListOfOutlets = "select ga.DESCRIPTION from geographic_areas ga \n" +                "LEFT JOIN GEOGRAPHIC_AREA_TYPES gat on ga.GEOGRAPHIC_AREA_TYPE_OID = gat.GEOGRAPHIC_AREA_TYPE_OID\n" +                "where gat.GEOGRAPHIC_AREA_NO = 2 and gat.client_mid in (select CLIENT_MID from M_CLIENTS where NAME= '" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            listOfOutlets = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfOutlets, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Outlets " + listOfOutlets);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfOutlets;    }    public List<Map<String, String>> getListOfNetworks() {        initializeDBEnvironment();        List<Map<String, String>> listOfNetworks = null;        String queryToGetListOfNetworks = null;//        queryToGetListOfNetworks = "select ga.DESCRIPTION from geographic_areas ga \n" +//                "LEFT JOIN GEOGRAPHIC_AREA_TYPES gat on ga.GEOGRAPHIC_AREA_TYPE_OID = gat.GEOGRAPHIC_AREA_TYPE_OID\n" +//                "where gat.GEOGRAPHIC_AREA_NO = 5 and gat.client_mid in (select CLIENT_MID from M_CLIENTS where NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        queryToGetListOfNetworks = " select DESCRIPTION from MERCH_AGRMNT_VALUES where MERCH_AGRMNT_VALUE_TYPE_OID = 253";        try {            listOfNetworks = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfNetworks, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Outlets " + listOfNetworks);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfNetworks;    }    public List<Map<String, String>> getListOfMerchants() {        initializeDBEnvironment();        List<Map<String, String>> listOfMerchants = null;        String queryToGetListOfMerchants = null;        queryToGetListOfMerchants = "select mav.DESCRIPTION from MERCH_AGRMNT_VALUES mav \n" +                "LEFT JOIN MERCH_AGRMNT_VALUE_TYPES mavt on  mav.MERCH_AGRMNT_VALUE_TYPE_OID = mavt.MERCH_AGRMNT_VALUE_TYPE_OID\n" +                "where mavt.MERCH_AGRMNT_VALUE_NO = 1 and mavt.client_mid in (select CLIENT_MID from M_CLIENTS where NAME='" + PropUtils.getPropValue(inputProp, clientCountry) + "')";        try {            listOfMerchants = DataBaseUtils.getMySQLConnectionAndAllRowsInList(queryToGetListOfMerchants, dbName, dbUserName,                    dbPassword);            System.out.println("Get the list of Outlets " + listOfMerchants);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return listOfMerchants;    }    public boolean checkingThePresenceofPricingRuleNamefromDB(String description) {        initializeDBEnvironment();        String pricingRuleName = "";        boolean presence = true;        String queryToPricingRuleName = " select * from BASE_PRICE_MATRIX where DESCRIPTION = '" + description + "'";        try {            pricingRuleName = DataBaseUtils.getMySQLConnection(queryToPricingRuleName, dbName, dbUserName,                    dbPassword);            System.out.println("pricingRuleName" + pricingRuleName);        } catch (ClassNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (SQLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (pricingRuleName.isEmpty()) {            presence = false;        }        System.out.println("presence---->" + presence);        return presence;    }}