package utilities.ui;import io.cucumber.java.Scenario;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import pages.CommonPage;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import java.io.*;import java.util.*;public class ExcelUtils {    private WebDriver driver;    private CommonPage commonPage;    private CommonDBUtils commonDBUtils;    private BaseUtils baseUtils;    public ExcelUtils(WebDriver driver) {        this.driver = driver;        commonPage = new CommonPage(driver);        commonDBUtils = new CommonDBUtils();        baseUtils = new BaseUtils();    }    public void convertCsvToXlsx(Scenario logger, String filePathOfCsvFile, String filePathToStoreXlsxFile, int countOfRecordsFromDb) {        try {//            createABlankWorkBook(filePathToStoreXlsxFile);            if (filePathOfCsvFile.contains(".csv")) {                XSSFWorkbook workBook = new XSSFWorkbook();                XSSFSheet sheet = workBook.createSheet("sheet1");                String currentLine = null;                int RowNum = 0;                BufferedReader br = new BufferedReader(new FileReader(filePathOfCsvFile));                LineNumberReader lnr = new LineNumberReader(new FileReader(filePathOfCsvFile));                String input;                int currentRows = 0;                while ((input = br.readLine()) != null) {                    currentRows++;                }//            int rowsShouldNotCopyToExcelSheet = currentRows - (countOfRecordsFromDb + 1);                while ((currentLine = lnr.readLine()) != null) {//                if (lnr.getLineNumber() > rowsShouldNotCopyToExcelSheet) {//                currentLine.replaceAll("\",\"", ":");                    String str[] = currentLine.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)");                    RowNum++;                    XSSFRow currentRow = sheet.createRow(RowNum);                    for (int i = 0; i < str.length; i++) {                        currentRow.createCell(i).setCellValue(str[i].replaceAll("^\"|\"$", ""));                    }//                }                }                FileOutputStream fileOutputStream = new FileOutputStream(filePathToStoreXlsxFile);                workBook.write(fileOutputStream);                fileOutputStream.close();                System.out.println("Done");            } else {                copyFileFromOneLocationToAnother(new File(filePathOfCsvFile), new File(filePathToStoreXlsxFile));            }        } catch (Exception ex) {            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, ex);            System.out.println(ex.getMessage() + "Exception in try");        }    }    /*    Method to copy file from one location to another     */    private static void copyFileFromOneLocationToAnother(File src, File dest) throws IOException {        InputStream is = null;        OutputStream os = null;        try {            is = new FileInputStream(src);            os = new FileOutputStream(dest);//             buffer size 1K            byte[] buf = new byte[1024];            int bytesRead;            while ((bytesRead = is.read(buf)) > 0) {                os.write(buf, 0, bytesRead);            }        } finally {            is.close();            os.close();        }    }    /*   Method to create a blank work book    */    public void createABlankWorkBook(String fileName) throws IOException {        //Create Blank workbook        XSSFWorkbook workbook = new XSSFWorkbook();        workbook.createSheet("FirstSheet");//        File file = new File(path);        //Create file system using specific name        OutputStream out = new FileOutputStream(                new File(fileName));        //write operation workbook using file out object        workbook.write(out);        out.close();        workbook.close();        System.out.println(fileName + " written successfully");    }    public void readDataFromExcelSheetAndCompareWithDb(Scenario logger, String fileName, List<Map<String, String>> dbData, String primaryKeyOfModule, String moduleName) {        List<String> columnHeaders = null;        List<Map<String, String>> contactQueryResults = null;        File file = new File(fileName);        try {            FileInputStream inputStream = new FileInputStream(file);            Workbook workbook = null;            String fileExtensionName = fileName.substring(fileName.indexOf("."));            if (fileExtensionName.equals(".xlsx")) {                workbook = new XSSFWorkbook(inputStream);            } else if (fileExtensionName.equals(".xls")) {                workbook = new HSSFWorkbook(inputStream);            }            Sheet sheet = workbook.getSheetAt(0);            sheet = removeEmptyRows(sheet);            columnHeaders = getColumnHeader(moduleName);            int rowCount = sheet.getLastRowNum() - sheet.getFirstRowNum();            Boolean isRowMatchedWithDatabase = false;            int countOfUnMatchedRowsWithDatabase = 0;            String expCardCostCentre = "";            String expCardVehicleDescription = "";            String expCardLicensePlate = "";            for (int i = 0; i <= sheet.getLastRowNum()-1; i++) {                Row row = sheet.getRow(i);                String expPrimaryKeyValue = "";                if (i == dbData.size()) {                    break;                }                for (int j = 0; j < row.getLastCellNum(); j++) {                    expPrimaryKeyValue = commonPage.getSpecificValueFromMapObject(dbData.get(row.getRowNum()), primaryKeyOfModule.toUpperCase().replaceAll("\\s", ""));                    //                    if (columnHeaders.get(String.valueOf(row.getCell(j).getColumnIndex())).equalsIgnoreCase(primaryKeyOfModule)) {                    if (columnHeaders.get(j).equalsIgnoreCase(primaryKeyOfModule)) {                        String actPrimaryKeyValue = "";                        if (moduleName.equalsIgnoreCase("Users") || (moduleName.equalsIgnoreCase("CostCentres")) || (moduleName.equalsIgnoreCase("Contacts")) || moduleName.equalsIgnoreCase("OMVTransactions") ||moduleName.equalsIgnoreCase("OMVAuthorisations")) {                            actPrimaryKeyValue = row.getCell(j).getStringCellValue();                        }                        if (moduleName.equalsIgnoreCase("Drivers") || moduleName.equalsIgnoreCase("Vehicles")) {                            if (!row.getCell(j).getStringCellValue().equalsIgnoreCase("")) {                                actPrimaryKeyValue = row.getCell(j).getStringCellValue().substring(4);                            }                        }                        if (moduleName.equalsIgnoreCase("Cards")) {                            actPrimaryKeyValue = row.getCell(j).getStringCellValue();                        }                        if (actPrimaryKeyValue.equals(expPrimaryKeyValue)) {                            isRowMatchedWithDatabase = true;                            break;                        } else {                            isRowMatchedWithDatabase = false;                            countOfUnMatchedRowsWithDatabase++;                            break;                        }                    }                }                if (isRowMatchedWithDatabase) {                    logger.log("Row : " + i + " validation is shown below");                    logger.log("---------------------------------------------");                    for (int j = 0; j < row.getLastCellNum(); j++) {                        System.out.println(columnHeaders.get(j));                        String expectedDbValue = "";                        expectedDbValue = commonPage.getSpecificValueFromMapObject(dbData.get(row.getRowNum()-1), columnHeaders.get(j).replaceAll("\\s", ""));                        String actualValue = row.getCell(j).getStringCellValue();                        if (((moduleName.equalsIgnoreCase("Drivers") || moduleName.equalsIgnoreCase("Vehicles")) && columnHeaders.get(j).equalsIgnoreCase(primaryKeyOfModule))) {                            actualValue = row.getCell(j).getStringCellValue().substring(4);                        }                        if (moduleName.equalsIgnoreCase("Cards") && columnHeaders.get(j).equalsIgnoreCase(primaryKeyOfModule)) {                            actualValue = row.getCell(j).getStringCellValue();                            expCardCostCentre = getCostCentreBasedOnCardNumber(actualValue);                            expCardVehicleDescription = commonPage.getSpecificValueFromMapObject(getVehicleDescriptionAndLicenseBasedOnCardNumber(actualValue), "DESCRIPTION");                            expCardLicensePlate = commonPage.getSpecificValueFromMapObject(getVehicleDescriptionAndLicenseBasedOnCardNumber(actualValue), "LICENSE_PLATE");                        }                        if (moduleName.equalsIgnoreCase("Cards") && columnHeaders.get(j).equalsIgnoreCase("Costcentre")) {                            expectedDbValue = expCardCostCentre;                        }                        if (moduleName.equalsIgnoreCase("Cards") && columnHeaders.get(j).equalsIgnoreCase("Vehicledescription")) {                            expectedDbValue = expCardVehicleDescription;                        }                        if (moduleName.equalsIgnoreCase("Cards") && columnHeaders.get(j).equalsIgnoreCase("Licenseplate")) {                            expectedDbValue = expCardLicensePlate;                        }                        if (moduleName.equalsIgnoreCase("Cards") && (columnHeaders.get(j).equalsIgnoreCase("Expirydate") || (columnHeaders.get(j).equalsIgnoreCase("EMBOSSINGLINE1")))) {                            expectedDbValue = actualValue;                        }                        if (moduleName.equalsIgnoreCase("Contacts") && (columnHeaders.get(j).equalsIgnoreCase("ContactLevel"))) {                            String contactLevel = commonPage.getSpecificValueFromMapObject(dbData.get(j), "CONTACTLEVEL");                            if (contactLevel.equalsIgnoreCase("N")) {                                expectedDbValue = "";                            } else {                                expectedDbValue = "Primary";                            }                        }if(moduleName.equalsIgnoreCase("OMVTransactions") && (columnHeaders.get(j).equalsIgnoreCase("Transactiontime") || (columnHeaders.get(j).equalsIgnoreCase("Postedtime")||columnHeaders.get(j).equalsIgnoreCase("Otherquantity")||columnHeaders.get(j).equalsIgnoreCase("Otherunitprice")||columnHeaders.get(j).equalsIgnoreCase("Othertransactionvalue")||columnHeaders.get(j).equalsIgnoreCase("ChequeNo"))||columnHeaders.get(j).equalsIgnoreCase("RemittanceID")||columnHeaders.get(j).equalsIgnoreCase("Transactioncategory")||columnHeaders.get(j).equalsIgnoreCase("FUELTRANSACTIONVALUE")||columnHeaders.get(j).equalsIgnoreCase("Otherquantity"))){                            expectedDbValue = actualValue;                        }                        if (moduleName.equalsIgnoreCase("OMVAuthorisations") && (columnHeaders.get(j).equalsIgnoreCase("TRANSACTIONTIME") || columnHeaders.get(j).equalsIgnoreCase("STATUS")||columnHeaders.get(j).equalsIgnoreCase("Validationerror")||columnHeaders.get(j).equalsIgnoreCase("Customercurrencycode"))) {                            expectedDbValue = actualValue;                        }                        if (moduleName.equalsIgnoreCase("Contacts") && ((j > 13) || (actualValue.equalsIgnoreCase("Primary")))) {                            expectedDbValue = actualValue;                        }                        if (actualValue.trim().equals(expectedDbValue.trim())) {                            logger.log("Expected is :" + expectedDbValue + " , Actual is :" + actualValue);                        } else {                            logger.log("row is: " + i + " cell is : " + j);                            logger.log("Expected value is :" + expectedDbValue);                            logger.log("Actual value is :" + actualValue);                            logger.log("Expected and actual are not equal");                        }                    }                    logger.log("Expected and actual are equal");                    logger.log("-----------------------------------------");                }            }            logger.log("Not matched rows with the database count : " + countOfUnMatchedRowsWithDatabase);        } catch (Exception e) {            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }    }    /*    Method to validate excel data     */    public List<String> getColumnHeader(String moduleName) {        List<String> columnHeaders = null;        if (moduleName.equalsIgnoreCase("Cards")) {            columnHeaders = Arrays.asList("ACCOUNTNUMBER", "ACCOUNTNAME", "CARDNUMBER", "CARDSTATUS", "CARDOFFER", "CARDPRODUCT", "CARDTYPE", "EXPIRYDATE", "EMBOSSINGLINE1", "COSTCENTRE", "VEHICLEDESCRIPTION", "LICENSEPLATE");        }        if (moduleName.equalsIgnoreCase("Contacts")) {            columnHeaders = Arrays.asList("ACCOUNTNUMBER", "ACCOUNTNAME", "NAME", "EMAILADDRESS", "CONTACTTYPE", "CONTACTLEVEL", "MOBILEPHONE", "OTHERPHONE", "FAX", "JOBTITLE", "CONTACTSTREETADDRESS", "CITYORTOWN", "STATEORPROVINCE", "POSTALCODE", "POSTALSTREETADDRESS", "CITYORTOWN", "STATEORPROVINCE", "POSTALCODE");        }        if (moduleName.equalsIgnoreCase("Users")) {            columnHeaders = Arrays.asList("ACCOUNTNUMBER", "ACCOUNTNAME", "FULLNAME", "EMAILADDRESS", "USERNAME", "ROLE", "STATUS", "MOBILEPHONE", "OTHERPHONE");        }        if (moduleName.equalsIgnoreCase("CostCentres")) {            columnHeaders = Arrays.asList("ACCOUNTNUMBER", "ACCOUNTNAME", "COSTCENTRE", "NAME", "DESCRIPTION");        }        if (moduleName.equalsIgnoreCase("Drivers")) {            columnHeaders = Arrays.asList("ACCOUNTNUMBER", "ACCOUNTNAME", "CARDNUMBER", "DRIVERID", "DRIVERNAME", "SHORTNAME", "STATUS");        }        if (moduleName.equalsIgnoreCase("Vehicles")) {            columnHeaders = Arrays.asList("ACCOUNTNUMBER", "ACCOUNTNAME", "CARDNUMBER", "VEHICLEDESCRIPTION", "LICENSEPLATE", "VEHICLEID", "STATUS");        }        if (moduleName.equalsIgnoreCase("accountSelection")) {            columnHeaders = Arrays.asList("CLIENT", "ACCOUNTNAME", "ACCOUNTNUMBER", "COUNTRY", "STATUS");        }        if (moduleName.equalsIgnoreCase("OMVTransactions")) {            columnHeaders = Arrays.asList("ACCOUNTNO", "ACCOUNTNAME", "CARDNUMBER", "PRODUCT", "REFERENCE", "AUTHORISATIONNUMBER", "Transactiontime","Postedtime","STATUS", "TRANSACTIONCATEGORY", "TRANSCTIONTYPE", "LOCATIONID", "LOCATIONNAME", "LOCATIONADDRESS", "LOCATIONCITY", "LOCATIONPOSTALZIPCODE", "LOCATIONSTATE", "LOCATIONCOUNTRY", "SECONDCARDNUMBER", "ODOMETER", "CAPTURETYPE", "VEHICLEID", "VEHICLEDESCRIPTION", "COSTCENTRE", "TERMINALID", "DRIVERID", "DRIVERNAME", "FLEETID", "FUELQUANTITY", "FUELUNITPRICE", "FUELTRANSACTIONVALUE","Otherquantity","Otherunitprice","Othertransactionvalue", "TOTALTRANSACTIONAMOUNT", "CUSTOMERCURRENCYCODE", "TOTALREBATES", "TOTALTAXES", "TOTALFEES", "INVOICENUMBER", "ADJUSTMENTTYPE", "APPROVEDBY","ChequeNo","RemittanceID");        }        if(moduleName.equalsIgnoreCase("OMVAuthorisations")){            columnHeaders = Arrays.asList("ACCOUNTNO","ACCOUNTNAME","CARDNUMBER","PRODUCT","TRACENUMBER","AUTHORISATIONNUMBER","TRANSACTIONTIME","STATUS","RESPONSECODE","ValidationError","LOCATIONID","LOCATIONNAME","LOCATIONADDRESS","LOCATIONCITY","LOCATIONPOSTALZIPCODE","LOCATIONSTATE","LOCATIONCOUNTRY","SECONDCARDNUMBER","ODOMETER","VEHICLEID","VEHICLEDESCRIPTION","COSTCENTRE","TERMINALID","DRIVERID","DRIVERNAME","FUELQUANTITY","FUELUNITPRICE","FUELTRANSACTIONVALUE","OTHERQUANTITY","OTHERUNITPRICE","OTHERTRANSACTIONVALUE","TOTALVALUE","CustomerCURRENCYCODE");        }        return columnHeaders;    }    /*        Method to delete a file from directory         */    public void deleteAFileFromDirectory(Scenario logger, String filePath) {        File f1 = new File(filePath);        try {            f1.delete();            logger.log("File " + f1.getName() + " is deleted.");        } catch (Exception e) {            logger.log("file is not deleted");        }    }    /*    Method to get cost centre value based on card number     */    public String getCostCentreBasedOnCardNumber(String cardNo) {        String query = "select description from customer_cost_centres ccc \n" +                "inner join cost_centres cc on cc.CUSTOMER_COST_CENTRE_OID = ccc.CUSTOMER_COST_CENTRE_OID\n" +                "inner join cards c on c.card_oid = cc.card_oid\n" +                "where card_no like '%" + cardNo + "%'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        if (queryResults.get("DESCRIPTION") == null) {            cardNo = "";        } else {            cardNo = queryResults.get("DESCRIPTION");        }        return cardNo;    }    /*    Method to get vehicle description and license based on card number     */    public Map<String, String> getVehicleDescriptionAndLicenseBasedOnCardNumber(String cardNo) {        String query = "select v.description, v.license_plate from vehicles v\n" +                "inner join cards c on c.vehicle_oid = v.vehicle_oid\n" +                "where card_no like '%" + cardNo + "%'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        return queryResults;    }    /*    Method to delete empty rows in starting of the excel sheet     */    private Sheet removeEmptyRows(Sheet sheet) {        Boolean isRowEmpty = Boolean.FALSE;        for (int i = 0; i <= sheet.getLastRowNum(); i++) {            if (sheet.getRow(i) == null) {                isRowEmpty = true;                sheet.shiftRows(i + 1, sheet.getLastRowNum() + 1, -1);                i--;                continue;            }            for (int j = 0; j < sheet.getRow(i).getLastCellNum(); j++) {                if (sheet.getRow(i).getCell(j) == null ||                        sheet.getRow(i).getCell(j).toString().trim().equals("")) {                    isRowEmpty = true;                } else {                    isRowEmpty = false;                    break;                }            }            if (isRowEmpty == true) {                sheet.shiftRows(i + 1, sheet.getLastRowNum() + 1, -1);                i--;            }        }        return sheet;    }    /*    Method to translate words from one language to another language     */    public void translateAllWords(Scenario logger, int fromColNo, int toColNo) {        BasePage basePage = new BasePage(driver);        CommonPage commonPage = new CommonPage(driver);        String fileName = "WordsToTranlsate.xlsx";        File file = new File(fileName);        try {            FileInputStream inputStream = new FileInputStream(file);            Workbook workbook = null;            String fileExtensionName = fileName.substring(fileName.indexOf("."));            if (fileExtensionName.equals(".xlsx")) {                workbook = new XSSFWorkbook(inputStream);            } else if (fileExtensionName.equals(".xls")) {                workbook = new HSSFWorkbook(inputStream);            }            Sheet sheet = workbook.getSheetAt(0);//            removeEmptyRows(sheet);            int rowCount = sheet.getLastRowNum() - sheet.getFirstRowNum();            String fromValue = "";            String toValue = "";            Row row = null;            Cell cell = null;            for (int i = 0; i <= rowCount; i++) {                row = sheet.getRow(i);                fromValue = row.getCell(fromColNo).getStringCellValue();                basePage.userTypeIntoTextField(logger, By.cssSelector("textarea[placeholder='Enter text']"), fromValue);                commonPage.sleepForFewSeconds(1);                toValue = basePage.userGetTextFromWebElement(logger, By.cssSelector("pre[id='tw-target-text']>span"));                cell = row.createCell(toColNo);                cell.setCellValue(toValue);            }            try (FileOutputStream outputStream = new FileOutputStream("./TranslatedWords.xlsx")) {                workbook.write(outputStream);            }        } catch (Exception e) {            e.printStackTrace();        }    }    /*    Method to read excel sheet to get corresponding cell values based on another cell value     */    public Map<String, String> getCellValueBasedOnAnotherCellValue(String excelSheetName, int fieldNameCellNo,                                                                   int fieldValueCellNo, ArrayList<String> fieldNames) {        File file = new File(excelSheetName);        Map<String, String> fieldValueAndDataTypes = new HashMap<String, String>();        try {            FileInputStream inputStream = new FileInputStream(file);            Workbook workbook = null;            String fileExtensionName = excelSheetName.substring(excelSheetName.indexOf("."));            if (fileExtensionName.equals(".xlsx")) {                workbook = new XSSFWorkbook(inputStream);            } else if (fileExtensionName.equals(".xls")) {                workbook = new HSSFWorkbook(inputStream);            }            Sheet sheet = workbook.getSheet("Label");            int rowCount = sheet.getLastRowNum() - sheet.getFirstRowNum();            String fieldName = "";            Row row = null;            int count = 0;            outerloop:            for (int i = 1; i <= rowCount - 1; i++) {                row = sheet.getRow(i);                fieldName = row.getCell(fieldNameCellNo).getStringCellValue();                if (count == fieldNames.size()) {                    break outerloop;                }                for (int j = 0; j < fieldNames.size(); j++) {                    if (fieldNames.get(j).equals(fieldName)) {                        fieldValueAndDataTypes.put(row.getCell(fieldValueCellNo).getStringCellValue(), row.getCell(fieldValueCellNo + 1).getStringCellValue());                        count = count + 1;                        break;                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return fieldValueAndDataTypes;    }}