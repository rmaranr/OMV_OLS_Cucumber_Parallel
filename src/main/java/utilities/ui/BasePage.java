package utilities.ui;import com.paulhammant.ngwebdriver.NgWebDriver;import io.cucumber.java.Scenario;import org.junit.Assert;import org.openqa.selenium.*;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.chrome.ChromeOptions;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import utilities.api.CommonDBUtils;import java.io.File;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.NoSuchElementException;import java.util.*;import java.util.concurrent.TimeUnit;public class BasePage {    public WebDriver driver;    private String driverPath;    public String fileSeperator = System.getProperty("file.separator");    public String reportPath = System.getProperty("user.dir") + fileSeperator + "Reports";    private CommonDBUtils commonUtils;    public BasePage(WebDriver driver) {        this.driver = driver;        commonUtils = new CommonDBUtils();    }    public String getFileName(String path) {        File folder = new File(path);        File[] listOfFiles = folder.listFiles();        String name = "";        for (File file : listOfFiles) {            if (file.isFile()) {                name = file.getName();                System.out.println(file.getName());            }        }        return name;    }    public WebDriver getDriver() {        return driver;    }    public void closeBrowser() {//        driver.close();        driver.quit();    }    // This function is to click on given web element.    public void userClick(Scenario logger, By locator, int... timeInSeconds) {        int givenWaitTime = 30;        try {            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementClickable(logger, locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                webelement.click();                //                logger.log("Clicked on the given web element: "" + locator+"'");            } else {                logger.log("Given web element: '" + locator + "' is not clickable");                Assert.fail(                        "Given web elemnt: '" + locator + "' is not clickable ");            }        } catch (NoSuchElementException e) {            logger.log("Given web element: '" + locator + "' was not found in DOM"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator + "' was not found in DOM - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: '" + locator + "' was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator + "' was not found on the web page");        }    }    //This function is to click on given web element using javaScript executor    public void userClickJSExecutor(Scenario logger, By locator, int... timeInSeconds) {        int givenWaitTime = 30;        try {            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementClickable(logger, locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                JavascriptExecutor js = (JavascriptExecutor) driver;                js.executeScript("arguments[0].click();", webelement);                //                logger.log("Clicked on the given web element: " + locator);            }        } catch (NoSuchElementException e) {            logger.log("Given web element: '" + locator + "' was not found in DOM"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator + "' was not found in DOM - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: '" + locator + "' was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator + "' was not found on the web page");        }    }    public void mouseHoverAndclick(Scenario logger, By locator1, By locator2, int... timeInSeconds) {        int givenWaitTime = 30;        try {            Actions actions = new Actions(driver);            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementClickable(logger, locator1, givenWaitTime)) {                WebElement element1 = driver.findElement(locator1);                actions.moveToElement(element1).click().perform();                try {                    if (whetherElementClickable(logger, locator2, givenWaitTime)) {                        WebElement element2 = driver.findElement(locator2);                        actions.moveToElement(element2).click().perform();                        //                        logger.log("Clicked on the given web element: '" + locator2+"'");                    }                } catch (NoSuchElementException e) {                    logger.log("Given web element: '" + locator2 + "' was not found in DOM"                            + " - NoSuchElementException");                    //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);                    Assert.fail("Given web element: '" + locator2 + "' was not found in DOM - NoSuchElementException");                }                //                logger.log("Clicked on the given web element: '" + locator1+"'");            } else {                logger.log("Given web element: '" + locator1 + "' is not clickable");                Assert.fail(                        "Given web elemnt: '" + locator1 + "' is not clickable");            }        } catch (NoSuchElementException e) {            logger.log("Given web element: '" + locator1 + "' was not found in DOM"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator1 + "' was not found in DOM - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: '" + locator1 + "' was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator1 + "' was not found on the web page");        }    }    // This function is to get list of element from given locator.    public List<WebElement> getListOfElements(Scenario logger, By locator, int... timeInSeconds) {        int givenWaitTime = 30;        List<WebElement> list = new ArrayList<>();        try {            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementPresent(logger, locator, givenWaitTime)) {                list = driver.findElements(locator);                //                logger.log("able to fetch list of elements using '" + locator+"'");            } else {                //                logger.log("Given web element: '" + locator + "' is not present");                Assert.fail(                        "Given web elemnt: '" + locator + "' is not present ");            }        } catch (NoSuchElementException e) {            logger.log("Given web element: '" + locator + "' was not found in DOM"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator + "' was not found in DOM - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: '" + locator + "' was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: '" + locator + "' was not found on the web page");        }        return list;    }    // To enter text into given web element.    public void userClearTheTextField(Scenario logger, By locator, int... timeInSeconds) {        int givenWaitTime = 60;        try {//            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementClickable(logger, locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                webelement.clear();            }        } catch (NoSuchElementException e) {            logger.log("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime + " Seconds"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime                    + " Seconds" + " - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: " + locator + " was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found on the web page");        }    }    // To enter text into given web element.    public void userTypeIntoTextField(Scenario logger, By locator, String enterText, int... timeInSeconds) {        int givenWaitTime = 60;        try {//            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementClickable(logger, locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                webelement.clear();                webelement.sendKeys(enterText);            }        } catch (NoSuchElementException e) {            logger.log("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime + " Seconds"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime                    + " Seconds" + " - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: " + locator + " was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found on the web page");        }    }    public String userGetTextFromWebElement(Scenario logger, By locator, int... timeInSeconds) {        int givenWaitTime = 30;        String textFromWebElement = "";        try {            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementPresent(logger, locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                textFromWebElement = webelement.getText();                //                logger.log("Able to get the text from web element "+ locator +" .Text is "+textFromWebElement);            }        } catch (NoSuchElementException e) {            logger.log("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime + " Seconds"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime                    + " Seconds" + " - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: " + locator + " was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found on the web page");        }        return textFromWebElement;    }    //********************************************    public String userGetTextUsingGetAttribute(Scenario logger, By locator, int... timeInSeconds) {        int givenWaitTime = 30;        String fetchValueFromWebElement = "";        try {            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementPresent(logger, locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                fetchValueFromWebElement = webelement.getAttribute("value");                //                logger.log("Fetched value from the web element : '" + locator +"' the value is "+fetchValueFromWebElement);            }        } catch (NoSuchElementException e) {            logger.log("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime + " Seconds"                    + " - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime                    + " Seconds" + " - NoSuchElementException");        } catch (Exception e) {            logger.log("Given web element: " + locator + " was not clickable" + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail("Given web element: " + locator + " was not found on the web page");        }        return fetchValueFromWebElement;    }    public void implicitWaitForGivenTime(int timeInSeconds) {        try {            driver.manage().timeouts().implicitlyWait(timeInSeconds, TimeUnit.SECONDS);        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * To wait for an element to be active state on DOM and returns true if it     * present.     *     * @param elementLocator - locator of the element     *                       - wait time in seconds     * @return - true if element exists.     */    public boolean whetherElementPresent(Scenario logger, By elementLocator, int... waitTimeInSeconds) {        int timeInSeconds = toGetGivenAmountOfTime(waitTimeInSeconds);        boolean whetherElementPresent = false;//        logger.log("Searching for given element:  " + elementLocator);        try {            waitUntilElementLocatedOrRefreshed(elementLocator);            WebDriverWait wait = new WebDriverWait(driver, timeInSeconds);            wait.until(ExpectedConditions.presenceOfElementLocated(elementLocator));            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            if (driver.findElement(elementLocator).isDisplayed() || driver.findElement(elementLocator).isEnabled()) {                whetherElementPresent = true;                //                logger.log("Given element - " + elementLocator + " is exists and displayed");            }        } catch (org.openqa.selenium.NoSuchElementException e) {            logger.log("Given element " + elementLocator + " was not found in DOM in given time - " + timeInSeconds                    + " Seconds - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (TimeoutException e) {            logger.log("Given element " + elementLocator + " was not displayed in given time - " + timeInSeconds                    + " Seconds" + " - TimeoutException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (Exception e) {            logger.log("Element " + elementLocator + " is not found ");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return whetherElementPresent;    }    /*    Method to get status of element     */    public Boolean getStatusOfElement(By elementLocator){        Boolean isPresent = false;//        waitUntilElementLocatedOrRefreshed(elementLocator);        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);        try{            driver.findElement(elementLocator).isDisplayed();            isPresent = true;        }catch(Exception e){            isPresent = false;        }//        if (driver.findElement(elementLocator).isDisplayed() || driver.findElement(elementLocator).isEnabled()) {//            isPresent = true;//        }        return isPresent;    }    /**     * To get waitTime for expected condition to be met. if not given,it will take     * default value 30 seconds.     *     * @param waitTimeArray     * @return     */    public int toGetGivenAmountOfTime(int[] waitTimeArray) {        if (waitTimeArray.length <= 0) {            return 30;        } else {            return waitTimeArray[0];        }    }    /**     * This is to wait for an element till the given element is clickable.     *     * @param locator     * @return - True (boolean) if given element is located     */    public boolean whetherElementClickable(Scenario logger, By locator, int... givenTimeInSeconds) {        int timeInSeconds = toGetGivenAmountOfTime(givenTimeInSeconds);        boolean elementClickable = false;        try {            WebDriverWait wait = new WebDriverWait(driver, timeInSeconds);            wait.until(ExpectedConditions.elementToBeClickable(locator));            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            if (driver.findElement((locator)).isDisplayed()) {                elementClickable = true;                //                logger.log("Given element locator : " + locator + " is displayed and is clickable");            }        } catch (org.openqa.selenium.NoSuchElementException e) {            logger.log("Unable to find " + locator + " in DOM in time " + timeInSeconds                    + " Seconds - NoSuchElementException");            Assert.fail("Unable to find " + locator + " in DOM in time " + timeInSeconds                    + " Seconds - NoSuchElementException");        } catch (TimeoutException e) {            logger.log(locator + " was not displayed in time - " + timeInSeconds + " Seconds - TimeoutException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail(locator + " was not displayed in time - " + timeInSeconds + " Seconds - TimeoutException");        } catch (Exception e) {            logger.log(locator + "was not displayed - " + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            Assert.fail(locator + " was not displayed");        }        return elementClickable;    }    /*    Check whether button enabled or disabled     */    public Boolean checkIsEnabledOrDisabled(Scenario logger, By elementLocator, int... waitTimeInSeconds) {        int timeInSeconds = toGetGivenAmountOfTime(waitTimeInSeconds);        boolean whetherElementPresent = false;        //        logger.log("Searching for given element:  " + elementLocator);        try {            waitUntilElementLocatedOrRefreshed(elementLocator);            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            if (driver.findElement(elementLocator).isEnabled()) {                whetherElementPresent = true;                //                logger.log("Given element - " + elementLocator + " is exists and displayed");            }        } catch (org.openqa.selenium.NoSuchElementException e) {            logger.log("Given element " + elementLocator + " was not found in DOM in given time - " + timeInSeconds                    + " Seconds - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (TimeoutException e) {            logger.log("Given element " + elementLocator + " was not displayed in given time - " + timeInSeconds                    + " Seconds" + " - TimeoutException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (Exception e) {            logger.log("Element " + elementLocator + " is not found ");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return whetherElementPresent;    }    /*    Check whether checkbox is selected or not     */    public Boolean isCheckBoxSelected(Scenario logger, By elementLocator, int... waitTimeInSeconds) {        int timeInSeconds = toGetGivenAmountOfTime(waitTimeInSeconds);        boolean whetherElementPresent = false;        //        logger.log("Searching for given element:  " + elementLocator);        try {            waitUntilElementLocatedOrRefreshed(elementLocator);            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            if (driver.findElement(elementLocator).isSelected()) {                whetherElementPresent = true;                //                logger.log("Given element - " + elementLocator + " is exists and displayed");            }        } catch (org.openqa.selenium.NoSuchElementException e) {            logger.log("Given element " + elementLocator + " was not found in DOM in given time - " + timeInSeconds                    + " Seconds - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (TimeoutException e) {            logger.log("Given element " + elementLocator + " was not displayed in given time - " + timeInSeconds                    + " Seconds" + " - TimeoutException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (Exception e) {            logger.log("Element " + elementLocator + " is not found ");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return whetherElementPresent;    }    /*    Get Current UTC Date and Time     */    public String getCurrentUTCDateAndTime(Scenario logger, String simpleDateTimeFormat) {        String str = null;        final SimpleDateFormat f = new SimpleDateFormat(simpleDateTimeFormat);        f.setTimeZone(TimeZone.getTimeZone("UTC"));        str = f.format(new Date());        return str;    }    /*    Get Current Date and Time     */    public String getCurrentDateAndTime(String simpleDateFormat) {        String str = null;        try {            DateFormat dateFormat = new SimpleDateFormat(simpleDateFormat);            Date date = new Date();            str = dateFormat.format(date);            str = str.replace(" ", "").replaceAll("/", "").replaceAll(":", "");        } catch (Exception e) {        }        return str;    }    /*    Get difference between two dates     */    public int differnceOfTwoDates(Scenario logger, String date1, String date2, String dateFormat) {        int diffDays = 0;        try {            SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);            Date dateObj1 = sdf.parse(date1);            Date dateObj2 = sdf.parse(date2);            System.out.println(dateObj1);            System.out.println(dateObj2 + "\n");            //            DecimalFormat crunchifyFormatter = new DecimalFormat("###,###");            // getTime() returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object            long diff = dateObj2.getTime() - dateObj1.getTime();            diffDays = (int) (diff / (24 * 60 * 60 * 1000));            System.out.println("difference between days: " + diffDays);        } catch (Exception e) {            e.printStackTrace();            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return diffDays;    }    /*    Method to encrypt password to SHA1     */    public String encryptPasswordSHA1(Scenario logger, String password) {        String sha1 = "";        try {            MessageDigest crypt = MessageDigest.getInstance("SHA-1");            crypt.reset();            crypt.update(password.getBytes("UTF-8"));            sha1 = byteToHex(crypt.digest());        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (UnsupportedEncodingException e) {            e.printStackTrace();            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return sha1;    }    private String byteToHex(final byte[] hash) {        Formatter formatter = new Formatter();        for (byte b : hash) {            formatter.format("%02x", b);        }        String result = formatter.toString();        formatter.close();        return result;    }    /*    Method to handle multiple windows     */    public void switchToNewWindow(Scenario logger, int windowNumber) {        //        logger.log("Searching for given window:  " + windowNumber);        try {            Set<String> s = driver.getWindowHandles();            Iterator<String> ite = s.iterator();            int i = 1;            while (ite.hasNext() && i < 10) {                String popupHandle = ite.next().toString();                driver.switchTo().window(popupHandle);                if (i == windowNumber)                    break;                i++;            }        } catch (Exception e) {            logger.log("Window " + windowNumber + " is not found ");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }    }    /*    Method to compare two strings     */    public void assertTwoStrings(Scenario logger, String expected, String actual) {        try {            logger.log("Expected String " + expected);            logger.log("Actual String " + actual);            Assert.assertEquals(expected, actual);        } catch (AssertionError e) {            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            throw new AssertionError();        }    }    /*    Method to read current password from db     */    //    public String getCurrentDbPasswordForAUser(String logonID){    //        commonUtils.initializeDBEnvironment();    //        Map<String, String> userDetails = commonUtils.getUserDetailsFromDB(logonID);    //        return userDetails.get("PASSWORD");    //        basePage.assertTwoStrings(logger, encryptPasswordSHA1(logger,newPassword),userDetails.get("PASSWORD"));    //    }    /*    Method to generate a random password     */   /* public String generateRandomPassword(int length){        String symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$&@?<>~!%#";        public static String genPassword(Random r) {            while(true) {                char[] password = new char[r.nextBoolean()?12:13];                boolean hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;                for(int i=0; i<password.length; i++) {                    char ch = symbols.charAt(r.nextInt(symbols.length()));                    if(Character.isUpperCase(ch))                        hasUpper = true;                    else if(Character.isLowerCase(ch))                        hasLower = true;                    else if(Character.isDigit(ch))                        hasDigit = true;                    else                        hasSpecial = true;                    password[i] = ch;                }                if(hasUpper && hasLower && hasDigit && hasSpecial) {                    return new String(password);                }            }        }    }*/    //    final String LOWER = "abcdefghijklmnopqrstuvwxyz";    //    final String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";    //    final String DIGITS = "0123456789";    //    final String SPECIALCHARACTERS = "!@#$%&*()_+-=[]|,./?><";    //    // Argument Validation.    //        if (length <= 0) {    //        return "";    //    }    //    //    // Variables.    //    StringBuilder password = new StringBuilder(length);    //    Random random = new Random(System.nanoTime());    //    List<String> charCategories = new ArrayList<>(4);    //        charCategories.add(LOWER);    //        charCategories.add(UPPER);    //        charCategories.add(DIGITS);    //        charCategories.add(SPECIALCHARACTERS);    //    // Build the password.    //        for (int i = 0; i < length; i++) {    //        String charCategory = charCategories.get(random.nextInt(charCategories.size()));    //        int position = random.nextInt(charCategory.length());    //        password.append(charCategory.charAt(position));    //    }    //        return new String(password);    public String removeLastCharOptional(String s) {        return Optional.ofNullable(s)                .filter(str -> str.length() != 0)                .map(str -> str.substring(0, str.length() - 1))                .orElse(s);    }    /*    Method to wait until the element located or refreshed     */    public void waitUntilElementLocatedOrRefreshed(By locator) {        WebDriverWait webDriverWait = new WebDriverWait(driver, 30);        webDriverWait.until(ExpectedConditions.visibilityOfElementLocated(locator));    }    public static int getRandomNumberInBetween(int lowerBound, int upperBound) {        Random r = new Random();        return (r.nextInt(upperBound) + lowerBound);    }    /*    Method to select Random value from drop down     */    public void selectRandomValueFromDropDown(Scenario logger, By elementLocator, int... waitTimeInSeconds) {        int timeInSeconds = toGetGivenAmountOfTime(waitTimeInSeconds);        try {            waitUntilElementLocatedOrRefreshed(elementLocator);            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            List<WebElement> list = driver.findElements(elementLocator);            Actions actions = new Actions(driver);            if (list.size() == 1) {                actions.moveToElement(list.get(0)).click().perform();            } else {                actions.moveToElement(list.get(getRandomNumberInBetween(0, list.size() - 1))).click().perform();            }        } catch (org.openqa.selenium.NoSuchElementException e) {            logger.log("Given element " + elementLocator + " was not found in DOM in given time - " + timeInSeconds                    + " Seconds - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (TimeoutException e) {            logger.log("Given element " + elementLocator + " was not displayed in given time - " + timeInSeconds                    + " Seconds" + " - TimeoutException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (Exception e) {            logger.log("Element " + elementLocator + " is not found ");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }    }    /*    Method to select Random value from drop down     */    public void selectRandomValueFromDropDownExceptSpecificValue(Scenario logger, By elementLocator, String exceptValue, int... waitTimeInSeconds) {        int timeInSeconds = toGetGivenAmountOfTime(waitTimeInSeconds);        try {            waitUntilElementLocatedOrRefreshed(elementLocator);            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            List<WebElement> list = driver.findElements(elementLocator);            Actions actions = new Actions(driver);            if (list.size() == 1) {                actions.moveToElement(list.get(0)).click().perform();            } else {                int randomValue = 0;                for(int i=0;i<=list.size()-1;i++) {                    randomValue = getRandomNumberInBetween(0, list.size() - 1);                    if(!list.get(randomValue).getText().equalsIgnoreCase(exceptValue)){                        break;                    }                }                actions.moveToElement(list.get(randomValue)).click().perform();            }        } catch (org.openqa.selenium.NoSuchElementException e) {            logger.log("Given element " + elementLocator + " was not found in DOM in given time - " + timeInSeconds                    + " Seconds - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (TimeoutException e) {            logger.log("Given element " + elementLocator + " was not displayed in given time - " + timeInSeconds                    + " Seconds" + " - TimeoutException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (Exception e) {            logger.log("Element " + elementLocator + " is not found ");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }    }    /*   Check whether checkbox is selected or not    */    public WebElement getWebElementUsingLocator(Scenario logger, By elementLocator, int... waitTimeInSeconds) {        WebElement element = null;        int timeInSeconds = toGetGivenAmountOfTime(waitTimeInSeconds);        boolean whetherElementPresent = false;        //        logger.log("Searching for given element:  " + elementLocator);        try {            waitUntilElementLocatedOrRefreshed(elementLocator);            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            if (driver.findElement(elementLocator).isSelected()) {                whetherElementPresent = true;                //                logger.log("Given element - " + elementLocator + " is exists and displayed");            }            element = driver.findElement(elementLocator);        } catch (org.openqa.selenium.NoSuchElementException e) {            logger.log("Given element " + elementLocator + " was not found in DOM in given time - " + timeInSeconds                    + " Seconds - NoSuchElementException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (TimeoutException e) {            logger.log("Given element " + elementLocator + " was not displayed in given time - " + timeInSeconds                    + " Seconds" + " - TimeoutException");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        } catch (Exception e) {            logger.log("Element " + elementLocator + " is not found ");            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return element;    }    /*    Method to scroll to element     */    public void scrollToElement(WebElement element){        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);    }    /*    Method to click using actions     */    public void clickUsingActions(Scenario logger, WebElement element){        Actions actions = new Actions(driver);        actions.moveToElement(element);        actions.click().perform();        logger.log("Clicked using actions");    }}