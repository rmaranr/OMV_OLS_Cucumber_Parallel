package utilities.ui;import com.aventstack.extentreports.ExtentTest;//import listeners.ExtentReportListener;import io.cucumber.java.Scenario;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.chrome.ChromeOptions;import org.openqa.selenium.remote.SessionId;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import org.testng.ITestContext;import org.testng.SkipException;import org.testng.annotations.*;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import java.io.*;import java.util.*;import java.util.concurrent.TimeUnit;public class WebDriverInitialization extends DriverFactory {    private BaseUtils baseUtils;    private CommonDBUtils commonUtils = new CommonDBUtils();    public String fileSeperator = System.getProperty("file.separator");    public WebDriverInitialization(WebDriver driver) {        //basePage = new BasePage(driver);        baseUtils = new BaseUtils();        this.driver = driver;    }    public WebDriverInitialization() {    }    /*    Method to get clientGroupMid for logged in user     */    public void getClientGroupMidForLoggedInUser(String userName) {        baseUtils = new BaseUtils();        String clientMID = "";        String query = "select distinct member_type_cid from user_members um \n" +                "left join users u on u.user_oid = um.user_oid\n" +                "where u.logon_id = '" + userName + "' and rownum<=10";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        if (queryResults.size() == 0 || !queryResults.get("MEMBER_TYPE_CID").equalsIgnoreCase("103")) {            query = "select distinct ag.description,c.country_code,arc.client_mid, u.client_group_mid, mc.name as country," +                    "ag.access_group_oid from access_groups ag\n" +                    "inner join access_role_clients arc on arc.access_group_oid = ag.access_group_oid\n" +                    "inner join user_roles ur on ur.access_role_oid = arc.access_role_oid\n" +                    "inner join users u on u.user_oid = ur.user_oid\n" +                    "left join m_clients mc on mc.client_mid = arc.client_mid\n" +                    "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n"+                    "left join countries c on c.country_oid = mc.country_oid\n"+                    "where u.logon_id = '" + userName + "' and rownum<=10 and mc.name = '"+PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile),PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"clientCountry"))+"'";            queryResults = commonUtils.getQueryResultsOnMap(query);        } else if (queryResults.get("MEMBER_TYPE_CID").equalsIgnoreCase("103")) {            query = "select distinct mc.client_mid,mc.name as country,c.country_code from m_clients mc \n" +                    "left join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                    "left join user_members um on um.member_oid = mcust.customer_mid\n" +                    "left join users u on u.user_oid = um.user_oid\n" +                    "left join countries c on c.country_oid = mc.country_oid\n"+                    "where u.logon_id = '" + userName + "' and rownum<=10";            queryResults = commonUtils.getQueryResultsOnMap(query);        }//        PropUtils.setProps("ClientGroupMID", queryResults.get("CLIENT_GROUP_MID"), baseUtils.testDataFilePath);        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        List<Map<String, String>> allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (allRowsOfQueryResults.size() == 1) {            PropUtils.setProps("ClientOrCountryBasedUser", allRowsOfQueryResults.get(0).get("COUNTRY"), baseUtils.testDataFilePath);            PropUtils.setProps("Country", allRowsOfQueryResults.get(0).get("COUNTRY"), baseUtils.testDataFilePath);        }        for (int i = 0; i <= allRowsOfQueryResults.size() - 1; i++) {            if (i == allRowsOfQueryResults.size() - 1) {                clientMID = clientMID + allRowsOfQueryResults.get(i).get("CLIENT_MID");                System.out.println("In if condition client mid" + clientMID);            } else {                clientMID = clientMID + allRowsOfQueryResults.get(i).get("CLIENT_MID") + ",";                System.out.println("In else condition client mid" + clientMID);            }        }        PropUtils.setProps("ClientMID", queryResults.get("CLIENT_MID"), baseUtils.testDataFilePath);        PropUtils.setProps("AccessGroupOID", queryResults.get("ACCESS_GROUP_OID"), baseUtils.testDataFilePath);//        logger.log("Client group mid is = " + queryResults.get("CLIENT_GROUP_MID") + " for logged in user " + userName);    }    public void beforeClass(String userName, String passWord, ITestContext ctx) {        if (!System.getProperty("testMethod").contains(ctx.getName()) && !System.getProperty("testMethod").equalsIgnoreCase("All")) {            throw new SkipException(ctx.getName() + " is not present in maven goal");        }        String environment = "";        System.out.println("Before Class");        baseUtils = new BaseUtils();        environment = baseUtils.getEnv();        baseUtils = new BaseUtils();        PropUtils.setProps("testsPassed", "0", baseUtils.commonPropertyFilePath);        PropUtils.setProps("testsFailed", "0", baseUtils.commonPropertyFilePath);        PropUtils.setProps("testsSkipped", "0", baseUtils.commonPropertyFilePath);        Properties properties = PropUtils.getProps(baseUtils.inputDataFile);        BaseUtils.currentUserName = PropUtils.getPropValue(properties, userName);        BaseUtils.currentPassword = PropUtils.getPropValue(properties, passWord);        PropUtils.setProps("currentUserName",userName,baseUtils.commonPropertyFilePath);        PropUtils.setProps("currentPassword",passWord,baseUtils.commonPropertyFilePath);        String query = "update users set PASSWORD_CREATED_AT = sysdate-10 where logon_id = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile),userName) + "'";        CommonDBUtils commonDBUtils = new CommonDBUtils();        commonDBUtils.executeUpdateQuery(query);        query = "update users set logon_status_cid = 2501 where logon_id = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile),userName) + "'";        commonDBUtils.executeUpdateQuery(query);        String propertyFile = "";//        if (!ctx.getName().equalsIgnoreCase("OLS_Login_And_ChangePassword_Scenarios") && !ctx.getName().equalsIgnoreCase("OMV_Login_Scenarios") && !ctx.getName().contains("API")) {//            loginToApplication(environment, BaseUtils.currentUserName, BaseUtils.currentPassword);//        }else{            getClientGroupMidForLoggedInUser(BaseUtils.currentUserName);//        }        PropUtils.setProps("currentTestMethod", ctx.getName(), baseUtils.commonPropertyFilePath);    }    /*    Method to login to application     */    public   void loginToApplication(String environment, String currentUserName, String currentPassword) {        baseUtils = new BaseUtils();        launchSpecifiedBrowser("chrome");        navigateToURL(PropUtils.getPropValue(getPropertiesObjectBasedOnFileName(environment), "url"),driver);     //   navigateToURL(PropUtils.getPropValue(getPropertiesObjectBasedOnFileName(environment), "url"));        driver.findElement(By.cssSelector("mav-input[name='username']>input")).sendKeys(currentUserName);        driver.findElement(By.cssSelector("mav-input[name='password']>input")).sendKeys(currentPassword);        String query = "update users set PASSWORD_CREATED_AT = sysdate-10 where logon_id = '" + currentUserName + "'";        CommonDBUtils commonDBUtils = new CommonDBUtils();        commonDBUtils.executeUpdateQuery(query);        query = "update users set logon_status_cid = 2501 where logon_id = '" + currentUserName + "'";        commonDBUtils.executeUpdateQuery(query);        driver.findElement(By.id("login-button")).click();        getClientGroupMidForLoggedInUser(currentUserName);        try{            WebDriverWait webDriverWait = new WebDriverWait(driver,10);            webDriverWait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//span[contains(text(),'Home')]")));        }catch(Exception e){        }        PropUtils.setProps("currentUserName", currentUserName, baseUtils.commonPropertyFilePath);        PropUtils.setProps("currentPassword", currentPassword, baseUtils.commonPropertyFilePath);    }    //    @AfterClass    public void afterClass(ITestContext ctx) {        System.out.println("after suite");//        writeTimerDataExcel(System.getProperty("templates.folder.path") + "/", "ScenarioTimeDifference.xlsx");        if (!ctx.getName().equalsIgnoreCase("OLS_Login_And_ChangePassword_Scenarios") && !ctx.getName().equalsIgnoreCase("OMV_Login_Scenarios") && !ctx.getName().contains("API")) {            SessionId sessionId = ((ChromeDriver) driver).getSessionId();            if (sessionId != null) {                driver.quit();            }        }    }    @BeforeSuite    public void beforeSuite(){//        ExtentReportListener.startReport("OMVAutomationReport");    }    @AfterSuite    public void afterSuite() {//        ExtentReportListener.flushReport("OMVAutomationReport");        writeTimerDataExcel(  "./src//test//resources//templates", "ScenarioTimeDifference.xlsx");    }    /*    Method to get input property file     */    public Properties getPropertiesObjectBasedOnFileName(String fileName) {        return PropUtils.getProps(new File(System.getProperty("config.folder.path") + "/" + fileName + ".properties"));    }    public void closeBrowser() {//        driver.close();        driver.quit();    }    static String description = "";    static int rowNo;    static long startTime;    static long endTime;    public static HashMap<String, Long> scenarios = new HashMap<String, Long>();    public static String getTodayDate() {        String datePattern = "%tm/%td/%tY";        Date today = new Date();        return String.format(datePattern, today, today, today);    }    private static void copy(File src, File dest) {        InputStream is = null;        OutputStream os = null;        try {            is = new FileInputStream(src);            os = new FileOutputStream(dest);            // buffer size 1K            byte[] buf = new byte[1024];            int bytesRead;            while ((bytesRead = is.read(buf)) > 0) {                os.write(buf, 0, bytesRead);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                is.close();                os.close();            } catch (Exception e1) {                e1.printStackTrace();            }        }    }    public static void writeTimerDataExcel(String filePath, String fileName) {        try {            XSSFWorkbook workbook = null;            XSSFSheet sheet = null;            File file = new File(filePath + "\\" + fileName);            FileInputStream inputStream = new FileInputStream(file);            workbook = new XSSFWorkbook(inputStream);            sheet = workbook.getSheet("Sheet1");//            sheet = workbook.createSheet(getTodayDate());            int cols = sheet.getRow(0).getLastCellNum();            if(!sheet.getRow(0).getCell(cols-1).getStringCellValue().equals(getTodayDate())){                sheet.getRow(0).createCell(cols).setCellValue(getTodayDate());            }else{                cols = cols-1;            }            System.out.println("Hash Data:" + scenarios);            int i = sheet.getLastRowNum();            XSSFRow row = null;            int rows = sheet.getLastRowNum();            boolean isPresent = false;            for (Map.Entry<String, Long> scenario : scenarios.entrySet()) {                for(int j=1;j<=rows;j++){                    if(sheet.getRow(j).getCell(0).getStringCellValue().equalsIgnoreCase(scenario.getKey())){                        isPresent = true;                        row = sheet.getRow(j);                        break;                    }                }                if(isPresent){                    row.createCell(cols).setCellValue(scenario.getValue());                }else{                    row = sheet.createRow(i);                    row.createCell(0).setCellValue(scenario.getKey());                    row.createCell(cols).setCellValue(scenario.getValue());                    i = i + 1;                }            }            inputStream.close();            FileOutputStream outputStream = new FileOutputStream(file);            workbook.write(outputStream);            outputStream.close();//            copy(new File("/i1/data/bamboo/AEC1bamslv000D/xml-data/build-dir/IORQAU-IORQAUBP16-MAV/config/ScenarioTimeDifference.csv"),new File("./config/ScenarioTimeDifference.csv"));        } catch (IOException exception) {//            logger.log(exc8eption.getMessage());        }    }    public WebDriver launchSpecifiedBrowser(String browserName) {      //  String =System.getProperty("user.dir") + "/src/main/resources/drivers/chromedriver.exe";        System.setProperty("webdriver.chrome.driver",System.getProperty("user.dir") + "/src/main/resources/drivers/chromedriver.exe");        if (browserName.trim().equalsIgnoreCase("Chrome")) {            // ChromeOptions chromeOptions = new ChromeOptions();            Map<String, Object> prefs = new HashMap<String, Object>();            prefs.put("download.prompt_for_download", false);            System.setProperty("webdriver.chrome.whitelistedIps", "");            ChromeOptions options = new ChromeOptions();            options.setExperimentalOption("prefs", prefs);            options.setExperimentalOption("useAutomationExtension", false);            options.addArguments("--incognito");            options.addArguments("--test-type", "start-maximized");            options.addArguments("--disable-infobars");            options.addArguments("--disable-extensions");            options.addArguments("--ignore-certificate-errors");            //options.addArguments("--headless");            options.addArguments("--disable-gpu");            options.addArguments("--window-size=1024,768");            options.addArguments("--no-sandbox");            options.addArguments("--disable-dev-shm-usage");            options.addArguments("--enable-automation");            options.addArguments("--disable-setuid-sandbox");            options.addArguments("--allow-insecure-localhost");            options.addArguments("--whitelisted-ips");            options.addArguments("--port=8080");            options.addArguments("--no-proxy-server");            driver = new ChromeDriver(options);           //  driver.manage().window().maximize();            try {    /*//parallel    DesiredCapabilities desiredCapabilities = DesiredCapabilities.chrome();    //  desiredCapabilities.setAcceptInsecureCerts(true);    desiredCapabilities.setCapability(ChromeOptions.CAPABILITY, options);    System.out.println("remoteWebDriver-start");    //Thread.sleep(1);    driver = new RemoteWebDriver(new URL("http://10.144.128.245:2222/wd/hub"), desiredCapabilities);    System.out.println("remoteWebDriver-done");*/            }            catch(Exception e)            {            }        }        return driver;    }    // To navigate to given http application URL.    public WebDriver navigateToURL(String url,WebDriver driver) {        try {            driver.navigate().to(url);            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);            Thread.sleep(3000);        } catch (Exception e) {            e.getStackTrace();        }        return  driver;    }    public ChromeOptions getChromeOptions() {//        Proxy proxy = new Proxy();//        proxy.setNoProxy("");//        proxy.setAutodetect(false);        Map<String, Object> prefs = new HashMap<String, Object>();        prefs.put("download.prompt_for_download", false);        System.setProperty("webdriver.chrome.whitelistedIps", "");        ChromeOptions options = new ChromeOptions();        options.setExperimentalOption("prefs", prefs);        options.setExperimentalOption("useAutomationExtension", false);        options.addArguments("--incognito");        options.addArguments("--test-type", "start-maximized");        options.addArguments("--disable-infobars");        options.addArguments("--disable-extensions");        options.addArguments("--ignore-certificate-errors");       // options.addArguments("--headless");        options.addArguments("--disable-gpu");        options.addArguments("--window-size=1024,768");        options.addArguments("--no-sandbox");//        options.setCapability("proxy", proxy);//        options.setCapability(CapabilityType.PROXY, proxy);//         options.addArguments("--disable-async-dns");        options.addArguments("--disable-dev-shm-usage");        options.addArguments("--enable-automation");        options.addArguments("--disable-setuid-sandbox");        options.addArguments("--allow-insecure-localhost");        options.addArguments("--whitelisted-ips");//         options.addArguments("--port=8080");        options.addArguments("--no-proxy-server");        options.addArguments("--remote-debugging-port=8080");        return options;    }    // To launch Chrome browser.    private WebDriver chromeDriver() {//     WebDriverManager.chromedriver()/*.version("77.0.3865.40")*/.setup();        return new ChromeDriver(getChromeOptions());    }}