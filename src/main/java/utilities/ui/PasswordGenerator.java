package utilities.ui;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.yaml.snakeyaml.scanner.Constant;import java.security.MessageDigest;import java.security.SecureRandom;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.stream.Collectors;public class PasswordGenerator {    private static final String CHAR_LOWER = "abcdefghijklmnopqrstuvwxyz";    private static final String CHAR_UPPER = CHAR_LOWER.toUpperCase();    private static final String NUMBER = "0123456789";    private static final String SPECIAL_CHAR = "~`!@#$%^&*()-_+|;:'<>.?/)";    private static final String PASSWORD_ALLOW_BASE = CHAR_LOWER + CHAR_UPPER + NUMBER;    // optional, make it more random    private static final String PASSWORD_ALLOW_BASE_SHUFFLE = shuffleString(PASSWORD_ALLOW_BASE);    private static final String PASSWORD_ALLOW = PASSWORD_ALLOW_BASE_SHUFFLE;    private static SecureRandom random = new SecureRandom();    public static void main(Scenario logger, String[] args) {        System.out.format("String for password \t\t\t: %s%n", PASSWORD_ALLOW_BASE);        System.out.format("String for password (shuffle) \t: %s%n%n", PASSWORD_ALLOW);        // generate 5 random password        for (int i = 0; i < 5; i++) {            System.out.println("password : " + generateRandomPassword(logger, 15));            System.out.println("\n");        }    }    public static String generateRandomPassword(Scenario logger, int length) {        if (length < 1)            throw new IllegalArgumentException();        if (length < 8) {            logger.log("Password length should be equal to or greater than 8 characters");        }        char rndChar;        int rndCharAt;        StringBuilder sb = new StringBuilder(length);        for (int i = 1; i <= length+1; i++) {            if (i == 1) {                rndCharAt = random.nextInt(CHAR_UPPER.length());                rndChar = CHAR_UPPER.charAt(rndCharAt);            } else if (i == 2) {                rndCharAt = random.nextInt(CHAR_LOWER.length());                rndChar = CHAR_LOWER.charAt(rndCharAt);            } else if (i == 3) {                rndCharAt = random.nextInt(NUMBER.length());                rndChar = NUMBER.charAt(rndCharAt);            } else if (i == 4) {                rndCharAt = random.nextInt(SPECIAL_CHAR.length());                rndChar = SPECIAL_CHAR.charAt(rndCharAt);            } else {                rndCharAt = random.nextInt(PASSWORD_ALLOW.length());                rndChar = PASSWORD_ALLOW.charAt(rndCharAt);            }            // debug            System.out.format("%d\t:\t%c%n", rndCharAt, rndChar);            sb.append(rndChar);        }        return sb.toString();    }    /*    Method to get random alphabates     */    public static String generateAlphabatesWithFewSpecialChars(Scenario logger, int length, String specialChar) {        String alphaNumeric = CHAR_UPPER+CHAR_LOWER+NUMBER;        String SPECIAL_CHAR = "_-";        char rndChar = 'a';        int rndCharAt;        StringBuilder sb = new StringBuilder(length);        for (int i = 1; i <= length+1; i++) {            if (i == 1) {                rndCharAt = random.nextInt(CHAR_UPPER.length());                rndChar = CHAR_UPPER.charAt(rndCharAt);            } else if (i == 2) {                rndCharAt = random.nextInt(SPECIAL_CHAR.length());                rndChar = SPECIAL_CHAR.charAt(rndCharAt);            } else if (i == 3) {                rndCharAt = random.nextInt(CHAR_LOWER.length());                rndChar = CHAR_LOWER.charAt(rndCharAt);            } else if (i == 4) {                rndCharAt = random.nextInt(SPECIAL_CHAR.length());                rndChar = SPECIAL_CHAR.charAt(rndCharAt);            } else if (i == 5) {                rndCharAt = random.nextInt(NUMBER.length());                rndChar = NUMBER.charAt(rndCharAt);                // debug//            System.out.format("%d\t:\t%c%n", rndCharAt, rndChar);            }else {                rndCharAt = random.nextInt(alphaNumeric.length());                rndChar = alphaNumeric.charAt(rndCharAt);            }            sb.append(rndChar);        }        return sb.toString();    }    /*    Method to get random alpha numeric     */    public static String generateAlphaNumeric(Scenario logger, int length) {        String alphaNumeric = CHAR_UPPER+CHAR_LOWER+NUMBER;        char rndChar = 'a';        int rndCharAt;        StringBuilder sb = new StringBuilder(length);        for (int i = 1; i <= length+1; i++) {            if (i == 1) {                rndCharAt = random.nextInt(CHAR_UPPER.length());                rndChar = CHAR_UPPER.charAt(rndCharAt);            } else if (i == 2) {                rndCharAt = random.nextInt(CHAR_LOWER.length());                rndChar = CHAR_LOWER.charAt(rndCharAt);            } else if (i == 3) {                rndCharAt = random.nextInt(NUMBER.length());                rndChar = NUMBER.charAt(rndCharAt);                // debug//            System.out.format("%d\t:\t%c%n", rndCharAt, rndChar);            }else {                rndCharAt = random.nextInt(alphaNumeric.length());                rndChar = alphaNumeric.charAt(rndCharAt);            }            sb.append(rndChar);        }        return sb.toString();    }    /*    Method to get random alphabets     */    public static String generateAlphabets(Scenario logger, int length) {        String alphaBates = CHAR_UPPER+CHAR_LOWER;        char rndChar = 'a';        int rndCharAt;        StringBuilder sb = new StringBuilder(length);        for (int i = 1; i <= length+1; i++) {            if (i == 1) {                rndCharAt = random.nextInt(CHAR_UPPER.length());                rndChar = CHAR_UPPER.charAt(rndCharAt);            } else if (i == 2) {                rndCharAt = random.nextInt(CHAR_LOWER.length());                rndChar = CHAR_LOWER.charAt(rndCharAt);            } else {                rndCharAt = random.nextInt(alphaBates.length());                rndChar = alphaBates.charAt(rndCharAt);            }            sb.append(rndChar);        }        return sb.toString();    }    /*    Method to generate numeric values in specified length     */    public static String generateNumeric(int length){        StringBuilder sb = new StringBuilder(length);        char rndChar = '1';        int rndCharAt;        for(int i = 1; i<=length; i++){            rndCharAt = random.nextInt(NUMBER.length());            rndChar = NUMBER.charAt(rndCharAt);            sb.append(rndChar);        }        return sb.toString();    }    /*private static MessageDigest sha3_md;    public static String encryptSHA3(String password) {        String SHA_3_PREFIX = "{SHA3}";        byte[] md = sha3_md.digest(password.getBytes());        return SHA_3_PREFIX + byteArrayToHexString(md);    }    public static String byteArrayToHexString(byte[] bytes) {        StringBuilder sb = new StringBuilder();        for (byte b : bytes) {            String hex = Integer.toHexString(0xFF & b);            if (hex.length() == 1) {                sb.append('0');            }            sb.append(hex);        }        return sb.toString();    }*/    /*public String encryptPassword(String password) {        return encrypter.encrypt(password);    }*/    // shuffle    public static String shuffleString(String string) {        List<String> letters = Arrays.asList(string.split(""));        Collections.shuffle(letters);        return letters.stream().collect(Collectors.joining());    }}