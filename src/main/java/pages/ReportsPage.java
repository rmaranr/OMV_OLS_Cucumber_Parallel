package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;//import listeners.ExtentReportListener;import org.openqa.selenium.By;import org.openqa.selenium.Keys;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import utilities.ui.PasswordGenerator;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Properties;public class ReportsPage {    private WebDriver driver;    private BasePage basePage;    private CommonDBUtils commonUtils;    private BaseUtils baseUtils;    private CommonPage commonPage;    private TransactionsPage transactionsPage;    public Scenario logger;    /* Constructor to get the driver object */    public ReportsPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);        transactionsPage = new TransactionsPage(driver);    }    //Locators//    private static final By liReports = By.xpath("(//span[contains(text(),'Reports')])[2]");    private static final By txtReportName = By.cssSelector("input[name='reportName']");    private final By filter1DayInDatePopUp = By.xpath("(//div[@class='dropdown-button-content'])");    //    private final By filter1DayInPage = By.xpath("(//span[@class='dropdown-text filter-selected'])[3]");    private static final By txtSearchTextBox = By.cssSelector("div[class='mat-form-field-infix']>span>mav-input>input");    private static final By dropStatusInChangeStatusForm = By.xpath("//mav-select[@name='status']/mat-select/div/div[1]/span/span");    /*       Method to enter search eky words in search text box        */    public void enterSearchKeyWords(Scenario logger, String searchKeywords) {        basePage.userTypeIntoTextField(logger, txtSearchTextBox, searchKeywords);    }    /*        Method to select filter from 1 day filter drop down         */    public void selectFilter(Scenario logger, String filterValue, int filterPosition) {        basePage.userClick(logger, By.xpath("(//span[@class='dropdown-text filter-selected'])[" + filterPosition + "]"));        basePage.userClick(logger, filter1DayInDatePopUp);        basePage.userClick(logger, By.xpath("//span[@class='ng-star-inserted']/div[contains(text(),'" + filterValue + "')]"));//        commonPage.clickUsingDiv(logger, filterValue);        if (!filterValue.equals("Custom")) {            commonPage.clickApplyButtonOnDatePicker(logger);        }    }    /*   Method to click on report sub menu    */    public void clickOnReportSubmenu(Scenario logger, String menuName) {        By locator = null;        if (menuName.equalsIgnoreCase("Reports")) {            locator = By.xpath("(//span[contains(text(),'Reports')])[2]");        } else {            locator = By.xpath("(//span[contains(text(),'" + menuName + "')])");        }        commonPage.sleepForFewSeconds(2);        basePage.userClick(logger, locator);    }    /*        Method to validate Report Category drop down behavior        public void validateReportCategoryDropDownBehavior(Scenario logger) {            By locator = By.cssSelector("mat-select[name='categoryList']");            basePage.userClick(logger, locator);            List<WebElement> categories = basePage.getListOfElements(logger, By.cssSelector("span[class='mat-option-text']"));    //        Random r = new Random();    //        int randomValue = r.nextInt(categories.size());    //        categories.get(randomValue).click();            categories.get(0).click();            PropUtils.setProps("Reports-reportCategory", categories.get(0).getText(), baseUtils.testDataFilePath);        }    */    /*    Method to validate Report type drop down behavior    public void validateReportTypeDropDownBehavior(Scenario logger) {        By locator = By.cssSelector("mat-select[name='reportType']");        basePage.userClick(logger, locator);        List<WebElement> categories = basePage.getListOfElements(logger, By.cssSelector("span[class='mat-option-text']"));            Random r = new Random();            int randomValue = r.nextInt(categories.size());            categories.get(randomValue).click();        }*/    /*    Method to get report categories     */    public List<Map<String, String>> getReportCategories(Scenario logger, String onlineScheduledValue, String adhocValue) {        String query = "select rc.description from report_categories rc\n" +                "inner join report_type_template_view rttv on rttv.report_category_oid = rc.report_category_oid\n" +                "inner join user_members um on um.MEMBER_TYPE_CID = rttv.MEMBER_TYPE_CID\n" +                "inner join users u on u.user_oid = um.user_oid\n" +                "inner join m_clients mc on mc.client_mid = rc.client_mid\n" +                "where mc.client_mid = " + PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile), "ClientMID") + " " +                " AND u.logon_id = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile), "currentUserName") + "'\n" +                "AND (RTTV.IS_ONLINE_SCHEDULED ='" + onlineScheduledValue + "' AND RTTV.IS_ADHOC='" + adhocValue + "') GROUP BY rc.DESCRIPTION";        logger.log(query);        List<Map<String, String>> queryRes = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        return queryRes;    }    /*    Method to validate Report Category drop down behavior*/    public List<Map<String, String>> validateReportCategoryDropDownBehavior(Scenario logger, List<Map<String, String>> queryResults) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        System.out.println("Category value is : " + queryResults.get(0).get("DESCRIPTION"));        logger.log("category value is : " + queryResults.get(0).get("DESCRIPTION"));        By locator = By.cssSelector("mav-select[name='categoryList']>mat-select");        if (queryResults.size() != 1) {            basePage.userClick(logger, locator);            commonPage.sleepForFewSeconds(1);            commonPage.clickAndPerformUsingActions(driver.findElement(By.cssSelector("mat-option[ng-reflect-value='" + queryResults.get(0).get("DESCRIPTION") + "']>span")));            logger.log("The selected report category is: " + queryResults.get(0).get("DESCRIPTION"));            PropUtils.setProps("isOnlyOneReportCategoryAvailable", "false", baseUtils.testDataFilePath);        } else {            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(locator, "ng-reflect-is-disabled"), "Status of report category drop down");            PropUtils.setProps("isOnlyOneReportCategoryAvailable", "true", baseUtils.testDataFilePath);        }        PropUtils.setProps("Reports-reportCategory", queryResults.get(0).get("DESCRIPTION"), baseUtils.testDataFilePath);        return queryResults;    }    public Boolean validateReportTypeDropDownBehavior(Scenario logger, String onLineScheduledValue, String adhocValue, List<Map<String, String>> queryResults) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        Boolean isReportTypePresent = false;        if (queryResults.size() == 1) {            commonPage.assertTwoStrings(logger, queryResults.get(0).get("REPORTTYPE"), basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[name='reportType']>mat-select>div>div>span")), "Report type");            PropUtils.setProps("Reports-reportType", queryResults.get(0).get("REPORTTYPE"), baseUtils.testDataFilePath);            isReportTypePresent = true;        } else {            By locator = By.cssSelector("mav-select[name='reportType']");            basePage.userClick(logger, locator);            for (int i = 0; i <= queryResults.size() - 1; i++) {                if (queryResults.get(i).get("IS_ONLINE_SCHEDULED").equalsIgnoreCase(onLineScheduledValue) && (queryResults.get(i).get("IS_ADHOC").equalsIgnoreCase(adhocValue))) {                    commonPage.clickButtonUsingSpan(logger, queryResults.get(i).get("REPORTTYPE"));                    PropUtils.setProps("Reports-reportType", queryResults.get(i).get("REPORTTYPE"), baseUtils.testDataFilePath);                    isReportTypePresent = true;                    break;                }            }//            List<WebElement> reportTypes = basePage.getListOfElements(logger, By.cssSelector("span[class='mat-option-text']"));////            Random r = new Random();//            int randomValue = r.nextInt(categories.size());//            categories.get(randomValue).click();        }        return isReportTypePresent;    }    /*    Method to get reportTypes     */    public List<Map<String, String>> getReportTypes(String isOnlineScheduledValue, String adhocValue) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select distinct rttv.description as reportType, RTTV.IS_ONLINE_SCHEDULED,RTTV.IS_ADHOC from report_categories rc\n" +                "inner join report_type_template_view rttv on rttv.report_category_oid = rc.report_category_oid\n" +                "inner join user_members um on um.MEMBER_TYPE_CID = rttv.MEMBER_TYPE_CID\n" +                "inner join users u on u.user_oid = um.user_oid\n" +                "inner join m_clients mc on mc.client_mid = rc.client_mid\n" +                "where mc.client_mid = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile), "ClientMID") +                "' AND u.logon_id = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile), "currentUserName") + "'\n" +                "AND (rttv.is_online_scheduled = '" + isOnlineScheduledValue + "' or rttv.is_adhoc = '" + adhocValue + "')and rc.description = '" +                PropUtils.getPropValue(properties, "Reports-reportCategory") + "'";        return commonUtils.getAllRowsOfQueryResultsOnListMap(query);    }    /*    Method to validate tool tip fields based on report drop down     */    public void validateToolTipOfFields(Scenario logger, String fields, String reportDropDown, String expToolTip, List<Map<String, String>> queryResults) {        String toolTip = "";        String[] fieldNames = {fields};        if (fields.contains(",")) {            fieldNames = fields.split(",");        }        if (!PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile), "isOnlyOneReportCategoryAvailable").equalsIgnoreCase("true")) {            if (queryResults.size() != 1) {                for (int i = 0; i <= fieldNames.length - 1; i++) {                    if (fieldNames[i].equalsIgnoreCase("reportType")) {                        toolTip = commonPage.getAttributeValue(By.cssSelector("mav-select[name='reportType']"), "ng-reflect-message");                        commonPage.assertTwoStrings(logger, expToolTip, toolTip, "TooltipFor-ReportType-DropDown");                    }                    if (fieldNames[i].equalsIgnoreCase("runOnce")) {                        toolTip = commonPage.getAttributeValue(By.xpath("(//mat-radio-button[@class='mat-radio-button mat-radio-disabled mat-accent'])[1]"), "ng-reflect-message");                        commonPage.assertTwoStrings(logger, expToolTip, toolTip, "TooltipFor-RunOnce-RadioButton");                    }                    if (fieldNames[i].equalsIgnoreCase("scheduleAsARecurringReport")) {                        toolTip = commonPage.getAttributeValue(By.xpath("(//mat-radio-button[@class='mat-radio-button mat-radio-disabled mat-accent'])[2]"), "ng-reflect-message");                        commonPage.assertTwoStrings(logger, expToolTip, toolTip, "TooltipFor-ScheduleAsARecurringReport-RadioButton");                    }                    if (fieldNames[i].equalsIgnoreCase("frequency")) {                        toolTip = commonPage.getAttributeValue(By.cssSelector("mav-select[name='reportType']"), "ng-reflect-message");                        commonPage.assertTwoStrings(logger, expToolTip, toolTip, "TooltipFor-FrequencyDropDown");                    }                }            }        }    }    /*    Method to get labels for selected report type     */    public ArrayList<String> getLabelsForSelectedReportType(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select distinct param.label, rt.description from REPORT_TYPES RT\n" +                "inner join report_type_template_view RTP on RT.REPORT_TEMPLATE_OID = RTP.REPORT_TEMPLATE_OID\n" +                "inner join report_template_params_view param on PARAM.REPORT_TEMPLATE_OID = RTP.REPORT_TEMPLATE_OID\n" +                "inner join user_members um on um.member_type_cid = rt.member_type_cid\n" +                "inner join users u on u.user_oid = um.user_oid\n" +                "where u.logon_id = '" + PropUtils.getPropValue(baseUtils.inputProp, "UserName") + "' and (rtp.is_adhoc = 'Y' or rtp.IS_online_scheduled = 'Y') \n" +                "and param.is_user_displayed = 'Y' and rt.description = '" +                PropUtils.getPropValue(properties, "Reports-reportType") + "'";        logger.log(query);        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        ArrayList<String> labels = new ArrayList<String>();        for (int i = 0; i <= queryResults.size() - 1; i++) {            labels.add(queryResults.get(i).get("LABEL"));        }        return labels;    }    /*    Method to handle report labels     */    public void handleReportLabels(Scenario logger, Map<String, String> labelsAndTheirTypes, String selectedRadioButtonName) {        WebElement element = null;        for (Map.Entry<String, String> entry : labelsAndTheirTypes.entrySet()) {            if (entry.getKey().equalsIgnoreCase("Date Range") && (selectedRadioButtonName.equalsIgnoreCase("Run once"))) {                try {                    commonPage.scrollDown(logger);                } catch (Exception e) {                    //ExtentReportListener.//testStepHandle("FAIL",driver,loggerger,e);                }                String getDayNumber = "";                String monthAndYear = "";                String getCurrentDate = commonPage.getDesiredDateInSpecificFormat(logger, "today", 0, "Past", "dd, MMMM YYYY", "dd, MMMM YYYY");                String getDesiredDate = commonPage.getDesiredDateInSpecificFormat(logger, "today", 20, "Past", "dd, MMMM YYYY", "dd, MMMM YYYY");                basePage.userClick(logger, By.cssSelector("div[class='mat-form-field-infix']>span>mav-input[name='dateRange']"));                if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month drp-animate']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {                    getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[contains(@class,'active start-date end-date in-range available ng-star-inserted')]/span"));                } else if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {                    getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[contains(@class,'active start-date end-date in-range available ng-star-inserted')]/span"));                }                element = driver.findElement(By.xpath("//td[contains(@class,'active start-date end-date in-range available ng-star-inserted')]/span[text()='" + getDayNumber + "']"));                commonPage.clickAndPerformUsingActions(element);                handleDatePickerForPastOrFutureDateSelection(logger, getDesiredDate);                break;            }//            if(entry.getKey().contains("Quantity")){//                basePage.userTypeIntoTextField(logger,By.cssSelector("input[name='number']"),"2");//                break;//            }            if (entry.getValue().equalsIgnoreCase("String")) {                basePage.userTypeIntoTextField(logger, By.cssSelector("div>input[ng-reflect-name='" + entry.getKey() + "']"), PasswordGenerator.generateAlphaNumeric(logger, 6));                break;            }            if (entry.getValue().equalsIgnoreCase("Numeric")) {                basePage.userTypeIntoTextField(logger, By.cssSelector("div>input[ng-reflect-name='" + entry.getKey() + "']"), PasswordGenerator.generateNumeric(6));                break;            }        }        if (labelsAndTheirTypes.size() == 1) {            for (Map.Entry<String, String> entry : labelsAndTheirTypes.entrySet()) {                if (entry.getValue().equalsIgnoreCase("account_no") || entry.getValue().equalsIgnoreCase("customer_no") || entry.getValue().equalsIgnoreCase("Account stepper")) {                } else {                    commonPage.clickOnButtonUsingJSExecutor(logger, "Next", "2", "span");                }            }        } else {            commonPage.clickOnButtonUsingJSExecutor(logger, "Next", "2", "span");        }    }    /*    Method to handle Report deliveryStepper     */    public void handleReportDeliveryStepper(Scenario logger, String radioButtonName, String actionOfReport) {        logger.log("action of report is : " + actionOfReport);        String newReportName = "";        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        commonPage.sleepForFewSeconds(1);        logger.log("Report Type from property file : " + PropUtils.getPropValue(properties, "Reports-reportType"));        if (PropUtils.getPropValue(properties, "Reports-reportType").equalsIgnoreCase("Key Customer Sales Analysis Report")) {            WebElement element = driver.findElement(By.cssSelector("mat-radio-button[ng-reflect-value='Non-Delivery']"));            commonPage.clickUsingJSExecutor(logger, element);            newReportName = PasswordGenerator.generateNumeric(14);            logger.log("New Report Name is : " + newReportName);            basePage.userTypeIntoTextField(logger, txtReportName, newReportName);            PropUtils.setProps("newReportName", newReportName, baseUtils.testDataFilePath);        } else {            if (radioButtonName.equalsIgnoreCase("Run once")) {                String defaultRadioButton = commonPage.getAttributeValue(By.cssSelector("mat-radio-button[class='mat-radio-button mat-radio-checked mat-accent']"), "ng-reflect-value");                if (defaultRadioButton.equals("Email full report")) {                    logger.log("'Email full report' radio button is selected by default as expected");                } else {                    logger.log("Radio button '" + defaultRadioButton + "' is selected by default");                }                if (!actionOfReport.equals("Email full report")) {                    commonPage.clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.cssSelector("mat-radio-button[ng-reflect-value='" + actionOfReport + "']")));                    commonPage.sleepForFewSeconds(2);                } else {                    basePage.userTypeIntoTextField(logger, By.cssSelector("mat-chip-list[class='mat-chip-list']>div>input"), "srilatha.nerella@wexinc.com");                    basePage.getWebElementUsingLocator(logger, By.cssSelector("ols-autocomplete[formcontrolname='contactList']>mat-form-field>div>div>div[class='mat-form-field-infix']>input")).sendKeys(Keys.DOWN, Keys.RETURN);                    commonPage.sleepForFewSeconds(2);                    commonPage.handleActionsClassForKeyboardActions("enter");                }            }            if (radioButtonName.equalsIgnoreCase("Schedule as a recurring report")) {                if (actionOfReport.equalsIgnoreCase("Email full report")) {                    actionOfReport = "Email";                }                String expected = basePage.userGetTextUsingGetAttribute(logger, By.cssSelector("input[name='reportName']")) + "'";                String actual = PropUtils.getPropValue(properties, "Reports-reportType") + "'";                logger.log("Expected report name : '" + basePage.userGetTextUsingGetAttribute(logger, By.cssSelector("input[name='reportName']")) + "'");                logger.log("Actual Report name : '" + PropUtils.getPropValue(properties, "Reports-reportType") + "'");//                WebElement element = driver.findElement();                commonPage.clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.cssSelector("mat-radio-button[ng-reflect-value='" + actionOfReport + "']")));                commonPage.sleepForFewSeconds(2);                basePage.userTypeIntoTextField(logger, By.cssSelector("mat-chip-list[class='mat-chip-list']>div>input"), "srilatha.nerella@wexinc.com");                if (expected.equals(actual)) {                    newReportName = PasswordGenerator.generateAlphaNumeric(logger, 14);                    basePage.userTypeIntoTextField(logger, txtReportName, newReportName);                    PropUtils.setProps("newReportName", newReportName, baseUtils.testDataFilePath);                } else {                    logger.log("Report type : " + PropUtils.getPropValue(properties, "Reports-reportType") + " is not populated for 'Report Name' field");                }            }        }//        commonPage.clickOnButtonUsingJSExecutor(logger, "Back", "3", "span");//        commonPage.sleepForFewSeconds(2);//        commonPage.clickOnButtonUsingJSExecutor(logger, "Next", "3", "span");//        commonPage.sleepForFewSeconds(2);//        PropUtils.setProps("newReportName", "1" + newReportName, baseUtils.testDataFilePath);        commonPage.clickButtonUsingSpan(logger, "Submit");        commonPage.sleepForFewSeconds(5);    }    /*    Method to update report name in Edit Report Template page     */    public void updateReportName(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String editReportName = "Edited" + PasswordGenerator.generateAlphaNumeric(logger, 12);        basePage.userTypeIntoTextField(logger, txtReportName, editReportName);        PropUtils.setProps("newReportName", editReportName, baseUtils.testDataFilePath);    }    /*    Method to select status of user from status drop down in change status form     */    public void selectStatusInChangeStatusForm(Scenario logger, String status) {        basePage.userClick(logger, dropStatusInChangeStatusForm);        By statusLocator = By.xpath("//span[contains(text(),'On hold')]");        if (basePage.getListOfElements(logger, By.xpath("//span[contains(text(),'On hold')]")).size() > 1) {            statusLocator = By.xpath("//span[contains(text(),'Active')]");        }        basePage.userClick(logger, statusLocator);        PropUtils.setProps("reportTemplates-status", status, baseUtils.testDataFilePath);    }    /*    Method to validate filter value     */    public void validateFilterValueBasedOnNoOfFilter(Scenario logger, int filterNumber, Boolean isPropVariable, String expFieldValue) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String actValue = basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='text-ellipsis'])[" + filterNumber + "]"));        if (isPropVariable) {            expFieldValue = PropUtils.getPropValue(properties, expFieldValue);            commonPage.assertTwoStrings(logger, expFieldValue, actValue, "Filter " + filterNumber + " of value");        } else {            commonPage.assertTwoStrings(logger, expFieldValue, actValue, "Filter " + filterNumber + " of value");        }    }    /*    Method to validate success or error message of add report     */    public void validateSuccessOrErrorMessageOfAddReport(Scenario logger, String actionOfReport, String selectedRadioButton) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        List<WebElement> messages = basePage.getListOfElements(logger, By.cssSelector("div[class='header']>div"));        for (int i = 0; i <= messages.size() - 1; i++) {            if (actionOfReport.equalsIgnoreCase("Download") && (messages.size() == 1)) {                if (messages.get(i).getText().equalsIgnoreCase(PropUtils.getPropValue(properties, "Reports-reportType") + " has been downloaded")) {                    logger.log("Add report success message is : " + PropUtils.getPropValue(properties, "Reports-reportType") + " has been downloaded");                    break;                }//                commonPage.assertTwoStrings(logger, messages.get(i).getText(), PropUtils.getPropValue(properties, "Reports-reportType") + " has been downloaded", "Add report success message for download action");            } else if (actionOfReport.equalsIgnoreCase("Email full report") && (selectedRadioButton.equalsIgnoreCase("Run once"))) {                if (messages.get(i).getText().equalsIgnoreCase(PropUtils.getPropValue(properties, "Reports-reportType") + "  has been emailed")) {                    logger.log("Add report success message is : " + PropUtils.getPropValue(properties, "Reports-reportType") + "  has been emailed");                    break;                }//                commonPage.assertTwoStrings(logger, messages.get(i).getText(), PropUtils.getPropValue(properties, "Reports-reportType") + " has been emailed", "Add report success message for 'Email full report' action");            } else if (selectedRadioButton.equalsIgnoreCase("Schedule as a recurring report")) {                if (messages.get(i).getText().equals("New report template has been created")) {                    PropUtils.setProps("Success-ReportName-" + PropUtils.getPropValue(properties, "Reports-reportType").replaceAll("\\s+", ""), PropUtils.getPropValue(properties, "newReportName"), baseUtils.testDataFilePath);                }            } else if (messages.get(i).getText().equalsIgnoreCase("No additional filters available for the report type selected")) {                logger.log("No report params available for selected report type : " + " No additional filters available for the report type selected");                break;            } else {                logger.log(messages.get(i).getText());            }        }    }    /*    Method to get report types in String array     */    public String getReportTypesInStringArray(String moduleName) {        String reportTypes = "";        String query = "";        if (moduleName.equalsIgnoreCase("ReportTemplates")) {            query = "select distinct rttv.description as reportType from report_categories rc\n" +                    "inner join report_type_template_view rttv on rttv.report_category_oid = rc.report_category_oid\n" +                    "inner join user_members um on um.MEMBER_TYPE_CID = rttv.MEMBER_TYPE_CID\n" +                    "inner join users u on u.user_oid = um.user_oid\n" +                    "inner join m_clients mc on mc.client_mid = rc.client_mid\n" +                    "where mc.client_mid = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile),"ClientMID")                    + "' AND u.logon_id = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"currentUserName") + "'\n" +                    "AND (RTTV.IS_ONLINE_SCHEDULED ='Y' OR RTTV.IS_ADHOC='Y') order by initcap (rttv.description)";        } else if (moduleName.equalsIgnoreCase("Reports")) {            query = "select distinct rttv.description as reportType from report_categories rc\n" +                    "inner join report_type_template_view rttv on rttv.report_category_oid = rc.report_category_oid\n" +                    "inner join user_members um on um.MEMBER_TYPE_CID = rttv.MEMBER_TYPE_CID\n" +                    "inner join users u on u.user_oid = um.user_oid\n" +                    "inner join m_clients mc on mc.client_mid = rc.client_mid\n" +                    "where mc.client_mid = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile),"ClientMID")                    + "' AND u.logon_id = '" +  PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"currentUserName")+ "'";        }        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        for (int i = 0; i < queryResults.size() - 1; i++) {            if (i == queryResults.size() - 1) {                reportTypes = reportTypes + queryResults.get(i).get("REPORTTYPE");            } else {                reportTypes = reportTypes + queryResults.get(i).get("REPORTTYPE") + ",";            }        }        return reportTypes;    }    /*    Method to get report status ids from database     */    public String getReportStatusIdsFromDatabase(String reportStatuses) {        String[] arrReportStatuses = {reportStatuses};        String statusIds = "";        if (reportStatuses.contains(",")) {            arrReportStatuses = reportStatuses.split(",");        }        for (int i = 0; i <= arrReportStatuses.length - 1; i++) {            if (arrReportStatuses[i].equalsIgnoreCase("Active")) {                if (i == arrReportStatuses.length - 1) {                    statusIds = statusIds + "'Y'";                } else {                    statusIds = statusIds + "'Y'" + ",";                }            } else {                if (i == arrReportStatuses.length - 1) {                    statusIds = statusIds + "'N'";                } else {                    statusIds = statusIds + "'Y'" + ",";                }            }        }        return statusIds;    }    /*    Method to get contact Types with comma separated with single quotes     */    public String getReportFilterValuesInCommaSeparatedWithSingleQuotes(String reportFilter) {        String reportFilterValues = "";        String[] arrDbReportTypesForLoggedInUser = {reportFilter};        if (reportFilter.contains(",")) {            arrDbReportTypesForLoggedInUser = reportFilter.split(",");        }        for (int j = 0; j <= arrDbReportTypesForLoggedInUser.length - 1; j++) {            if (j == arrDbReportTypesForLoggedInUser.length - 1) {                reportFilterValues = reportFilterValues + "'" + arrDbReportTypesForLoggedInUser[j] + "'";            } else {                reportFilterValues = reportFilterValues + "'" + arrDbReportTypesForLoggedInUser[j] + "'" + ",";            }        }        return reportFilterValues;    }    /*   Method to click value from filter    */    public void clickValueFromFilter(Scenario logger, String filterName, String filterValue) {        By locator = By.xpath("//div[contains(text(),'" + filterName + "')]");        basePage.userClick(logger, locator);        List<WebElement> allElements = basePage.getListOfElements(logger, By.xpath("//span[text()=' " + filterValue + " ']"));        if (allElements.size() == 1) {            commonPage.clickButtonUsingSpan(logger, filterValue);        } else {            commonPage.clickUsingJSExecutor(logger, allElements.get(allElements.size() - 1));        }    }    /*    Method to search report if report present in database     */    public void searchAndValidateReport(Scenario logger, String moduleName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String accountNumber = basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='account-number']"));        PropUtils.setProps("accountNumber", accountNumber, baseUtils.testDataFilePath);        String query = "";        if (moduleName.equalsIgnoreCase("reports")) {            query = "select * from stored_reports where created_on <=sysdate and created_on >=sysdate-200\n" +                    "and MEMBER_TYPE_CID in (select member_type_cid from user_members where user_oid=(\n" +                    "select user_oid from users where logon_id = '" + PropUtils.getPropValue(                    PropUtils.getProps(baseUtils.commonPropertyFile), "currentUserName") + "'))\n" +                    "and member_oid in (select customer_mid from m_customers where customer_no='" + accountNumber + "')" +                    "order by created_on desc";        } else if (moduleName.equalsIgnoreCase("invoices")) {            query = "select * from stored_reports sr\n" +                    "inner join m_customers mcust on mcust.customer_mid = sr.member_oid\n" +                    "inner join user_members um on um.member_oid = mcust.customer_mid\n" +                    "inner join users u on u.user_oid = um.user_oid\n" +                    "and sr.created_on <=sysdate and sr.report_type_oid = 2628 \n" +                    "and sr.file_name like '%orig%' and sr.member_type_cid = 103 and u.logon_id = '" +                    PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile), "currentUserName") + "'";        }        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (queryResults.size() >= 1) {            PropUtils.setProps("accountNo", queryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);            WebElement element = null;            String getCurrentDate = commonPage.getDesiredDateInSpecificFormat(logger, "today", 0, "Past", "dd, MMMM YYYY", "dd, MMMM YYYY");            String getDesiredDate = commonPage.getDesiredDateInSpecificFormat(logger, "today", 200, "Past", "dd, MMMM YYYY", "dd, MMMM YYYY");            String getDayNumber = "";            if (moduleName.equalsIgnoreCase("reports")) {                selectFilter(logger, "Custom", 2);                if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month drp-animate']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {                    getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[contains(@class,'active start-date active end-date in-range available')]/span"));                } else if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {                    getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[contains(@class,'active start-date active end-date in-range available')]/span"));                }                element = driver.findElement(By.xpath("//td[contains(@class,'active start-date active end-date in-range available')]/span[text()='" + getDayNumber + "']"));                commonPage.clickAndPerformUsingActions(element);                handleDatePickerForPastOrFutureDateSelection(logger, getDesiredDate);//        if (queryResults.size() > 1000) {//            commonPage.validateTextUsingtag(logger, "The selected criteria has more than 1000 results. Limit the results by refining the criteria.", "div");//        }                String[] arrFileName = queryResults.get(0).get("FILE_NAME").split("/");                String fileName = arrFileName[arrFileName.length - 1];//                if (moduleName.equalsIgnoreCase("invoices")) {//                    fileName = fileName.replace("\n  ", "").trim();//                }                PropUtils.setProps(moduleName + "-fileName", fileName, baseUtils.testDataFilePath);                if (moduleName.equalsIgnoreCase("reports")) {                    enterSearchKeyWords(logger, fileName);                }                query = "select description from report_types where report_type_oid = '" + queryResults.get(0).get("REPORT_TYPE_OID") + "'";                queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);                PropUtils.setProps(moduleName + "-reportTypeOfSearchedFileName", queryResults.get(0).get("DESCRIPTION"), baseUtils.testDataFilePath);            } else if (moduleName.equalsIgnoreCase("invoices")) {                String[] arrFileName = queryResults.get(0).get("FILE_NAME").split("/");                String fileName = arrFileName[arrFileName.length - 1];                fileName = fileName.replace("\n  ", "").trim();                PropUtils.setProps(moduleName + "-fileName", fileName, baseUtils.testDataFilePath);                if (commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='issuer']>mat-select"), "ng-reflect-is-disabled").equalsIgnoreCase("false")) {                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='issuer']>mat-select"));                    basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                    commonPage.clickButtonUsingSpan(logger, "Search");                } else {                    commonPage.clickButtonUsingSpan(logger, "Search");                }            }        } else {            PropUtils.setProps("testStatus", "skipped", baseUtils.testDataFilePath);        }    }    /*    Method to handle date picker for past date selection     */    public void handleDatePickerForPastOrFutureDateSelection(Scenario logger, String getDesiredDate) {        WebElement element = null;        for (int i = 0; i <= 100; i++) {            if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month drp-animate']")).equalsIgnoreCase(getDesiredDate.substring(3).trim())) {                element = driver.findElement(By.xpath("//div[@class='calendar left ng-star-inserted']/div/table/tbody/tr/td[contains(@class,'available')]/span[text()=" + Integer.parseInt(getDesiredDate.substring(0, 2)) + "]"));                commonPage.clickUsingJSExecutor(logger, element);                break;            } else if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month']")).equalsIgnoreCase(getDesiredDate.substring(3).trim())) {                element = driver.findElement(By.xpath("//div[@class='calendar right ng-star-inserted']/div/table/tbody/tr/td[contains(@class,'available')]/span[text()=" + Integer.parseInt(getDesiredDate.substring(0, 2)) + "]"));                commonPage.clickUsingJSExecutor(logger, element);                break;            }            basePage.userClick(logger, By.xpath("(//th[@class='ng-star-inserted'])[1]"));        }        commonPage.clickApplyButtonOnDatePicker(logger);    }    /*    Method to get invoices in descending order     */    public List<Map<String, String>> getInvoicesInDescendingOrder() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select * from stored_reports where report_type_oid=(select report_type_oid from report_types\n" +                "where DESCRIPTION='Customer Statement' and client_mid=(select CLIENT_MID from M_CLIENTS  \n" +                "where SHORT_NAME='" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'))" +                "and MEMBER_TYPE_CID in (select member_type_cid from user_members\n" +                "where user_oid=(select user_oid from users where logon_id = '" +                PropUtils.getPropValue(baseUtils.inputProp, "UserName") + "'))\n" +                "and member_oid in (select customer_mid from m_customers where customer_no='" +                PropUtils.getPropValue(properties, "accountNumber") + "')\n" +                "and created_on <=sysdate and created_on >=sysdate-200 order by created_on desc";        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        return queryResults;    }    /*    Method to get latest transactions based on account     */    public List<Map<String, String>> getLatestTransactionBasedOnSelectedAccount(Scenario logger, String accountNo) {        String toDate = transactionsPage.getDesiredDateInSpecificFormat(logger, commonPage.getProcessingDateOfClient(), 1, "Past", "yyyy-MM-dd HH:mm:ss", "dd-MMM-yy");        ;        String[] toDateArr = toDate.split("-");        toDate = toDateArr[0] + "-" + toDateArr[1].toUpperCase() + "-" + toDateArr[2];        String query = "select distinct t.reference, pt.description as productTranslationDescription,\n" +                "c.description as transCategoryDescription, t.CUSTOMER_AMOUNT, t.card_no, t.effective_at from transactions t\n" +                "left join product_translations pt on pt.PRODUCT_TRANSLATION_OID = t.PRODUCT_TRANSLATION_OID\n" +                "left join constants c on c.CONSTANT_OID = t.TRANSACTION_CATEGORY_CID\n" +                "left join m_customers mcust on mcust.customer_mid = t.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + accountNo + "' and t.effective_at like '%" + toDate + "%'\n" +                "and mc.short_name = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "' order by t.effective_at desc";        logger.log(query);        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        return queryResults;    }    /*    Method to get latest transactions count based on account     */    public String getTransactionRecordCount(String accountNo) {        String query = "select count(*) from transactions t\n" +                "left join product_translations pt on pt.PRODUCT_TRANSLATION_OID = t.PRODUCT_TRANSLATION_OID\n" +                "left join products p on p.PRODUCT_OID = t.PRODUCT_OID\n" +                "left join constants c on c.CONSTANT_OID = t.TRANSACTION_CATEGORY_CID\n" +                "left join m_customers mcust on mcust.customer_mid = t.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + accountNo + "' order by t.effective_at desc";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return queryResults.get("COUNT(*)");    }    /*    Method to get report record count     */    public int getReportRecordCount(String accountNo) {        String query = "select count(*) from stored_reports where report_type_oid != 3402 and created_on <=sysdate and created_on >=sysdate-30\n" +                "and MEMBER_TYPE_CID in (select member_type_cid from user_members where user_oid=(\n" +                "select user_oid from users where logon_id = '" + PropUtils.getPropValue(baseUtils.inputProp, "UserName") + "'))\n" +                "and member_oid in (select customer_mid from m_customers where customer_no='" + accountNo + "')\n" +                "order by created_on desc";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return Integer.parseInt(queryResults.get("COUNT(*)"));    }    /*    Method to select account from account picker which is having or not having transactions     */    public void selectAnAccountBasedOnTransactionAvailability(Scenario logger, String isHavingOrNot, String recordsType) {        String query = "select mcust.customer_no from m_customers mcust\n" +                "inner join user_members um on um.member_oid = mcust.customer_mid\n" +                "inner join users u on u.user_oid = um.user_oid\n" +                "where u.logon_id = '" + PropUtils.getPropValue(baseUtils.inputProp, "UserName") + "'";        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        int records = 0;        for (int i = 0; i <= queryResults.size() - 1; i++) {            if (!queryResults.get(i).get("CUSTOMER_NO").equalsIgnoreCase("0700000006")) {                if (recordsType.equalsIgnoreCase("transactions")) {                    records = Integer.parseInt(getTransactionRecordCount(queryResults.get(i).get("CUSTOMER_NO")));                }                if (recordsType.equalsIgnoreCase("reports")) {                    records = getReportRecordCount(queryResults.get(i).get("CUSTOMER_NO"));                }                if (records > 0 && isHavingOrNot.equalsIgnoreCase("is")) {                    commonPage.selectAccountFromAccountPickerBasedOnAccountNo(logger, queryResults.get(i).get("CUSTOMER_NO"));                    break;                } else if (records == 0 && isHavingOrNot.equalsIgnoreCase("not")) {                    commonPage.selectAccountFromAccountPickerBasedOnAccountNo(logger, queryResults.get(i).get("CUSTOMER_NO"));                    break;                }                if (i == queryResults.size() - 1) {                    PropUtils.setProps(baseUtils.testDataFilePath, "testStatus", "skipped");                }            }        }//        if (recordsType.equalsIgnoreCase("reports")){////        }    }    /*    Method to validate latest 4 records data based on recordType     */    public void validateRecordDataBaseOnRecordType(Scenario logger, String recordType) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        List<Map<String, String>> queryResults = null;        List<WebElement> elements = basePage.getListOfElements(logger, By.cssSelector("div[class='header-fields']>mat-grid-list>div"));        List<WebElement> childElements = null;        Map<String, String> latestRecord = null;        if (recordType.equalsIgnoreCase("recent transactions")) {            queryResults = getLatestTransactionBasedOnSelectedAccount(logger, PropUtils.getPropValue(properties, "accountNumber"));            for (int i = 0; i <= queryResults.size() - 1; i++) {                childElements = elements.get(i).findElements(By.cssSelector("mat-grid-tile>figure>div>div"));                latestRecord = getTransactionRecordBasedOnReference(logger, childElements.get(3).getText(), queryResults);                commonPage.assertTwoStrings(logger, latestRecord.get("REFERENCE"), childElements.get(3).getText(), "Reference");//                commonPage.assertTwoStrings(logger,getProductDescriptionBasedOnPriority(latestRecord),childElements.get(0).getText(),"ProductDescription");                commonPage.assertTwoStrings(logger, commonPage.getCurrencySymbolBasedOnClientCountry() + " " + commonPage.truncateDecimal(Double.valueOf(latestRecord.get("CUSTOMER_AMOUNT")), 2), childElements.get(1).getText(), "Customer Amount");                if (childElements.get(2).getText().contains(commonPage.takeLastCharactersOfString(latestRecord.get("CARD_NO"), 5))) {                    logger.log("ExpectedCardNumber : " + childElements.get(2).getText() + " actual Card Number : " + commonPage.takeLastCharactersOfString(latestRecord.get("CARD_NO"), 5));                }                if (i == 3) {                    break;                }            }        }        if (recordType.equals("recent Reports")) {            int transCount = Integer.parseInt(getTransactionRecordCount(PropUtils.getPropValue(properties, "accountNumber")));            if (transCount > 4 || transCount == 4) {                transCount = 4;            }            String query = "select report_type_oid from stored_reports where report_type_oid != 3402 and created_on <=sysdate and created_on >=sysdate-30\n" +                    "and MEMBER_TYPE_CID in (select member_type_cid from user_members where user_oid=(\n" +                    "select user_oid from users where logon_id = '" +                    PropUtils.getPropValue(baseUtils.inputProp, "UserName") + "'))\n" +                    "and member_oid in (select customer_mid from m_customers where customer_no='" +                    PropUtils.getPropValue(properties, "accountNumber") + "')\n" +                    "order by created_on desc";            queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);            for (int i = transCount; i <= queryResults.size() - 1; i++) {                childElements = elements.get(i).findElements(By.cssSelector("mat-grid-tile>figure>div>div"));                latestRecord = getTransactionRecordBasedOnReference(logger, childElements.get(transCount).getText(), queryResults);                query = "select rt.report_type_oid from report_types rt\n" +                        "inner join m_clients mc on mc.client_mid = rt.client_mid\n" +                        "where mc.short_name = '" +                        PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry)                        + "' and rt.description  = '" + childElements.get(transCount).getText() + "'";                Map<String, String> reportRecord = commonUtils.getQueryResultsOnMap(query);                commonPage.assertTwoStrings(logger, queryResults.get(i).get("REPORT_TYPE_OID"), reportRecord.get("REPORT_TYPE_OID"), "Report Type");                if (i == transCount + 3) {                    break;                }            }        }    }    /*    Method to get transaction record based on reference number     */    public Map<String, String> getTransactionRecordBasedOnReference(Scenario logger, String reference, List<Map<String, String>> transactions) {        Map<String, String> transactionRecord = null;        for (int i = 0; i <= transactions.size() - 1; i++) {            if (transactions.get(i).get("REFERENCE").equals(reference)) {                transactionRecord = transactions.get(i);                break;            }            if (i == transactions.size() - 1) {                logger.log("Transaction record is not present for reference number " + reference);            }        }        return transactionRecord;    }    /*    Method to get product description of transaction based on reference     */    public String getProductDescriptionBasedOnPriority(Map<String, String> transactionRecord) {        String productDescription = transactionRecord.get("PRODUCTDESCRIPTION");        if (productDescription == null) {            productDescription = transactionRecord.get("PRODUCTTRANSLATIONDESCRIPTION");            if (productDescription == null) {                productDescription = transactionRecord.get("TRANSCATEGORYDESCRIPTION");            }        }        return productDescription;    }}