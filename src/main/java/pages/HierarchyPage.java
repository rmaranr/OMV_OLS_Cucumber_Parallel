package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.apache.commons.lang3.StringUtils;import org.junit.Assert;import org.openqa.selenium.*;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.DataBaseUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.concurrent.Future;public class HierarchyPage {    private WebDriver driver;    private BasePage basePage;    CommonDBUtils commonUtils;    private BaseUtils baseUtils;    private CommonPage commonPage;    private UsersPage usersPage;    private CostCentresPage costCentresPage;    private OMVContextPage omvContextPage;    private Properties properties;    private String query;    public Scenario logger;    /* Constructor to get the driver object */    public HierarchyPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);        costCentresPage = new CostCentresPage(driver);        omvContextPage = new OMVContextPage(driver);        properties = PropUtils.getProps(baseUtils.testDataFile);        usersPage = new UsersPage(driver);    }    private static final By threeDots = By.xpath("//div/div/div[2]/button/div/mav-svg-icon/fa-icon");    private static final By threeDotsWithPlus =By.xpath("//fa-icon[@ng-reflect-icon='far,ellipsis-v']");    private static final By  accountNum = By.xpath("//mav-input/input[@type='number']");    private static final By search = By.xpath("//mav-button/button/span/span[contains(text(),'Search')]");    private static final By radiobutton = By.xpath("//div[@class='mat-radio-container']");    private static final By payerNode = By.xpath("//mat-checkbox[@ng-reflect-value='Payer node']");    private static final By authorization = By.xpath("//mat-checkbox[@ng-reflect-value='Authorization node']");    private static final By nextButton = By.xpath("//button/span[contains(text(),' Next ')]");    private static final By button = By.xpath("//button[@id='submit-button']");    private static final By expand = By.xpath("//fa-icon[@ng-reflect-icon='fas,plus-square']");    private static final By dates = By.xpath("//mav-input");    private static final By checkBoxAuth = By.xpath("//div/input[@value='Authorization node']");    private static final By hierarchy = By.xpath("//div[@class='tree-table-row-content']");    private static final By save = By.xpath("//span[contains(text(),' Save')]");    private static final By submit = By.xpath("//span[contains(text(),' Submit')]");    private static final By Next = By.xpath("//span[contains(text(),' Next')]");    private static final By validationError = By.xpath("//mav-info-box/div/div[1]/div");    private static final By cancel = By.xpath("//a[contains(text(),'Cancel')]");    private static final By addNew = By.xpath("//mav-button[@class='add-button']");    private static final By editOption = By.xpath("//button[contains(text(),'Edit')]");    private static final By approveOption = By.xpath("//button[contains(text(),'Approve')]");    private static final By declineOption = By.xpath("//button[contains(text(),'Decline')]");    private static final By addChildAccount = By.xpath("//button[contains(text(),'Add child account')]");    private static final By profile = By.xpath("//mav-button[@id='user-profile-btn']/button/span");    private static final By childSuccess = By.xpath("//div[contains(text(),'Account has been added')]");    public void clickOnThreeDots(Scenario logger)    {        try {            basePage.userClick(logger,threeDots);            logger.log("clicked on three dots");        }catch (Exception e){            logger.log("Not clicked on three dots");        }    }    public void clickOnThreeDotsWithPlus(Scenario logger)    {        try {            commonPage.sleepForFewSeconds(4);            List<WebElement> elements = driver.findElements(threeDotsWithPlus);            elements.get(0).click();            logger.log("clicked on three dots");        }catch (Exception e){            logger.log("Not clicked on three dots");        }    }    public void selectAccountMenuOption(Scenario logger, String option){        try {            commonPage.sleepForFewSeconds(8);            costCentresPage.clickButtonUsingItsText(logger,option );            logger.log("Select menu option :: "+option);        }catch (Exception e){            logger.log("Menu option not selected"+option);        }    }    public  void searchForChildAccount(Scenario logger, String accountNo){        properties = PropUtils.getProps(baseUtils.testDataFile);        try {            commonPage.sleepForFewSeconds(2);//            if(commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']"),"ng-reflect-value").equalsIgnoreCase(PropUtils.getPropValue(properties,"Country"))) {//                logger.log("Required country '" + PropUtils.getPropValue(properties,"Country") + "' has been selected from Accounts page");//            }else{//                basePage.userClick(logger,By.cssSelector("mav-select[ng-reflect-name='country']"));//                commonPage.clickButtonUsingSpan(logger,PropUtils.getPropValue(properties,"Country"));//            }            basePage.userTypeIntoTextField(logger,accountNum,accountNo);            commonPage.sleepForFewSeconds(3);            basePage.userClick(logger,search);            logger.log("Child account sucessfully searched");        }catch (Exception e){            logger.log("Not able to search child account");        }    }    public void  selectAccountFromSearchResults(Scenario logger){        try {            commonPage.sleepForFewSeconds(3);            basePage.userClick(logger,radiobutton);            commonPage.sleepForFewSeconds(2);            basePage.userClick(logger,nextButton);            logger.log("Account selected from search results");        }catch (Exception e){            logger.log("Account not selected from search results");        }    }    public void fillDetailsInAccountConfigurationPOpUp(Scenario logger, String days){        try {            if(PropUtils.getPropValue(properties,"hierarchyWithExp").equalsIgnoreCase("hierarchyWithExp")){                    days = PropUtils.getPropValue(properties,"daysEffective");                String[] dateToBeSelected = commonPage.getDesiredDateInSpecificFormat(logger,commonPage.getClientProcessingDate().split(" ")[0],Integer.parseInt(days),"future","yyyy-MM-dd","dd-MMM-yyyy").split("-");                basePage.userClick(logger, By.xpath("//mav-input[@class='ng-untouched ng-pristine ng-invalid']"));                commonPage.handleDatePickerForPastOrFutureDateSelection(logger,dateToBeSelected[1],dateToBeSelected[0],dateToBeSelected[2]);            }else {                omvContextPage.userClickOnDateFieldAndSelectValueNoOfDays(logger, "effectiveDate", days, "Past", "today", "dd, MMM yyyy");            }            basePage.userClick(logger,authorization);            commonPage.sleepForFewSeconds(2);            List<WebElement> elements = driver.findElements(button);            if(elements.size()==2) {                elements.get(1).click();            }else if(elements.size()==1){                elements.get(0).click();            }            PropUtils.setProps("Authorization","on",baseUtils.testDataFilePath);            logger.log("Account configured and clicked on submit button");            basePage.whetherElementPresent(logger,childSuccess);            commonPage.sleepForFewSeconds(3);            basePage.userClick(logger,button);        }catch (Exception e){            logger.log("Account not configured or not click on submit button");        }    }    public void expandParentAccount(Scenario logger){        commonPage.sleepForFewSeconds(5);        try {            driver.findElement(expand).click();        } catch (Exception e) {            JavascriptExecutor executor = (JavascriptExecutor) driver;            executor.executeScript("arguments[0].click();", driver.findElement(expand));        }    }    public void validateAccountConfigurationDetails(Scenario logger){        properties = PropUtils.getProps(baseUtils.testDataFile);        String expectedEffectiveDate = PropUtils.getPropValue(properties,"Date-effectiveDate");        String expectedEndDate =PropUtils.getPropValue(properties,"Date-endDate");        List <WebElement> elements = driver.findElements(dates);        logger.log("printing elements :::"+elements);        logger.log("Size of list::"+elements.size());        commonPage.sleepForFewSeconds(2);        String dateFromUI = elements.get(0).getAttribute("ng-reflect-value");        String[] splitedDates = StringUtils.split(dateFromUI);        String date = splitedDates[2]+", "+splitedDates[1]+" "+splitedDates[3];        String endDatefromUI = elements.get(1).getAttribute("ng-reflect-value");        String[] splitedEndDates = StringUtils.split(endDatefromUI);        String endDate = splitedEndDates[2]+", "+splitedEndDates[1]+" "+splitedEndDates[3];        String actualEffectiveDate = commonPage.getDesiredDateInSpecificFormat(logger,date,0,"Past","dd, MMM yyyy","dd/MM/yyyy");        String actualEndDate = commonPage.getDesiredDateInSpecificFormat(logger,endDate,0,"Past","dd, MMM yyyy","dd/MM/yyyy");        commonPage.assertTwoStrings(logger,expectedEffectiveDate,actualEffectiveDate,"Effective date");        commonPage.assertTwoStrings(logger,expectedEndDate,actualEndDate,"End date");        Boolean isSelected = basePage.isCheckBoxSelected(logger,checkBoxAuth);        logger.log("is selected value is " + isSelected);        Assert.assertTrue(isSelected);    }    public void editAccountConfigurationPOpUp(Scenario logger, String days){        try {            basePage.userClick(logger,payerNode);            commonPage.sleepForFewSeconds(2);            omvContextPage.userClickOnDateFieldAndSelectValueNoOfDays(logger,"effectiveDate",days,"future","today","dd, MMM yyyy");            commonPage.sleepForFewSeconds(2);            List<WebElement> elements = driver.findElements(button);            elements.get(1).click();            PropUtils.setProps("payerNode","on",baseUtils.testDataFilePath);            logger.log("Edited the Account configuration and clicked on submit button");        }catch (Exception e){            logger.log("nor edited Account configuration or not click on submit button");        }    }    public void goToHierarchyTab(Scenario logger, String hierarchyType){        try {            By locator = By.xpath("//div[contains(text(),'"+hierarchyType+"')]");            basePage.userClick(logger,locator);            commonPage.sleepForFewSeconds(5);            logger.log("Navigated to "+hierarchyType);        }catch (Exception e){            logger.log("Not navigated to "+hierarchyType);        }    }    public void validateHierarchyPresence(Scenario logger){        try {            Assert.assertTrue(driver.findElement(hierarchy).isDisplayed());            logger.log("Hierarchy displayed");        }catch (Exception e){            logger.log("Hierarchy not displayed");        }    }    public void selectExpiryDateAndSave(Scenario logger,String days){        try {            omvContextPage.userClickOnDateFieldAndSelectValueNoOfDays(logger,"Expiration Date",days, "Past","today","dd, MMM yyyy");            basePage.userClick(logger,save);            logger.log("Expiry date selected");        }catch (Exception e){            logger.log("Expiry date not selected");        }    }    public void expiryTheChildHierarchy(Scenario logger,String days){        try {            expandParentAccount(logger);            clickOnThreeDotsWithPlus(logger);            selectAccountMenuOption(logger,"Expire");            selectExpiryDateAndSave(logger,days);        }catch (Exception e){            logger.log("unable to expiry the chilid account");        }    }    /*    Method to handle expiry child account hierarchy based on index     */    public void expiryTheChildHierarchyBasedOnPosition(Scenario logger,String days, int positionOfChildAccount, String currentDate, String currentDateFormat){      //  clickOnThreeDotsWithPlus(logger);        //selectAccountMenuOption(logger, "Approve ");        try {            basePage.userClick(logger,By.xpath("(//fa-icon[@ng-reflect-icon='far,ellipsis-v'])["+positionOfChildAccount+"]"));            selectAccountMenuOption(logger,"Edit");            omvContextPage.userClickOnDateFieldAndSelectValueNoOfDays(logger,"Expiry",days, "Past",currentDate,currentDateFormat);            List<WebElement> elements = driver.findElements(button);            logger.log("element size"+ elements.size());            if(elements.size()==2) {                elements.get(1).click();            }else if(elements.size()==1) {                elements.get(0).click();            }        }catch (Exception e){            logger.log("unable to expiry the chilid account");        }    }    public void expiryTheParentHierarchy(Scenario logger, String days,String currentDate, String currentDateFormat){        //clickOnThreeDotsWithPlus(logger);        //selectAccountMenuOption(logger, "Approve ");        try {            basePage.userClick(logger,By.xpath("(//fa-icon[@ng-reflect-icon='far,ellipsis-v'])[1]"));            selectAccountMenuOption(logger,"Edit");            omvContextPage.userClickOnDateFieldAndSelectValueNoOfDays(logger,"Expiration Date",days, "Past",currentDate,currentDateFormat);            basePage.userClick(logger,Next);            commonPage.sleepForFewSeconds(3);            basePage.userClick(logger,submit);            logger.log("able to expiry the parent account");            commonPage.sleepForFewSeconds(10);        }catch (Exception e){            logger.log("unable to expiry the parent account");        }    }    public void expiryTheChildHierarchyAndValidateError(Scenario logger,String days){        try {            clickOnThreeDotsWithPlus(logger);            selectAccountMenuOption(logger,"Approve ");            expandParentAccount(logger);            clickOnThreeDots(logger);            selectAccountMenuOption(logger,"Expire");            selectExpiryDateAndSave(logger,days);            String error = basePage.userGetTextFromWebElement(logger,validationError);            Assert.assertEquals(error,"Validation failed");            basePage.userClick(logger,cancel);        }catch (Exception e){            logger.log("unable to expiry the chilid account");        }    }    public void expiryTheParentHierarchyAndvalidateError(Scenario logger, String days, String currentDate, String currentDateFormat){        try {            clickOnThreeDotsWithPlus(logger);           // selectAccountMenuOption(logger,"Approve ");            //clickOnThreeDotsWithPlus(logger);            selectAccountMenuOption(logger,"Edit");            omvContextPage.userClickOnDateFieldAndSelectValueNoOfDays(logger,"Expiration Date",days, "Past",currentDate,currentDateFormat);            usersPage.scrollDown(logger);            commonPage.sleepForFewSeconds(2);            commonPage.clickOnButtonUsingJSExecutor(logger, "Next", "1", "span");            basePage.userClick(logger,submit);            String error = basePage.userGetTextFromWebElement(logger,validationError);            Assert.assertEquals(error,"Child record date is outside of the date range of the parent record");            basePage.userClick(logger,cancel);            goToHierarchyTab(logger,"Rebates");            goToHierarchyTab(logger,"Financial management");        }catch (Exception e){            logger.log("unable to expiry the parent account");        }    }    /*    Method to validate hierarchy data in specific section     */    public void validateHierarchyDataInSpecificSection(Scenario logger,String hierarchySection){        properties = PropUtils.getProps(baseUtils.testDataFile);        StringBuffer sb = new StringBuffer();        if(hierarchySection.equalsIgnoreCase("Financial management")){            sb.append("h.IS_CUSTOMER_FINANCIAL = 'Y' and (h.IS_PERIOD_REBATE = 'N' or h.IS_PERIOD_REBATE = 'Y')");        }else if(hierarchySection.equalsIgnoreCase("Rebates")){            sb.append("(h.IS_CUSTOMER_FINANCIAL = 'Y' or h.IS_CUSTOMER_FINANCIAL = 'N') and h.IS_PERIOD_REBATE = 'Y'");        }        commonPage.clickButtonUsingSpecificTagName(logger,hierarchySection,"div");        String query = "select distinct r.parent_relationship_oid from hierarchies h\n" +                "left join m_customers mcust on mcust.customer_mid = h.owning_member_oid\n" +                "left join relationships r on r.HIERARCHY_OID = h.HIERARCHY_OID\n" +                "left join m_customers mcustr on mcustr.customer_mid = r.member_oid\n" +                "left join relationship_assignments ra on ra.RELATIONSHIP_OID = r.RELATIONSHIP_OID\n" +                "where mcust.customer_no = '"+PropUtils.getPropValue(properties,"havingHierarchy-accountNumber")+"' and r.relationship_oid != r.parent_relationship_oid\n" +                "and " + sb.toString() + "\n"+                "and h.IS_LOCATION = 'N' and h.IS_CUSTOMER_REPORTS = 'N'";        List<Map<String, String>> allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        for(int i =0;i<=allRowsOfQueryResults.size()-1;i++){            basePage.userClick(logger,expand);        }        query = "select mcustr.name,\n" +                "mcustr.customer_no,ra.IS_BILLING_ENTITY,ra.IS_AUTHORISATION_ENTITY,ra.IS_PAYER_ENTITY," +                "ra.effective_on,ra.expires_on from hierarchies h\n" +                "left join m_customers mcust on mcust.customer_mid = h.owning_member_oid\n" +                "left join relationships r on r.HIERARCHY_OID = h.HIERARCHY_OID\n" +                "left join m_customers mcustr on mcustr.customer_mid = r.member_oid\n" +                "left join relationship_assignments ra on ra.RELATIONSHIP_OID = r.RELATIONSHIP_OID\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n"+                "where mcust.customer_no = '"+PropUtils.getPropValue(properties,"havingHierarchy-accountNumber")                +"'and " + sb.toString() + "\n"+                "and h.IS_LOCATION = 'N' and h.IS_CUSTOMER_REPORTS = 'N' and mc.client_mid = "+                PropUtils.getPropValue(properties,"ClientMID");        logger.log(query);        List<WebElement> hierarchyData = new ArrayList<>();        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        StringBuffer effDate = new StringBuffer();        StringBuffer expDate = new StringBuffer();        for(int i=0;i<=allRowsOfQueryResults.size()-1;i++){            hierarchyData = basePage.getListOfElements(logger,By.xpath("(//div[@class='tree-table-col-data']/mat-grid-list)["+(i+1)+"]/div/mat-grid-tile/figure/div/div"));//            for(int j=0;j<=hierarchyData.size()-1;j++) {            if (allRowsOfQueryResults.get(i).get("CUSTOMER_NO").equalsIgnoreCase(basePage.userGetTextFromWebElement(logger, By.xpath("((//div[@class='tree-table-col-data']/mat-grid-list)[" + (i + 1) + "]/div/mat-grid-tile/figure/div/div)[3]")))) {                effDate.delete(0,effDate.length());                expDate.delete(0,expDate.length());                effDate.append(allRowsOfQueryResults.get(i).get("EFFECTIVE_ON"));                expDate.append(allRowsOfQueryResults.get(i).get("EXPIRES_ON"));                commonPage.assertTwoStrings(logger,allRowsOfQueryResults.get(i).get("NAME"),basePage.userGetTextFromWebElement(logger, By.xpath("((//div[@class='tree-table-col-data']/mat-grid-list)[" + (i + 1) + "]/div/mat-grid-tile/figure/div/div)[1]")),"Customer Name");                commonPage.assertTwoStrings(logger,commonPage.getDesiredDateInSpecificFormat(logger,effDate.substring(0,10),0,"Future","yyyy-mm-dd","dd/mm/yyyy")+" - "+commonPage.getDesiredDateInSpecificFormat(logger,expDate.substring(0,10),0,"Future","yyyy-mm-dd","dd/mm/yyyy"),basePage.userGetTextFromWebElement(logger, By.xpath("((//div[@class='tree-table-col-data']/mat-grid-list)[" + (i + 1) + "]/div/mat-grid-tile/figure/div/div)[2]")),"Effective and Expiry dates");                commonPage.assertTwoStrings(logger,allRowsOfQueryResults.get(i).get("CUSTOMER_NO"),basePage.userGetTextFromWebElement(logger, By.xpath("((//div[@class='tree-table-col-data']/mat-grid-list)[" + (i + 1) + "]/div/mat-grid-tile/figure/div/div)[3]")),"Customer no");                commonPage.assertTwoStrings(logger,getNodesBasedOnItsDBValue(allRowsOfQueryResults.get(i).get("IS_AUTHORISATION_ENTITY"),allRowsOfQueryResults.get(i).get("IS_BILLING_ENTITY"),allRowsOfQueryResults.get(i).get("IS_PAYER_ENTITY")),basePage.userGetTextFromWebElement(logger, By.xpath("((//div[@class='tree-table-col-data']/mat-grid-list)[" + (i + 1) + "]/div/mat-grid-tile/figure/div/div)[4]")),"Nodes");//                }            }        }    }    /*    Method to get node details based on value from database     */    public String getNodesBasedOnItsDBValue(String authorisationNode, String billingNode,String payerNode){        String node = "";        if(authorisationNode.equalsIgnoreCase("Y")){            node = node+"Authorization node,";        }if(billingNode.equalsIgnoreCase("Y")){            node = node+"Biller node,";        }if(payerNode.equalsIgnoreCase("Y")){            node = node+"Payer node";        }        return node;    }    /*    Method to get child accounts for a specific customer     */    public List<Map<String, String>> getChildAccountsForASpecificCustomer(Scenario logger, String accountNumber, String allAccountsOrChildAccounts){        String query = "select mcust.customer_no,ra.expires_on from hierarchies h \n" +                "left join relationships r on r.hierarchy_oid = h.hierarchy_oid \n" +                "left join relationship_assignments ra on ra.relationship_oid = r.relationship_oid\n" +                "left join m_customers mcust on mcust.customer_mid = h.owning_member_oid\n" +                "left join m_customers mcust1 on mcust1.customer_mid = r.member_oid \n" +                "where mcust1.customer_no = '"+accountNumber+"'";        Map<String, String>queryResults = commonUtils.getQueryResultsOnMap(query);        PropUtils.setProps("parentAccountExpiryDate",queryResults.get("EXPIRES_ON"),baseUtils.testDataFilePath);        if(allAccountsOrChildAccounts.equalsIgnoreCase("All")){            query = "select mcust1.customer_no,ra.EFFECTIVE_ON,ra.expires_on from hierarchies h\n" +                    "left join relationships r on r.hierarchy_oid = h.hierarchy_oid\n" +                    "left join relationship_assignments ra on ra.relationship_oid = r.relationship_oid\n" +                    "left join m_customers mcust on mcust.customer_mid = h.owning_member_oid\n" +                    "left join m_customers mcust1 on mcust1.customer_mid = r.member_oid\n" +                    "where mcust.customer_no = '"+queryResults.get("CUSTOMER_NO")+"'  " +                    "and ra.expires_on > CURRENT_TIMESTAMP+1 and ra.effective_on < CURRENT_TIMESTAMP-1";        }else{            query = "select mcust1.customer_no,ra.EFFECTIVE_ON,ra.expires_on from hierarchies h\n" +                    "left join relationships r on r.hierarchy_oid = h.hierarchy_oid\n" +                    "left join relationship_assignments ra on ra.relationship_oid = r.relationship_oid\n" +                    "left join m_customers mcust on mcust.customer_mid = h.owning_member_oid\n" +                    "left join m_customers mcust1 on mcust1.customer_mid = r.member_oid\n" +                    "where mcust.customer_no = '"+queryResults.get("CUSTOMER_NO")+"' and r.relationship_oid != r.parent_relationship_oid  and ra.expires_on > CURRENT_TIMESTAMP+1 and ra.effective_on < CURRENT_TIMESTAMP-1";        }        logger.log(query);        return commonUtils.getAllRowsOfQueryResultsOnListMap(query);    }    /*    Method to get difference between effective and expiry date     */    public int getDifferenceBetweenEffectiveAndExpiryDate(String positionOfElement){        return basePage.differnceOfTwoDates(logger,basePage.userGetTextFromWebElement(logger,By.xpath("((//div[@class='tree-table-col-data']/mat-grid-list)["+positionOfElement+"]/div/mat-grid-tile/figure/div/div)[2]")).split("-")[0].trim(),basePage.userGetTextFromWebElement(logger,By.xpath("((//div[@class='tree-table-col-data']/mat-grid-list)["+positionOfElement+"]/div/mat-grid-tile/figure/div/div)[2]")).split("-")[1].trim(),"dd/MM/yyyy");    }    public String validateAddButtonState(Scenario logger){            return driver.findElement(addNew).getAttribute("ng-reflect-disabled");    }    public String validateEditOptionStateForHierarchy(Scenario logger){        commonPage.sleepForFewSeconds(4);        List<WebElement> elements = driver.findElements(threeDotsWithPlus);        elements.get(0).click();        logger.log("clicked on three dots");        commonPage.sleepForFewSeconds(3);        return driver.findElement(editOption).getAttribute("ng-reflect-disabled");    }    public String validateApprovedOptionStateForHierarchy(Scenario logger){        commonPage.sleepForFewSeconds(4);        List<WebElement> elements = driver.findElements(threeDotsWithPlus);        elements.get(0).click();        logger.log("clicked on three dots");        commonPage.sleepForFewSeconds(3);        String value = driver.findElement(approveOption).getAttribute("ng-reflect-disabled");        JavascriptExecutor js = ((JavascriptExecutor) driver);        js.executeScript("arguments[0].scrollIntoView(true);", basePage.getWebElementUsingLocator(logger, profile));        commonPage.clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger, profile));        commonPage.sleepForFewSeconds(3);        return value;    }    public String validateDeclineOptionStateForHierarchy(Scenario logger){        commonPage.sleepForFewSeconds(4);        List<WebElement> elements = driver.findElements(threeDotsWithPlus);        elements.get(0).click();        logger.log("clicked on three dots");        commonPage.sleepForFewSeconds(3);        return driver.findElement(declineOption).getAttribute("ng-reflect-disabled");    }    public String validateAddChildAccountOptionStateForHierarchy(Scenario logger){        commonPage.sleepForFewSeconds(4);        return driver.findElement(addChildAccount).getAttribute("ng-reflect-disabled");    }}