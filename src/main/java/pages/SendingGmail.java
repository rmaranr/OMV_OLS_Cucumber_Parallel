package pages;import com.paulhammant.ngwebdriver.NgWebDriver;import io.cucumber.java.Scenario;import org.junit.Assert;import org.openqa.selenium.*;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import utilities.api.BaseUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import java.awt.*;import java.awt.datatransfer.Clipboard;import java.awt.datatransfer.StringSelection;import java.awt.event.KeyEvent;import java.util.NoSuchElementException;public class SendingGmail {    private WebDriver driver;    private BasePage basePage;    private GmailPage gmailPage;    private BaseUtils baseUtils;    public Scenario logger;    public SendingGmail() {        basePage = new BasePage(driver);        baseUtils = new BaseUtils();    }    //Locators of gmail page    private static final By txtEmailOrPhone = By.id("identifierId");    private static final By btnNext = By.xpath("//span[text()='Next']");    private static final By txtUserName = By.name("username");    private static final By txtPassWord = By.name("password");    private static final By btnSignIn = By.id("okta-signin-submit");    private static final By btnCompose = By.xpath("//div[contains(text(),'Compose')]");    private static final By iconAttachment = By.xpath("//div[contains(@aria-label,'Attach files')]");    private static final By txtTo = By.name("to");    private static final By txtSubject = By.name("subjectbox");    private static final By btnSend = By.xpath("//div[text()='Send']");    public void sendEmailWithAttachment(String folderPath) {//        basePage.launchSpecifiedBrowser("chrome");        this.driver = basePage.getDriver();        gmailPage = new GmailPage(driver);        driver.navigate().to("https://www.gmail.com");//        userTypeIntoTextField(txtEmailOrPhone, PropUtils.getPropValue(baseUtils.inputProp, "EmailID"));//        userClick(btnNext);        userTypeIntoTextField(txtUserName, PropUtils.getPropValue(baseUtils.inputProp, "EmailID"));        userTypeIntoTextField(txtPassWord, gmailPage.getDecodePassword(PropUtils.getPropValue(baseUtils.inputProp, "EmailPassword")));        userClick(btnSignIn);        userClick(btnCompose);        sleep(3000);        userTypeIntoTextField(txtTo, "srilatha.nerella@wexinc.com");        userTypeIntoTextField(txtSubject, "UIAutomationReport");        userClick(iconAttachment);        sleep(3000);        uploadFileWithRobot(folderPath);        sleep(5000);        userClick(btnSend);        sleep(5000);        driver.quit();    }    // To enter text into given web element.    private void userTypeIntoTextField(By locator, String enterText, int... timeInSeconds) {        int givenWaitTime = 30;        try {            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementClickable(locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                webelement.clear();                webelement.sendKeys(enterText);//                logger.log("Able to enter value: "+"'" + enterText + "'"+" in to the given web element: "+"'" + locator +"'");            }        } catch (NoSuchElementException e) {//            logger.log("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime + " Seconds"//                    + " - NoSuchElementException");//            //ExtentReportListener.//testStepHandle("FAIL",driver,loggerger,e);            Assert.fail("Given web element: " + locator + " was not found in DOM in time - " + givenWaitTime                    + " Seconds" + " - NoSuchElementException");        } catch (Exception e) {//            logger.log("Given web element: " + locator + " was not clickable" + e);//            //ExtentReportListener.//testStepHandle("FAIL",driver,loggerger,e);            Assert.fail("Given web element: " + locator + " was not found on the web page");        }    }    private boolean whetherElementClickable(By locator, int... givenTimeInSeconds) {        int timeInSeconds = toGetGivenAmountOfTime(givenTimeInSeconds);        boolean elementClickable = false;        try {            WebDriverWait wait = new WebDriverWait(driver, timeInSeconds);            wait.until(ExpectedConditions.elementToBeClickable(locator));            NgWebDriver ngWebDriver = new NgWebDriver((JavascriptExecutor) driver);            ngWebDriver.waitForAngularRequestsToFinish();            if (driver.findElement((locator)).isDisplayed()) {                elementClickable = true;//                logger.log("Given element locator : " + locator + " is displayed and is clickable");            }        } catch (org.openqa.selenium.NoSuchElementException e) {//            logger.log("Unable to find " + locator + " in DOM in time " + timeInSeconds//                    + " Seconds - NoSuchElementException");            Assert.fail("Unable to find " + locator + " in DOM in time " + timeInSeconds                    + " Seconds - NoSuchElementException");        } catch (TimeoutException e) {//            logger.log(locator + " was not displayed in time - " + timeInSeconds + " Seconds - TimeoutException");//            //ExtentReportListener.//testStepHandle("FAIL",driver,loggerger,e);            Assert.fail(locator + " was not displayed in time - " + timeInSeconds + " Seconds - TimeoutException");        } catch (Exception e) {//            logger.log(locator + "was not displayed - " + e);//            //ExtentReportListener.//testStepHandle("FAIL",driver,loggerger,e);            Assert.fail(locator + " was not displayed");        }        return elementClickable;    }    private int toGetGivenAmountOfTime(int[] waitTimeArray) {        if (waitTimeArray.length <= 0) {            return 30;        } else {            return waitTimeArray[0];        }    }    private void userClick(By locator, int... timeInSeconds) {        int givenWaitTime = 30;        try {            givenWaitTime = toGetGivenAmountOfTime(timeInSeconds);            if (whetherElementClickable(locator, givenWaitTime)) {                WebElement webelement = driver.findElement(locator);                webelement.click();//                logger.log("Clicked on the given web element: '" + locator+"'");            } else {//                logger.log("Given web element: '" + locator + "' is not clickable");                Assert.fail(                        "Given web elemnt: '" + locator + "' is not clickable ");            }        } catch (NoSuchElementException e) {//            logger.log("Given web element: '" + locator + "' was not found in DOM"//                    + " - NoSuchElementException");//            //ExtentReportListener.//testStepHandle("FAIL",driver,loggerger,e);            Assert.fail("Given web element: '" + locator + "' was not found in DOM - NoSuchElementException");        } catch (Exception e) {//            logger.log("Given web element: '" + locator + "' was not clickable" + e);//            //ExtentReportListener.//testStepHandle("FAIL",driver,loggerger,e);            Assert.fail("Given web element: '" + locator + "' was not found on the web page");        }    }    //File upload by Robot Class    private void uploadFileWithRobot(String imagePath) {        StringSelection stringSelection = new StringSelection(imagePath);        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();        clipboard.setContents(stringSelection, null);        Robot robot = null;        try {            robot = new Robot();        } catch (AWTException e) {            e.printStackTrace();        }        robot.delay(250);        robot.keyPress(KeyEvent.VK_ENTER);        robot.keyRelease(KeyEvent.VK_ENTER);        robot.keyPress(KeyEvent.VK_CONTROL);        robot.keyPress(KeyEvent.VK_V);        robot.keyRelease(KeyEvent.VK_V);        robot.keyRelease(KeyEvent.VK_CONTROL);        robot.keyPress(KeyEvent.VK_ENTER);        robot.delay(150);        robot.keyRelease(KeyEvent.VK_ENTER);    }    private void sleep(int sleep) {        try {            Thread.sleep(sleep);        } catch (Exception e) {        }    }}