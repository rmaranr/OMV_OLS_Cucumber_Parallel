package pages;import io.cucumber.java.Scenario;import org.junit.Assert;import org.openqa.selenium.*;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import utilities.ui.PasswordGenerator;import java.awt.*;import java.awt.event.KeyEvent;import java.io.File;import java.math.BigDecimal;import java.math.MathContext;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.List;import java.util.*;public class CommonPage {    private WebDriver driver;    BasePage basePage;    CommonDBUtils commonDBUtils;    BaseUtils baseUtils;    public Scenario logger;    //Locators    private static final By iconDownload = By.cssSelector("fa-icon[class='ng-fa-icon ng-star-inserted']>svg[data-icon='download']");    public CommonPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonDBUtils = new CommonDBUtils();        basePage = new BasePage(driver);        baseUtils = new BaseUtils();    }    /*    Method to click on button using button text with span locator     */    public void clickButtonUsingSpan(Scenario logger, String buttonName) {        By btnLocator = By.xpath("//span[contains(text(),'" + buttonName + "')]");        basePage.userClick(logger, btnLocator);        logger.log("User clicked on the button '" + buttonName + "'");    }    /*    Method to click apply button in date pickers     */    public void clickApplyButtonOnDatePicker(Scenario logger) {        By btnLocator = By.xpath("//span[@class='button-content' and contains(text(),'Apply')]");        basePage.userClickJSExecutor(logger, btnLocator);    }    /*    Method to click on button using button text with specific tagname     */    public void clickButtonUsingSpecificTagName(Scenario logger, String buttonName, String tagName) {        By btnLocator = By.xpath("//" + tagName + "[contains(text(),'" + buttonName + "')]");        basePage.userClick(logger, btnLocator);        sleepForFewSeconds(1);        logger.log("Clicked on button '" + buttonName + "'");    }    /*    Method to click on button using button text with button locator     */    public void clickButtonUsingButtonLocator(Scenario logger, String buttonName) {        By btnLocator = By.xpath("//button[contains(text(), '" + buttonName + "')]");        basePage.userClick(logger, btnLocator);    }    /*    Method to get status of button using button text with button locator     */    public Boolean statusOfButtonUsingButtonLocator(Scenario logger, String buttonName) {        By btnLocator = By.xpath("//button[contains(text(), '" + buttonName + "')]");        return basePage.whetherElementPresent(logger, btnLocator);    }    /*    Method to get status of button using button text with span locator     */    public Boolean statusOfButtonUsingSpanLocator(Scenario logger, String buttonName) {        By btnLocator = By.xpath("//span[contains(text(),'" + buttonName + "')]");        return basePage.whetherElementPresent(logger, btnLocator);    }    /*    Method to click on button using button text with span locator     */    public void clickUsingDiv(Scenario logger, String value) {        By btnLocator = By.xpath("//div[contains(text(),'" + value + "')]");        basePage.userClick(logger, btnLocator);    }    /*    Method to clear specific filter     */    public void clearSpecificFilterUsingXIcon(Scenario logger, int numberOfFilter) {        if (basePage.getStatusOfElement(By.xpath("(//div[@class='filter-drop-button-content']/span/mav-svg-icon)[" + numberOfFilter + "]/fa-icon"))) {            basePage.userClick(logger, By.xpath("(//div[@class='filter-drop-button-content']/span/mav-svg-icon)[" + numberOfFilter + "]/fa-icon"));        }    }    /*    Method to verify presence of text in UI     */    public void verifyPresenceOfDivText(Scenario logger, String text) {        By locator = By.xpath("//div[contains(text(),'" + text + "')]");        if(text.equalsIgnoreCase("Needs approval")){            basePage.waitUntilElementLocatedOrRefreshed(locator);        }        if (basePage.whetherElementPresent(logger, locator)) {            logger.log(text + " is present in application");        }//        else {//            assertTwoStrings(logger,"true","false",text);//        }    }    /*    Method to verify presence of text in UI     */    public void verifyPresenceOSpanText(Scenario logger, String text) {        By locator = By.xpath("//span[contains(text(),'" + text + "')]");        if (basePage.whetherElementPresent(logger, locator)) {            logger.log(text + " is present in application");        } else {            logger.log(text + " is not present in application");        }    }    /*    Method to validate the text present in application     */    public void verifyPresenceOfText(Scenario logger, String text) {        By locator = null;        if (text.contains("'")) {            String textArr[] = text.split("'");            for (int i = 0; i <= textArr.length - 1; i++) {                locator = By.xpath("//*[contains(text(),'" + textArr[i] + "')]");                basePage.whetherElementPresent(logger, locator, 5);                logger.log(textArr[i] + " displayed as expected");            }        } else {            locator = By.xpath("//*[contains(text(),'" + text + "')]");            basePage.whetherElementPresent(logger, locator, 5);            logger.log(text + " displayed as expected");        }    }    /*    Method to click on drop down field based on drop down name     */    public void clickOnDropDown(Scenario logger, String dropName) {        By dropNameLocator = By.cssSelector("mat-select[name='" + dropName + "']");        basePage.userClick(logger, dropNameLocator);        logger.log(dropName + " is clicked");    }    /*    Method to sleep for few seconds     */    public void sleepForFewSeconds(int seconds) {        try {            Thread.sleep(seconds * 1000);        } catch (Exception e) {            e.printStackTrace();        }    }    /*    Method to click on download button on module     */    public void clickOnDownloadButton(Scenario logger) {        basePage.userClick(logger, iconDownload);    }    /*    Method to get last modified file     */    public File getLastModifiedFile(Scenario logger, File directory) {//        File[] files = directory.listFiles();//        if (files.length == 0) return null;//        Arrays.sort(files, new Comparator<File>() {//            public int compare(File o1, File o2) {//                return new Long(o2.lastModified()).compareTo(o1.lastModified());//            }});//        return files[0];        File[] files = directory.listFiles();        if (files == null || files.length == 0) {            return null;        }        File lastModifiedFile = files[0];        for (int i = 1; i < files.length; i++) {            if (lastModifiedFile.lastModified() < files[i].lastModified()) {                lastModifiedFile = files[i];                logger.log(lastModifiedFile.getName());            }        }        return lastModifiedFile;    }    /*    Method to get specific value from Map Object     */    public String getSpecificValueFromMapObject(Map<String, String> queryResults, String fieldName) {        String fieldValue = "";        if (queryResults == null) {            fieldValue = "";        } else if (queryResults.size() != 0) {            fieldValue = queryResults.get(fieldName);            if (fieldValue == null) {                fieldValue = "";            }        } else {            fieldValue = "";        }        return fieldValue;    }    /*    Method to return N/A if the db value is null     */    public String getNAIfStringIsNullOrEmptyFromMapObject(Map<String, String> queryResults, String fieldName) {        String fieldValue = queryResults.get(fieldName);        if (fieldValue == null) {            fieldValue = "N/A";        }        return fieldValue;    }    /*    Method to compare two string values     */    public void assertTwoStrings(Scenario logger, String expected, String actual, String fieldName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (!PropUtils.getPropValue(properties, "testStatus").equalsIgnoreCase("Skipped")) {            try {                if ((expected == null && actual.equalsIgnoreCase("")) || (expected.equalsIgnoreCase("") && actual == null)) {                    expected = "";                    actual = "";                }                logger.log("Expected '" + fieldName + "' : is - " + expected);                logger.log("Actual '" + fieldName + "' : is - " + actual);                Assert.assertEquals(expected, actual);            } catch (AssertionError e) {                //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);                throw new AssertionError();            }        }    }    /*    Method to verify subString in String     */    public void assertContainInString(Scenario logger, String string, String subString, String fieldName) {        try {            logger.log("Expected '" + fieldName + "' : is - " + string);            logger.log("Actual '" + fieldName + "' : is - " + subString);            Assert.assertTrue(string.contains(subString));        } catch (AssertionError e) {            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            throw new AssertionError();        }    }    /*    Method to add v, if value present     */    public String addCommaIfValuePresent(String value) {        if (!value.equals("")) {            value = "," + value;        }        return value;    }    /*    Method to get processing date of client     */    public String getProcessingDateOfClient() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select PROCESSING_DATE from m_clients where client_mid = '" + PropUtils.getPropValue(properties, "ClientMID") + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        return getSpecificValueFromMapObject(queryResults, "PROCESSING_DATE");    }    /*    Method to click on button using its name     */    /*    Method to click on Submit button     */    public void clickOnButtonUsingJSExecutor(Scenario logger, String button, String position, String tagName) {        By btnSubmit = By.xpath("(//" + tagName + "[contains(text(),'" + button + "')])[" + position + "]");        basePage.userClickJSExecutor(logger, btnSubmit);    }    /*    Method to select Value from drop down     */    public void selectValueFromMatSelectDropDown(Scenario logger, String value, String dropDownName) {        By locator = By.xpath("//mav-select[@formcontrolname='" + dropDownName + "']/mat-select/div/div[1]");        basePage.userClick(logger, locator);//        sleepForFewSeconds(2);        basePage.userClick(logger, By.xpath("//span[contains(text(),'" + value + "')]"));    }    /*    Method to verify the element enabled or disabled     */    public String getAttributeValue(By locator, String attributeName) {        WebDriverWait wait = new WebDriverWait(driver, 30);        wait.until(ExpectedConditions.presenceOfElementLocated(locator));        WebElement element = driver.findElement(locator);        String value = element.getAttribute(attributeName);        if (value == null) {            value = "";        }        return value;    }    /*    Method to get specific value from map object based on other value     */    public String getSpecificValueFromMapBasedOnOtherValue(Scenario logger, List<Map<String, String>> queryResults, String reqValueOfFieldName, String conditionValueOfFieldName, String conditionFieldValue) {        String fieldValue = "";        for (int i = 0; i <= queryResults.size() - 1; i++) {            if (queryResults.get(i).get(conditionValueOfFieldName).equals(conditionFieldValue)) {                fieldValue = queryResults.get(i).get(reqValueOfFieldName);                break;            } else if (queryResults.get(i).get(conditionValueOfFieldName) == null && i == queryResults.size() - 1) {                logger.log("condition field value is null, so not able to get required field value");                break;            }        }        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to select account from account picker     */    public void selectAccountFromAccountPickerBasedOnAccountNo(Scenario logger, String accountNo) {        String accountNumber = basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='account-number']"));        PropUtils.setProps("accountNumber", accountNumber, baseUtils.testDataFilePath);        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (!PropUtils.getPropValue(properties, "accountNumber").equalsIgnoreCase(accountNo)) {            By liAccountHeader = By.cssSelector("div[class='account-labels hover-link-active ng-star-inserted']");            basePage.userClick(logger, liAccountHeader);            sleepForFewSeconds(1);            By accountNoFromAccountPicker = By.xpath("//mat-option[@class='mat-option mat-focus-indicator ng-star-inserted']/span/span/div/div[contains(text(),'" + accountNo + "')]");//            clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger, accountNoFromAccountPicker));            basePage.userClickJSExecutor(logger, accountNoFromAccountPicker);            PropUtils.setProps("accountNumber", accountNo, baseUtils.testDataFilePath);            sleepForFewSeconds(3);            logger.log("Selected account " + accountNo + " from account picker");        } else {            logger.log("Required account number " + accountNo + " is already been selected");        }    }    public void _click(WebElement element) {        boolean flag = false;        while (true) {            try {                element.click();                flag = true;            } catch (Exception e) {                flag = false;            }            if (flag) {                try {                    element.click();                } catch (Exception e) {                    System.out.println("Element: " + element + " has beed clicked, Selenium exception triggered: " + e.getMessage());                }                break;            }        }    }    /*    Method to validate snackbar text     */    public void validateSnackBarOrHeaderText(Scenario logger, String expMessage, String msgType) {        By locator = By.className(msgType);        assertTwoStrings(logger, expMessage, basePage.userGetTextFromWebElement(logger, locator), "SnackbarText");    }    /*    Method to click an element using js executor     */    public void clickUsingJSExecutor(Scenario logger, WebElement element) {        JavascriptExecutor js = (JavascriptExecutor) driver;        js.executeScript("arguments[0].click()", element);    }    /*    Method to get desired date in specific format     */    public String getDesiredDateInSpecificFormat(Scenario logger, String currentDate, int noOfDays, String futureOrPast, String currentDateFormat, String expectedDateFormat) {        Date date = new Date();        String formattedDate = "";        SimpleDateFormat df = new SimpleDateFormat(currentDateFormat);//        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(currentDateFormat);//        LocalDateTime now = LocalDateTime.now();        System.out.println(df.format(date));        try {            if (!currentDate.equals("today")) {                date = df.parse(currentDate);            }            Calendar c = Calendar.getInstance();            c.setTime(date);            if (futureOrPast.equalsIgnoreCase("Future")) {                c.add(Calendar.DAY_OF_YEAR, noOfDays);            } else if (futureOrPast.equalsIgnoreCase("Past")) {                c.add(Calendar.DAY_OF_YEAR, Integer.parseInt("-" + noOfDays));            }            SimpleDateFormat sdf = new SimpleDateFormat(expectedDateFormat);            formattedDate = sdf.format(c.getTime());        } catch (ParseException e) {            System.out.println("Exception " + e);            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return formattedDate;    }    /*    Method to validate span text     */    public void validateTextUsingtag(Scenario logger, String text, String tagName) {        Actions actions = new Actions(driver);        actions.moveToElement(driver.findElement(By.xpath("//" + tagName + "[contains(text(),'" + text + "')]")));        Boolean isPresent = basePage.whetherElementPresent(logger, By.xpath("//" + tagName + "[contains(text(),'" + text + "')]"));        if (isPresent) {            logger.log("Message is present : " + text);        } else {            logger.log("Message is not present : " + text);        }    }    /*    Method to get text using tag name     */    public String getTextUsingTagName(String tagName) {        return driver.findElement(By.tagName(tagName)).getText();    }    /*    Method to click and perform using Actions class     */    public void clickAndPerformUsingActions(WebElement element) {        Actions actions = new Actions(driver);        actions.moveToElement(element).click().perform();    }    /*    Method to validate module header     */    public void validateModuleHeader(Scenario logger, String moduleHeaderName) {        if (moduleHeaderName.equals(basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='title']")))) {            logger.log("Expected header is : " + moduleHeaderName + " , Actual Header is : " + basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='title']")));            logger.log("Expected and actual are equal");        } else {            logger.log("Expected header is : " + moduleHeaderName + " , Actual Header is : " + basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='title']")));            logger.log("Expected and actual are not equal");        }    }    /*    Method to handle keyboard using robot class     */    public void handleActionsClassForKeyboardActions(String keyName) {        try {//            System.setProperty("java.awt.headless", "false");            Actions actions = new Actions(driver);            if (keyName.equalsIgnoreCase("enter")) {                actions.keyDown(Keys.ENTER);                actions.keyUp(Keys.ENTER);                sleepForFewSeconds(5);            }            if (keyName.equalsIgnoreCase("tab")) {                actions.keyDown(Keys.TAB);                actions.keyUp(Keys.TAB);                sleepForFewSeconds(5);            }            if (keyName.equalsIgnoreCase("escape")) {                actions.keyDown(Keys.ESCAPE);                actions.keyUp(Keys.ESCAPE);                sleepForFewSeconds(5);            }            if (keyName.equalsIgnoreCase("down")) {                actions.keyDown(Keys.DOWN);                actions.keyUp(Keys.DOWN);                sleepForFewSeconds(5);            }        } catch (Exception e) {        }    }    /*    Method to get currency symbol based on client country     */    public String getCurrencySymbolBasedOnClientCountry() {        String query = "select currency_symbol from currencies c\n" +                "inner join m_clients mc on mc.currency_oid = c.currency_oid\n" +                "where mc.short_name = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        return queryResults.get("CURRENCY_SYMBOL");    }    /*    Method to truncate decimals     */    public String truncateDecimal(double x, int numberofDecimals) {        if (x > 0 || x < 0) {            String valueArr[] = String.valueOf(x).split("[.]", 0);            int position = 0;            if (valueArr[0].contains("-")) {                position = valueArr[0].length() + 1;            } else {                position = valueArr[0].length() + 2;            }            BigDecimal b1 = new BigDecimal(String.valueOf(x));            MathContext m = new MathContext(position); // 4 precision            // b1 is rounded using m            BigDecimal b2 = b1.round(m);//            return new BigDecimal(String.valueOf(x)).setScale(numberofDecimals, BigDecimal.ROUND_FLOOR).toString();            return b2.setScale(numberofDecimals, BigDecimal.ROUND_FLOOR).toString();//            return new BigDecimal(x).setScale(2, RoundingMode.HALF_UP).toString();        } else {            return new BigDecimal(String.valueOf(x)).setScale(numberofDecimals, BigDecimal.ROUND_CEILING).toString();        }    }    /*    Method to get last characters of string     */    public static String takeLastCharactersOfString(String value, int count) {        if (value == null || value.trim().length() == 0 || count < 1) {            return "";        }        if (value.length() > count) {            return value.substring(value.length() - count);        } else {            return value;        }    }    public void scrollDown(Scenario logger) {        WebElement scrollArea = driver.findElement(By.xpath("//a[contains(text(),'Home')]"));        JavascriptExecutor js = (JavascriptExecutor) driver;        js.executeScript("arguments[0].scrollIntoView()", scrollArea);//        js.executeScript("window.scrollTo(0, document.body.scrollHeight)");    }    /*    Method to add commans in number string     */    public String addCommasToNumericString(String digits) {        String[] arrDigits = {digits};        if (digits.contains(".")) {            arrDigits = digits.split("[.]");        }        String result = "";        String currentValue = "";        if (digits.contains(".")) {            currentValue = arrDigits[0];        } else {            currentValue = digits;        }        String exactValue = currentValue;        if (currentValue.contains("-")) {            exactValue = currentValue.split("-")[1];        }        for (int i = 1; i <= exactValue.length(); ++i) {            char ch = exactValue.charAt(exactValue.length() - i);            if (i % 3 == 1 && i > 1) {                result = "," + result;            }            result = ch + result;        }        if (digits.contains(".")) {            result = result + "." + arrDigits[1];        }        if (currentValue.contains("-")) {            result = "-" + result;        }        return result;    }    /*    Method to find the greater month     */    public int getIndexOfMonth(String month) {        Map<String, Integer> monthsAndTheirIndex = new HashMap<>();        monthsAndTheirIndex.put("JAN", 1);        monthsAndTheirIndex.put("FEB", 2);        monthsAndTheirIndex.put("MAR", 3);        monthsAndTheirIndex.put("APR", 4);        monthsAndTheirIndex.put("MAY", 5);        monthsAndTheirIndex.put("JUN", 6);        monthsAndTheirIndex.put("JUL", 7);        monthsAndTheirIndex.put("AUG", 8);        monthsAndTheirIndex.put("SEP", 9);        monthsAndTheirIndex.put("OCT", 10);        monthsAndTheirIndex.put("NOV", 11);        monthsAndTheirIndex.put("DEC", 12);        return monthsAndTheirIndex.get(month);    }    /*    Method to find the greater month     */    public String getShortNameOfMonthBasedOnIndex(int month) {        Map<Integer, String> monthsAndTheirIndex = new HashMap<>();        monthsAndTheirIndex.put(1, "JAN");        monthsAndTheirIndex.put(2, "FEB");        monthsAndTheirIndex.put(3, "MAR");        monthsAndTheirIndex.put(4, "APR");        monthsAndTheirIndex.put(5, "MAY");        monthsAndTheirIndex.put(6, "JUN");        monthsAndTheirIndex.put(7, "JUL");        monthsAndTheirIndex.put(8, "AUG");        monthsAndTheirIndex.put(9, "SEP");        monthsAndTheirIndex.put(10, "OCT");        monthsAndTheirIndex.put(11, "NOV");        monthsAndTheirIndex.put(12, "DEC");        return monthsAndTheirIndex.get(month);    }    /*    Method to get address line separated     */    public String getAddressLineSeparated(Map<String, String> queryResults) {        String address = "";        address = getSpecificValueFromMapObject(queryResults, "ADDRESS_LINE").replaceAll("( +)", " ").trim();        if (!address.isEmpty()) {            if (address.contains("\n")) {                address = address.replace("\n", " ");            }        }        if (!getSpecificValueFromMapObject(queryResults, "SUBURB").equals("")) {            address = address + "\n" + getSpecificValueFromMapObject(queryResults, "SUBURB");        }        if (!getSpecificValueFromMapObject(queryResults, "STATE").equalsIgnoreCase("")) {            address = address + ", " + getSpecificValueFromMapObject(queryResults, "STATE");        }        if (!getSpecificValueFromMapObject(queryResults, "COUNTRY").equals("")) {            address = address + ", " + getSpecificValueFromMapObject(queryResults, "COUNTRY");        }        if (!getSpecificValueFromMapObject(queryResults, "POSTAL_CODE").equals("")) {            address = address + ", " + getSpecificValueFromMapObject(queryResults, "POSTAL_CODE");        }        return address;    }    /*    Method to handle date picker for past date selection     */    public void handleDatePickerForPastOrFutureDateSelection(Scenario logger, String month, String date, String year) {        WebElement element = null;        StringBuffer sb = new StringBuffer();        sb.append("date");        for (int i = 0; i <= 100; i++) {            if (basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='mat-calendar-header']/div/button/span[@class='mat-button-wrapper'])[1]")).contains(year)) {                if (basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='mat-calendar-header']/div/button/span[@class='mat-button-wrapper'])[1]")).contains(month.toUpperCase())) {                    clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.xpath("//td[contains(@class,'mat-calendar-body-cell mat-focus-indicator')]/div[text()=" + date.replace(",", "").trim() + "]")));                    break;                }            }            sb.delete(0, sb.length());            sb.append(basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='mat-calendar-controls']/button/span)[1]")));            if ((Integer.parseInt(year.substring(year.length() - 4)) > Integer.parseInt(sb.toString().substring(sb.toString().length() - 4))) || (getIndexOfMonth(month.toUpperCase()) > getIndexOfMonth(sb.toString().substring(0, 3)))) {                clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.xpath("//button[@class='mat-calendar-next-button mat-focus-indicator mat-icon-button mat-button-base']")));            } else {                clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.xpath("//button[@class='mat-calendar-previous-button mat-focus-indicator mat-icon-button mat-button-base']")));            }        }    }    /*    Method to get month name based on three letters of name     */    public String getMonthNameBasedOnShortNameOfMonth(String month) {        String monthName = "";        if ("January".contains(month)) {            monthName = "January";        }        if ("February".contains(month)) {            monthName = "February";        }        if ("March".contains(month)) {            monthName = "March";        }        if ("April".contains(month)) {            monthName = "April";        }        if ("May".contains(month)) {            monthName = "May";        }        if ("June".contains(month)) {            monthName = "June";        }        if ("July".contains(month)) {            monthName = "July";        }        if ("August".contains(month)) {            monthName = "August";        }        if ("September".contains(month)) {            monthName = "September";        }        if ("October".contains(month)) {            monthName = "October";        }        if ("November".contains(month)) {            monthName = "November";        }        if ("December".contains(month)) {            monthName = "December";        }        return monthName;    }    /*    Method to get valid account number based on usertype and module     */    public void getAccountNumberBasedOnUserTypeAndModule(String userType, String moduleName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        if (moduleName.equalsIgnoreCase("vehicles")) {            if (userType.equalsIgnoreCase("OLS")) {                query = "select distinct mcust.customer_no from vehicles v\n" +                        "left join m_customers mcust on mcust.customer_mid = v.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join user_members um on um.member_oid = mcust.customer_mid\n" +                        "left join users u on u.user_oid = um.user_oid\n" +                        "where u.logon_id = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile), "OLSUserName")                        + "' and v.vehicle_oid is not null and vehicle_status_cid in (select constant_oid from constants where constant_type_oid in\n" +                        "(select constant_type_oid from constant_types where table_name = 'VEHICLE_STATUS'))";            } else if (userType.equalsIgnoreCase("OMV")) {                query = "select distinct mcust.customer_no from vehicles v\n" +                        "left join m_customers mcust on mcust.customer_mid = v.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID")+" and vehicle_status_cid in (select constant_oid from constants where constant_type_oid in\n" +                        "(select constant_type_oid from constant_types where table_name = 'VEHICLE_STATUS'))";            }        } else if (moduleName.equalsIgnoreCase("drivers")) {            if (userType.equalsIgnoreCase("OLS")) {                query = "select distinct mcust.customer_no from drivers d\n" +                        "inner join m_customers mcust on mcust.customer_mid = d.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join user_members um on um.member_oid = mcust.customer_mid\n" +                        "left join users u on u.user_oid = um.user_oid\n" +                        "where u.logon_id = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile), "OLSUserName")                        + "' and d.driver_oid is not null and driver_status_cid in (select constant_oid from constants where constant_type_oid in\n" +                        "(select constant_type_oid from constant_types where table_name = 'DRIVER_STATUS'))";            } else if (userType.equalsIgnoreCase("OMV")) {                query = "select distinct mcust.customer_no from drivers d\n" +                        "inner join m_customers mcust on mcust.customer_mid = d.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID")                +" and driver_status_cid in (select constant_oid from constants where constant_type_oid in\n" +                        "(select constant_type_oid from constant_types where table_name = 'DRIVER_STATUS'))";            }        }        List<Map<String, String>> allRowsOfQueryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if (allRowsOfQueryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "None of the customer has the driver records", baseUtils.testDataFilePath);        } else {            PropUtils.setProps("accountNo", allRowsOfQueryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);//            PropUtils.setProps("accountNo", "3000015", baseUtils.testDataFilePath);        }    }    /*    Method to count of records based on usertype, module and field condition     */    public String getCountOfRecordsBasedOnModuleAndUserTypeAndCondition(Scenario logger, String moduleName, String fieldName, String fieldValue, String isFromPropertyFile, String usertype) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        String recordCount = "";        String condition = "";        List<Map<String, String>> queryResults = new ArrayList<>();        if (moduleName.equalsIgnoreCase("vehicles")) {            if (isFromPropertyFile.equalsIgnoreCase("Yes") || isFromPropertyFile.equalsIgnoreCase("true")) {                fieldValue = PropUtils.getPropValue(properties, fieldValue);            }            if (!fieldValue.equalsIgnoreCase("")) {                if (fieldName.equalsIgnoreCase("status")) {                    condition = " and c.description = '" + fieldValue + "'";                }            }            query = "SELECT * FROM ( SELECT  nested_query.*, ROWNUM AS paged_query_rn FROM ( SELECT * FROM card_vehicles_enquiry WHERE 1 = 1 AND customer_mid = " +                    "(select customer_mid from m_customers where customer_no = "+                    PropUtils.getPropValue(properties, "accountNo")+") and client_mid = "+                    PropUtils.getPropValue(properties,"ClientMID")+")\n" +                    "nested_query WHERE ROWNUM <= 100 ) WHERE paged_query_rn >= 1";            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            Boolean takeThisRecord = false;            if (queryResults.size() > 0) {                for(int i=0;i<=queryResults.size()-1;i++){                    if(!fieldValue.equalsIgnoreCase("")) {                        if (queryResults.get(i).get("VEHICLE_STATUS_CID").equalsIgnoreCase(commonDBUtils.getQueryResultsOnMap("(select constant_oid from constants where constant_type_oid in\n" +                                "(select constant_type_oid from constant_types where table_name = 'VEHICLE_STATUS') and description = '" + fieldValue + "')").get("CONSTANT_OID"))) {                            takeThisRecord = true;                        }                    }else{                        takeThisRecord = true;                    }                    if(takeThisRecord){                        String fullCardNo = commonDBUtils.getQueryResultsOnMap("Select card_no from cards where card_oid = " + queryResults.get(i).get("CARD_OID")).get("CARD_NO");                        PropUtils.setProps("vehicle-cardNo", fullCardNo.substring(fullCardNo.length() - 6), baseUtils.testDataFilePath);                        PropUtils.setProps("vehicle-vehicleID", getSpecificValueFromMapObject(queryResults.get(i), "VEHICLE_ID"), baseUtils.testDataFilePath);                        PropUtils.setProps("vehicle-fullCardNo", fullCardNo, baseUtils.testDataFilePath);                        PropUtils.setProps("vehicle-vehicleID", getSpecificValueFromMapObject(queryResults.get(i), "VEHICLE_ID"), baseUtils.testDataFilePath);                        PropUtils.setProps("vehicle-licensePlate", getSpecificValueFromMapObject(queryResults.get(i), "LICENSE_PLATE"), baseUtils.testDataFilePath);                        PropUtils.setProps("vehicle-description", getSpecificValueFromMapObject(queryResults.get(i), "DESCRIPTION"), baseUtils.testDataFilePath);                        if (getSpecificValueFromMapObject(queryResults.get(i), "VEHICLE_TYPE_DID").equalsIgnoreCase("")) {                            PropUtils.setProps("vehicle-vehicleType", "", baseUtils.testDataFilePath);                        } else {                            PropUtils.setProps("vehicle-vehicleType", commonDBUtils.getQueryResultsOnMap("Select description from vehicle_types where client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and description_oid = " + queryResults.get(i).get("VEHICLE_TYPE_DID")).get("DESCRIPTION"), baseUtils.testDataFilePath);                        }                        if (getSpecificValueFromMapObject(queryResults.get(i), "VEHICLE_MAKE_DID").equalsIgnoreCase("")) {                            PropUtils.setProps("vehicle-vehicleMake", "", baseUtils.testDataFilePath);                        } else {                            PropUtils.setProps("vehicle-vehicleMake", commonDBUtils.getQueryResultsOnMap("Select description from vehicle_makes where client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and description_oid = " + queryResults.get(i).get("VEHICLE_MAKE_DID")).get("DESCRIPTION"), baseUtils.testDataFilePath);                        }                        PropUtils.setProps("vehicle-model", getSpecificValueFromMapObject(queryResults.get(i), "MODEL"), baseUtils.testDataFilePath);                        PropUtils.setProps("vehicle-status", commonDBUtils.getQueryResultsOnMap("Select description from constants where constant_oid = " + queryResults.get(i).get("VEHICLE_STATUS_CID")).get("DESCRIPTION"), baseUtils.testDataFilePath);                        break;                    }                }            }        }        if (moduleName.equalsIgnoreCase("drivers")) {            if (isFromPropertyFile.equalsIgnoreCase("Yes") || isFromPropertyFile.equalsIgnoreCase("true")) {                fieldValue = PropUtils.getPropValue(properties, fieldValue);            }            if (!fieldValue.equalsIgnoreCase("")) {                if (fieldName.equalsIgnoreCase("status")) {                    condition = " and c.description = '" + fieldValue + "'";                }            }            query = "SELECT * FROM ( SELECT  nested_query.*, ROWNUM AS paged_query_rn FROM " +                    "( SELECT * FROM card_drivers_enquiry WHERE 1 = 1 AND customer_mid = " +                    "(select customer_mid from m_customers where customer_no = "+                    PropUtils.getPropValue(properties, "accountNo")+") and client_mid = "+                    PropUtils.getPropValue(properties,"ClientMID")+")\n" +                    "nested_query WHERE ROWNUM <= 100 ) WHERE paged_query_rn >= 1";            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            Boolean takeThisRecord = false;            if (queryResults.size() > 0) {                for (int i = 0; i <= queryResults.size() - 1; i++) {                    if (!fieldValue.equalsIgnoreCase("")) {                        if (queryResults.get(i).get("DRIVER_STATUS_CID").equalsIgnoreCase(commonDBUtils.getQueryResultsOnMap("(select constant_oid from constants where constant_type_oid in\n" +                                "(select constant_type_oid from constant_types where table_name = 'DRIVER_STATUS') and description = '" + fieldValue + "')").get("CONSTANT_OID"))) {                            takeThisRecord = true;                        }                    } else {                        takeThisRecord = true;                    }                    if (takeThisRecord) {                        String fullCardNo = commonDBUtils.getQueryResultsOnMap("Select card_no from cards where card_oid = " + queryResults.get(i).get("CARD_OID")).get("CARD_NO");                        PropUtils.setProps("driver-cardNo", fullCardNo.substring(fullCardNo.length() - 6), baseUtils.testDataFilePath);                        PropUtils.setProps("driver-fullCardNo", fullCardNo, baseUtils.testDataFilePath);                        PropUtils.setProps("driver-driverID", queryResults.get(i).get("DRIVER_ID"), baseUtils.testDataFilePath);                        PropUtils.setProps("driver-driverName", queryResults.get(i).get("DRIVER_NAME"), baseUtils.testDataFilePath);                        PropUtils.setProps("driver-status", queryResults.get(i).get("DRIVERSTATUS"), baseUtils.testDataFilePath);                        PropUtils.setProps("driver-status", commonDBUtils.getQueryResultsOnMap("Select description from constants where constant_oid = " + queryResults.get(i).get("DRIVER_STATUS_CID")).get("DESCRIPTION"), baseUtils.testDataFilePath);                        break;                    }                }            }        }        if (queryResults.size() == 0) {            recordCount = "0";            PropUtils.setProps("testStatus", "Skippped", baseUtils.testDataFilePath);        } else {//            int count = queryResults.size();//            if(!fieldValue.equalsIgnoreCase("")) {//                String statusCid = commonDBUtils.getQueryResultsOnMap("select c.constant_oid from constants  c\n" +//                        "inner join constant_types cc on c.constant_type_oid = cc.constant_type_oid\n" +//                        "where cc.table_name = 'VEHICLE_STATUS' and c.description = '" + fieldValue + "'").get("CONSTANT_OID");//                for (int i = 0; i <= queryResults.size() - 1; i++) {//                    if (queryResults.get(i).get("VEHICLE_STATUS_CID").equalsIgnoreCase(statusCid)) {//                        queryResults.remove(i);//                    }//                }//                recordCount = String.valueOf(count - queryResults.size());//            }else{//                recordCount = String.valueOf(queryResults.size());//            }            recordCount = String.valueOf(queryResults.size());        }        return recordCount;    }    /*    Method to get address of card contact for a card     */    public Map<String, String> getCardContactAddressForACard(String lastFiveDigitsOfCardNumber) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select cc.CONTACT_NAME,case WHEN cc.POSTAL_ADDRESS_OID is not null THEN cc.POSTAL_ADDRESS_OID ELSE\n" +                "cc.STREET_ADDRESS_OID END as address_oid, a.address_line,a.suburb,a.postal_code,s.DESCRIPTION as state,\n" +                "countries.COUNTRY_CODE as country from cards c\n" +                "left join card_contacts cc on cc.card_contact_oid = c.card_contact_oid\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "inner join addresses a on a.address_oid = case WHEN cc.POSTAL_ADDRESS_OID is not null THEN cc.POSTAL_ADDRESS_OID ELSE cc.STREET_ADDRESS_OID END\n" +                "left join states s on s.state_oid = a.state_oid\n" +                "left join countries countries on countries.country_oid = mc.country_oid\n" +                "where c.card_no like '%" + lastFiveDigitsOfCardNumber + "%' " +                "and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") +                "' and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        return commonDBUtils.getQueryResultsOnMap(query);    }    /*    Method to handle address component for a section based on module     */    public void handleAddressComponentOfASectionBasedOnModule(Scenario logger, String sectionName, String moduleName, String addressAction) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        Map<String, String> queryResults = new HashMap<>();        String selectedRadioButton = basePage.userGetTextFromWebElement(logger, By.xpath("//mat-radio-button[contains(@class,'mat-radio-checked')]/label/div[@class='mat-radio-label-content']"));        if (sectionName.equalsIgnoreCase("ReplaceCard")) {            queryResults = getCardContactAddressForACard(PropUtils.getPropValue(properties, "cardNumberToPerformAnAction"));            if (!getSpecificValueFromMapObject(queryResults, "ADDRESS_OID").equalsIgnoreCase("")) {                assertTwoStrings(logger, "Alternate address", selectedRadioButton, "Selected Radio button name");                PropUtils.setProps(moduleName + "-" + "ExistingAddressRadioBtnName", "Alternate address", baseUtils.testDataFilePath);                validateAlternateAddressSection(logger, getSpecificValueFromMapObject(queryResults, "CONTACT_NAME"),                        getSpecificValueFromMapObject(queryResults, "ADDRESS_LINE"),                        getSpecificValueFromMapObject(queryResults, "SUBURB"),                        getSpecificValueFromMapObject(queryResults, "STATE"),                        getSpecificValueFromMapObject(queryResults, "COUNTRY"),                        getSpecificValueFromMapObject(queryResults, "POSTAL_CODE"));            } else {                String expectedAddress = getPrimaryOrCardAddressSection();                properties = PropUtils.getProps(baseUtils.testDataFile);                assertTwoStrings(logger, PropUtils.getPropValue(properties, "PrimaryOrCardAddress"), selectedRadioButton, "Selected Radio button name");                PropUtils.setProps(moduleName + "-" + "ExistingAddressRadioBtnName", "Primary account address:", baseUtils.testDataFilePath);                assertTwoStrings(logger, expectedAddress, basePage.userGetTextFromWebElement(logger, By.cssSelector("csr-delivery-address>div>mat-radio-group>div>div>div>ols-address[ng-reflect-is-from='delivery-address']>div")), "Primary Or Card Address");            }        }        if (!addressAction.equalsIgnoreCase("existing")) {            List<WebElement> allRadioButtonNames = basePage.getListOfElements(logger, By.xpath("//mat-radio-button[contains(@class,'mat-radio-button mat-accent')]/label/div[@class='mat-radio-label-content']"));            List<WebElement> allRadioButtons = basePage.getListOfElements(logger, By.xpath("//mat-radio-button[contains(@class,'mat-radio-button mat-accent')]/label/div[@class='mat-radio-container']"));            for (int i = 0; i <= allRadioButtonNames.size() - 1; i++) {                if (!selectedRadioButton.equalsIgnoreCase("Alternate address")) {                    if (allRadioButtonNames.get(i).getText().equalsIgnoreCase("Alternate address")) {                        PropUtils.setProps(moduleName + "-" + "SelectedAddressRadioBtnName", "Alternate address", baseUtils.testDataFilePath);                        allRadioButtons.get(i).click();                        enterNewAlternateAddress(logger);                        break;                    }                } else {                    if (!allRadioButtonNames.get(i).getText().equalsIgnoreCase("Alternate address")) {                        allRadioButtons.get(i).click();                        PropUtils.setProps(moduleName + "-" + "SelectedAddressRadioBtnName", allRadioButtonNames.get(i).getText(), baseUtils.testDataFilePath);                        break;                    }                }            }        }    }    /*    Method to validate selected address in database     */    public void validationAddressInDBForAModule(Scenario logger, String sectionName, String action) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        Map<String, String> queryResults = new HashMap<>();        if (sectionName.equalsIgnoreCase("replaceCard")) {            if (action.equalsIgnoreCase("futureRequest")) {                String addressSectionName = PropUtils.getPropValue(properties, sectionName + "-" + "ExistingAddressRadioBtnName");                if (addressSectionName.equalsIgnoreCase("Alternate address")) {                    queryResults = getCardContactAddressForACard(PropUtils.getPropValue(properties, "cardNumberToPerformAnAction"));                    if (!queryResults.get("ADDRESS_OID").equalsIgnoreCase("")) {                        logger.log("Alternate address is available in database as expected.");                    } else {                        assertTwoStrings(logger, "Alternate address should be available in database", "Alternate address is not available in the database which is not expected", "Replace card address section");                    }                }            } else if (action.equalsIgnoreCase("presentRequest")) {                String addressSectionName = PropUtils.getPropValue(properties, sectionName + "-" + "ExistingAddressRadioBtnName");                if (addressSectionName.equalsIgnoreCase("Alternate address")) {                    queryResults = getCardContactAddressForACard(PropUtils.getPropValue(properties, "ReplaceRe-IssuedCardNumber"));                    if (queryResults.get("ADDRESS_OID").equalsIgnoreCase("")) {                        logger.log("Alternate address is not available in database as expected.");                    } else {                        assertTwoStrings(logger, "Alternate address should not be available in database", "Alternate address is present in the database which is not expected", "Replace card address section");                    }                }                addressSectionName = PropUtils.getPropValue(properties, sectionName + "-" + "SelectedAddressRadioBtnName");                if (addressSectionName.equalsIgnoreCase("Alternate address")) {                    queryResults = getCardContactAddressForACard(PropUtils.getPropValue(properties, "ReplaceRe-IssuedCardNumber"));                    if (!queryResults.get("ADDRESS_OID").equalsIgnoreCase("")) {                        logger.log("Alternate address is available in database as expected.");                    } else {                        assertTwoStrings(logger, "Alternate address should be available in database", "Alternate address is not present in the database which is not expected", "Replace card address section");                    }                }            }        }    }    /*    Method to validate primary or card address section     */    public String getPrimaryOrCardAddressSection() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        String address = "";        Map<String, String> queryResults = new HashMap<>();        if (!PropUtils.getPropValue(properties, "cardNumberToPerformAnAction").equalsIgnoreCase("")) {            queryResults = getCardContactAddressForACard(PropUtils.getPropValue(properties, "cardNumberToPerformAnAction"));        }        if (!getSpecificValueFromMapObject(queryResults, "ADDRESS_OID").equalsIgnoreCase("")) {            PropUtils.setProps("PrimaryOrCardAddress", "Alternate address", baseUtils.testDataFilePath);            PropUtils.setProps("existingAddressForACard", "Alternate address", baseUtils.testDataFilePath);            address = "Alternate address";        } else {            query = "select c.contact_name,case WHEN c.POSTAL_ADDRESS_OID is not null THEN c.POSTAL_ADDRESS_OID ELSE\n" +                    "c.STREET_ADDRESS_OID END as address_oid, a.address_line,a.suburb,a.postal_code,s.DESCRIPTION as state,\n" +                    "countries.COUNTRY_CODE as country from contacts c\n" +                    "left join contact_types ct on ct.contact_type_oid = c.contact_type_oid\n" +                    "left join m_customers mcust on mcust.customer_mid = c.member_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join addresses a on a.address_oid = case WHEN c.POSTAL_ADDRESS_OID is not null THEN c.POSTAL_ADDRESS_OID ELSE\n" +                    "c.STREET_ADDRESS_OID END\n" +                    "left join states s on s.state_oid = a.state_oid\n" +                    "left join countries countries on countries.country_oid = a.country_oid\n" +                    "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "" +                    "'and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                    "and ct.external_code = 'CARD'";            queryResults = commonDBUtils.getQueryResultsOnMap(query);            if (queryResults == null || queryResults.size() == 0) {                query = "select case WHEN mcust.CONTACT_NAME is not null THEN mcust.CONTACT_NAME ELSE\n" +                        "mcust.name END as contact_name,case WHEN mcust.POSTAL_ADDRESS_OID is not null THEN mcust.POSTAL_ADDRESS_OID ELSE\n" +                        "mcust.STREET_ADDRESS_OID END as address_oid, a.address_line,a.suburb,a.postal_code,s.DESCRIPTION as state,\n" +                        "countries.COUNTRY_CODE as country from m_customers mcust\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join addresses a on a.address_oid = case WHEN mcust.POSTAL_ADDRESS_OID is not null THEN mcust.POSTAL_ADDRESS_OID ELSE\n" +                        "mcust.STREET_ADDRESS_OID END\n" +                        "left join states s on s.state_oid = a.state_oid\n" +                        "left join countries countries on countries.country_oid = a.country_oid\n" +                        "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "" +                        "'and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                queryResults = commonDBUtils.getQueryResultsOnMap(query);                PropUtils.setProps("PrimaryOrCardAddress", "Primary account address:", baseUtils.testDataFilePath);            } else {                PropUtils.setProps("PrimaryOrCardAddress", "Card contact address:", baseUtils.testDataFilePath);            }            PropUtils.setProps("existingAddressForACard", queryResults.get("CONTACT_NAME") + "\n" + getAddressLineSeparated(queryResults), baseUtils.testDataFilePath);            address = queryResults.get("CONTACT_NAME") + "\n" + getAddressLineSeparated(queryResults);        }//        assertTwoStrings(logger, queryResults.get("CONTACT_NAME") + "\n" + getAddressLineSeparated(queryResults), basePage.userGetTextFromWebElement(logger, addressLocator), "Address");        return address;//        return getAddressLineSeparated(queryResults);    }    /*    Method to get pin address for selected customer     */    public String getPINAddressForSelectedCustomer(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        String address = "";        Map<String, String> queryResults = new HashMap<>();        query = "select c.contact_name,case WHEN c.POSTAL_ADDRESS_OID is not null THEN c.POSTAL_ADDRESS_OID ELSE\n" +                "c.STREET_ADDRESS_OID END as address_oid, a.address_line,a.suburb,a.postal_code,s.DESCRIPTION as state,\n" +                "countries.COUNTRY_CODE as country from contacts c\n" +                "left join contact_types ct on ct.contact_type_oid = c.contact_type_oid\n" +                "left join m_customers mcust on mcust.customer_mid = c.member_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join addresses a on a.address_oid = case WHEN c.POSTAL_ADDRESS_OID is not null THEN c.POSTAL_ADDRESS_OID ELSE\n" +                "c.STREET_ADDRESS_OID END\n" +                "left join states s on s.state_oid = a.state_oid\n" +                "left join countries countries on countries.country_oid = a.country_oid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "" +                "'and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                "and ct.external_code = 'PIN'";        queryResults = commonDBUtils.getQueryResultsOnMap(query);        logger.log(query);        if (queryResults.size() == 0) {            PropUtils.setProps("PINAddressForACard", "PIN Address is not available for selected customer", baseUtils.testDataFilePath);        } else {            PropUtils.setProps("PINAddressForACard", queryResults.get("CONTACT_NAME") + "\n" + getAddressLineSeparated(queryResults), baseUtils.testDataFilePath);            address = queryResults.get("CONTACT_NAME") + "\n" + getAddressLineSeparated(queryResults);        }        return address;    }    /*    Method to validate Alternate address in section     */    public void validateAlternateAddressSection(Scenario logger, String contactName, String addressLine, String suburb, String state, String country, String postalCode) {        assertTwoStrings(logger, contactName, getAttributeValue(By.cssSelector("mav-input[name='contactName']>input"), "ng-reflect-model"), "Contact Name In Alternate Address Section");        assertTwoStrings(logger, addressLine, getAttributeValue(By.cssSelector("mav-input[name='addressLine']>input"), "ng-reflect-model"), "Street Address In Alternate Address Section");        assertTwoStrings(logger, suburb, getAttributeValue(By.cssSelector("mav-input[name='suburb']>input"), "ng-reflect-model"), "City or town In Alternate Address Section");        String query = "select * from states s\n" +                "left join m_clients mc on mc.country_oid = s.country_oid\n" +                "left join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                "where mcust.client_mid = " + PropUtils.getPropValue(PropUtils.properties, "ClientMID");        List<Map<String, String>> queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if (queryResults.size() > 0) {            if (basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[name='state']>mat-select>div>div>span")).replaceAll(" ", "").equalsIgnoreCase("")) {                basePage.userClick(logger, By.cssSelector("mav-select[name='state']>mat-select"));                basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                PropUtils.setProps("alternateAddress-state", basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[name='state']>mat-select>div>div>span")), baseUtils.testDataFilePath);                PropUtils.setProps("alternateAddress-country", getAttributeValue(By.cssSelector("mav-input[name='country']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);            } else {                assertTwoStrings(logger, state, basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[name='state']>mat-select>div>div>span")), "Street Address In Alternate Address Section");                assertTwoStrings(logger, country, getAttributeValue(By.cssSelector("mav-input[name='country']>input"), "ng-reflect-model"), "PostalCode In Alternate Address Section");            }        } else {            logger.log("State is not available for selected country");        }        assertTwoStrings(logger, postalCode, getAttributeValue(By.cssSelector("mav-input[name='postalCode']>input"), "ng-reflect-model"), "PostalCode In Alternate Address Section");    }    /*    Method to enter new Alternate address     */    public void enterNewAlternateAddress(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String contactName = PasswordGenerator.generateAlphaNumeric(logger, 10);        String postalCode = PasswordGenerator.generateNumeric(4);        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='contactName']>input"), contactName);        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='addressLine']>input"), "32, John Street");        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='suburb']>input"), "Jersey city");        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='postalCode']>input"), postalCode);        PropUtils.setProps("AltADD-contactName", contactName, baseUtils.testDataFilePath);        PropUtils.setProps("AltADD-addressLine", "32, John Street", baseUtils.testDataFilePath);        PropUtils.setProps("AltADD-suburb", "Jersey city", baseUtils.testDataFilePath);        PropUtils.setProps("AltADD-postalCode", postalCode, baseUtils.testDataFilePath);        String query = "select * from states s\n" +                "left join m_clients mc on mc.country_oid = s.country_oid\n" +                "left join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                "where mcust.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        List<Map<String, String>> queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if (queryResults.size() > 0) {            basePage.userClick(logger, By.cssSelector("mav-select[name='state']>mat-select"));            basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));            PropUtils.setProps("AltADD-state", getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='state']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);        } else {            logger.log("State is not available for selected country");        }        String countriesQuery = "select * from countries";        List<Map<String, String>> countriesQR = commonDBUtils.getAllRowsOfQueryResultsOnListMap(countriesQuery);        if (countriesQR.size() > 0) {            basePage.userClick(logger, By.cssSelector("mav-select[name='country']>mat-select"));            basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));            PropUtils.setProps("AltADD-country", getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);        } else {            logger.log("Country is not available for selected country");        }    }    /*    Method to click on date field and select future or past date     */    public void clickOnDateFieldAndSelectFutureOrPastDate(Scenario logger, String fieldName, String noOfDays, String time) {        try {            sleepForFewSeconds(2);            driver.findElement(By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input")).click();        } catch (Exception e) {            sleepForFewSeconds(2);            clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input")));        }        String getDesiredDate = getDesiredDateInSpecificFormat(logger, "today", Integer.parseInt(noOfDays), time, "dd, MMM yyyy", "dd, MMM yyyy");        String getDesiredDateWithFormat = getDesiredDateInSpecificFormat(logger, getDesiredDate, 0, time, "dd, MMM yyyy", "dd/MM/yyyy");        PropUtils.setProps("Date-" + fieldName, getDesiredDateWithFormat, baseUtils.testDataFilePath);        WebElement element = null;        String actYear = basePage.userGetTextFromWebElement(logger, By.xpath("//button[@class='mat-calendar-period-button mat-focus-indicator mat-button mat-button-base']/span"));        for (int i = 0; i <= 10000; i++) {            if (basePage.userGetTextFromWebElement(logger, By.xpath("//button[@class='mat-calendar-period-button mat-focus-indicator mat-button mat-button-base']/span")).equalsIgnoreCase(getDesiredDate.substring(3).trim())) {                element = driver.findElement(By.xpath("//td[contains(@class,'mat-calendar-body-cell mat-focus-indicator')]/div[text()=" + Integer.parseInt(getDesiredDate.substring(0, 2)) + "]"));                clickUsingJSExecutor(logger, element);                break;            }            int desiredYear = Integer.parseInt(getDesiredDate.substring(getDesiredDate.length() - 4));            if ((desiredYear > Integer.parseInt(actYear.substring(actYear.length() - 4))) || (getIndexOfMonth(getDesiredDate.substring(4, 7).toUpperCase()) > getIndexOfMonth(actYear.substring(0, 3)))) {                clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.xpath("//button[@class='mat-calendar-next-button mat-focus-indicator mat-icon-button mat-button-base']")));            } else {                clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.xpath("//button[@class='mat-calendar-previous-button mat-focus-indicator mat-icon-button mat-button-base']")));            }        }    }    /*    Method to get an account number which has or not records based on module     */    public void getAnAccountNumberWhichHasOrNotRecordsBasedOnModule(String hasOrNot, String moduleName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        List<Map<String, String>> queryResults = new ArrayList<>();        if (moduleName.equalsIgnoreCase("cardControlProfile")) {            if (hasOrNot.equalsIgnoreCase("has")) {                query = "select distinct mcust.customer_no from card_control_profile_enquiry ccpe\n" +                        "left join m_customers mcust on mcust.customer_mid = ccpe.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid \n" +                        "left join accounts a on a.account_no = mcust.customer_no\n" +                        "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                        "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") +                        " and ast.description like '%Active%'";            } else {                query = "select distinct mcust.customer_no from card_control_profile_enquiry ccpe\n" +                        "left join m_customers mcust on mcust.customer_mid != ccpe.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid \n" +                        "left join accounts a on a.account_no = mcust.customer_no\n" +                        "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                        "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") +                        " and ast.description like '%Active%'";            }        }        if (moduleName.equalsIgnoreCase("cards")) {            if (hasOrNot.equalsIgnoreCase("has")) {                query = "select customer_no from m_customers where customer_mid in (select customer_mid from cards) and client_mid = "                        + PropUtils.getPropValue(properties, "ClientMID") +                        " and customer_no in (select account_no from accounts where account_status_oid in (select account_status_oid from account_status \n" +                        "where description like '%Active%'))";            } else {                query = "select customer_no from m_customers where customer_mid not in (select customer_mid from cards) and client_mid = "                        + PropUtils.getPropValue(properties, "ClientMID") +                        " and customer_no in (select account_no from accounts where account_status_oid in (select account_status_oid from account_status \n" +                        "where description like '%Active%'))";            }        }        queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if (queryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "There is no account exists to execute this scenario", baseUtils.testDataFilePath);        } else {            PropUtils.setProps("commonAccountNo", queryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);        }    }    /*    Method to handle product restrictions based on module     */    public void handleProductSelectionBasedOnModule(Scenario logger, String moduleName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String cardOffer = "";        if (moduleName.equalsIgnoreCase("cardControlProfile")) {            cardOffer = PropUtils.getPropValue(properties, "ccp-cardOffer");        } else if (moduleName.equalsIgnoreCase("Cards")) {            cardOffer = PropUtils.getPropValue(properties, "add-cardOffer");        }        String query = "";        Map<String, String> productRestrictionOids = new HashMap<>();        List<Map<String, String>> productsBasedOnProductRestriction = new ArrayList<>();        List<WebElement> productNames = basePage.getListOfElements(logger, By.xpath("//div[@class='ng-star-inserted']/mat-checkbox/label/span"));        List<WebElement> productCheckBoxes = basePage.getListOfElements(logger, By.xpath("//div[@class='ng-star-inserted']/mat-checkbox/label/div/input"));        productsBasedOnProductRestriction = getProductsBasedOnProductRestriction(logger);        String selectedPrdcuts = "";        for (int i = 0; i <= productsBasedOnProductRestriction.size() - 1; i++) {            for (int j = 0; j <= productNames.size() - 1; j++) {                if (productsBasedOnProductRestriction.get(i).get("PRODUCT").equalsIgnoreCase(productNames.get(j).getText())) {                    clickAndPerformUsingActions(productCheckBoxes.get(j));                    logger.log("'" + productCheckBoxes.get(j) + "' product has been selected");                    if (i == productsBasedOnProductRestriction.size() - 1) {                        selectedPrdcuts = selectedPrdcuts + productNames.get(j).getText();                    } else {                        selectedPrdcuts = selectedPrdcuts + productNames.get(j).getText() + ",";                    }                }            }        }        PropUtils.setProps(moduleName + "-selectedProducts", selectedPrdcuts, baseUtils.testDataFilePath);    }    /*    Method to get products based on product restriciton     */    public List<Map<String, String>> getProductsBasedOnProductRestriction(Scenario logger) {        String query = "select description as product from product_groups where product_group_type_cid = 2910";        logger.log(query);        return commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);    }    /*    Method to get account number based on status and user type     */    public List<Map<String, String>> getAccountNumberBasedOnStatusAndUserType(Scenario logger, String accountStatus, String userType) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        String status = "";        if (accountStatus.equalsIgnoreCase("active")) {            status = " and ast.description like '%Active%'";        } else {            status = " and ast.description not like '%Active%'";        }        if (userType.equalsIgnoreCase("OLS")) {            query = "select mcust.customer_no from m_customers mcust\n" +                    "left join accounts a on a.account_no = mcust.customer_no\n" +                    "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                    "left join user_members um on um.member_oid = mcust.customer_mid\n" +                    "left join users u on u.user_oid = um.user_oid\n" +                    "where u.logon_id = '" +                    PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile), "currentUserName") + "' " + status +                    " and rownum<=100 order by mcust.name asc";        } else if (userType.equalsIgnoreCase("OMV")) {            query = "select mcust.customer_no,mcust.customer_mid from m_customers mcust\n" +                    "left join accounts a on a.account_no = mcust.customer_no\n" +                    "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                    "where mcust.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + status +                    " and rownum<=100 order by mcust.name asc";        }        List<Map<String, String>> queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        logger.log("Query : " + query);        if (queryResults.size() >= 1) {            logger.log("Account No eligible for this scenario : " + queryResults.get(0).get("CUSTOMER_NO"));            PropUtils.setProps("accountNo", queryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);        } else {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "No Customer is available to execute this scenario", baseUtils.testDataFilePath);        }        return queryResults;    }    /*    Method to handle label and error message validation of cards module     */    public Map<String, String> getValidationControlFieldMapObjectBasedOnSpecificName(String columnName, List<Map<String, String>> validationControlFields) {        Map<String, String> recordBasedOnColumnName = new HashMap<>();        if (columnName.equalsIgnoreCase("cardOffer")) {            columnName = "card_offer_oid";        }        if (columnName.equalsIgnoreCase("cardProduct")) {            columnName = "cardVO.card_product_oid";        }        if (columnName.equalsIgnoreCase("cardType")) {            columnName = "card_type_cid";        }        for (int i = 0; i <= validationControlFields.size() - 1; i++) {            if (validationControlFields.get(i).get("COLUMN_NAME").equalsIgnoreCase(columnName)) {                recordBasedOnColumnName = validationControlFields.get(i);                break;            }        }        return recordBasedOnColumnName;    }    /*    Method to get client processing date     */    public String getClientProcessingDate() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select processing_date from m_clients where client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        return queryResults.get("PROCESSING_DATE");    }}