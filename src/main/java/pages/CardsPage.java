package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.apache.commons.lang3.ArrayUtils;import org.apache.poi.hpsf.wellknown.PropertyIDMap;import org.junit.Assert;import org.openqa.selenium.*;import org.openqa.selenium.interactions.Actions;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import utilities.ui.PasswordGenerator;import java.awt.*;import java.awt.event.KeyEvent;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.List;import java.util.*;public class CardsPage {    private WebDriver driver;    private BasePage basePage;    private CommonDBUtils commonDBUtils;    private BaseUtils baseUtils;    private CommonPage commonPage;    private CostCentresPage costCentresPage;    private UsersPage usersPage;    Map<String, String> queryResultsOfVelocityAssignments = null;    public Scenario logger;    public CardsPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonDBUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);        costCentresPage = new CostCentresPage(driver);        usersPage = new UsersPage(driver);    }    //Locators    By liAccountHeader = By.cssSelector("div[class='account-labels hover-link-active']");    public By txtCostCentreInOrderCardPage = By.cssSelector("ols-autocomplete[formcontrolname='costCentre']>mat-form-field>div>div>div[class='mat-form-field-infix']>input");    //    By lblVelocityFieldNames = By.cssSelector("div[class='mat-form-field-flex']>div[class='mat-form-field-infix']>mat-select");    By lblVelocityFieldNames = By.xpath("//div[@class='mat-form-field-flex']/div[@class='mat-form-field-infix']/span/label[contains(@class,'mat-form-field-label')]/mat-label[@class='ng-star-inserted']");    By drpVelocityFieldValue = By.cssSelector("//div[@class='mat-select-value']/span");    /*    Method to add new cost centre     */    public void addNewCostCentreInCardsModule(Scenario logger, String action) {        String newCostCentre = PasswordGenerator.generateAlphaNumeric(logger, Integer.parseInt("9"));        String name = PasswordGenerator.generateAlphabatesWithFewSpecialChars(logger, Integer.parseInt("10"), "_-");        String description = PasswordGenerator.generateAlphaNumeric(logger, Integer.parseInt("50"));        costCentresPage.enterValueInCorrespodingTextFieldCostCentre(logger, "costCentre", newCostCentre, "add", "orderCard");        costCentresPage.enterValueInCorrespodingTextFieldCostCentre(logger, "name", name, "add", "orderCard");        costCentresPage.enterValueInCorrespodingTextFieldCostCentre(logger, "description", description, "add", "orderCard");        commonPage.clickButtonUsingSpan(logger, "Submit");        commonPage.validateSnackBarOrHeaderText(logger, "New cost centre has been created", "snackbar-text");        PropUtils.setProps(action + "-costCentre", newCostCentre, baseUtils.testDataFilePath);        PropUtils.setProps(action + "-name", name, baseUtils.testDataFilePath);        PropUtils.setProps(action + "-description", description, baseUtils.testDataFilePath);    }    /*    Method to select cost centre value in order card page     */    public void selectCostCentreInCardsModule(Scenario logger, String costCenter, String action) {        if (costCenter.equalsIgnoreCase("")) {            WebElement element = driver.findElement(txtCostCentreInOrderCardPage);            element.sendKeys(Keys.DOWN);            commonPage.clickButtonUsingSpan(logger, "Add new cost centre");            addNewCostCentreInCardsModule(logger, action);        } else {            Properties testDataProperties = PropUtils.getProps(baseUtils.testDataFile);            String query = "select ccc.CUSTOMER_COST_CENTRE_CODE,ccc.DESCRIPTION,ccc.SHORT_DESCRIPTION from customer_cost_centres ccc\n" +                    "left join m_customers mcust on mcust.customer_mid = ccc.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mcust.customer_no = '" + PropUtils.getPropValue(testDataProperties, "accountNumberInCardsModule") + "'\n" +                    "and mc.client_mid in (" + PropUtils.getPropValue(testDataProperties, "ClientMID") + ")";            logger.log("Cost centre query " + query);            Map<String, String> costCentreDetails = commonDBUtils.getQueryResultsOnMap(query);            if (costCentreDetails.size() == 0) {                WebElement element = driver.findElement(txtCostCentreInOrderCardPage);                element.sendKeys(Keys.DOWN);                commonPage.clickButtonUsingSpan(logger, "Add new cost centre");                addNewCostCentreInCardsModule(logger, action);            } else {                basePage.userTypeIntoTextField(logger, By.cssSelector("ols-autocomplete[ng-reflect-name='costCentre']>mat-form-field>div>div>div>input"), costCentreDetails.get("CUSTOMER_COST_CENTRE_CODE"));                commonPage.clickButtonUsingSpan(logger, costCentreDetails.get("CUSTOMER_COST_CENTRE_CODE"));            }        }//        basePage.assertTwoStrings(logger,PropUtils.getPropValue(testDataProperties,"orderCard-costCentre"),costCentreDetails.get("CUSTOMER_COST_CENTRE_CODE"));//        basePage.assertTwoStrings(logger,PropUtils.getPropValue(testDataProperties,"orderCard-description"),costCentreDetails.get("DESCRIPTION"));//        basePage.assertTwoStrings(logger,PropUtils.getPropValue(testDataProperties,"orderCard-name"),costCentreDetails.get("SHORT_DESCRIPTION"));//        commonPage.clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger, By.));//        basePage.userClick(logger,By.xpath("(//button[@class='autocomp-mat-button mat-button mat-icon-button mat-button-base ng-star-inserted']/span/mav-svg-icon)"));    }    /*    Method to select cost centre in order card page     */    public void searchAndSelectCostCentreInOrderCardPage(Scenario logger, String costCentre) {        basePage.userTypeIntoTextField(logger, txtCostCentreInOrderCardPage, costCentre);        try {            commonPage.handleActionsClassForKeyboardActions("down");            commonPage.handleActionsClassForKeyboardActions("enter");        } catch (Exception e) {        }    }    /*   Method to enter a value in corresponding text field    */    public void enterValueInCorrespondingTextFieldForInputTag(Scenario logger, String fieldName, String fieldValue, String formType, String moduleName) {        Properties testDataProperties = PropUtils.getProps(baseUtils.testDataFile);        By fieldLocator = By.cssSelector("input[name='" + fieldName + "']");        if (!basePage.getStatusOfElement(fieldLocator)) {            fieldLocator = By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input");        }        if (formType.equalsIgnoreCase("Add")) {            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        }        logger.log(fieldValue + " has been entered in the corresponding field " + fieldName);    }    /*    Method to get value from corresponding text field     */    public String getValueFromCorrespondingTextFieldUsingInputTag(Scenario logger, String fieldName) {        By fieldLocator = By.cssSelector("input[name='" + fieldName + "']");        return basePage.userGetTextUsingGetAttribute(logger, fieldLocator);    }    /*   Method to enter value in element based on the type    */    public void enterValueBasedOfItsType(Scenario logger, String fieldValue, String fieldName, String formType, String moduleName, String lengthOfField, String specialChars) {        if (fieldValue.equalsIgnoreCase("RandomAlphanumericWithFewSpecialChars")) {            fieldValue = PasswordGenerator.generateAlphabatesWithFewSpecialChars(logger, Integer.parseInt(lengthOfField), specialChars);            enterValueInCorrespondingTextFieldForInputTag(logger, fieldName, fieldValue, formType, moduleName);        } else if (fieldValue.equalsIgnoreCase("RandomAlphanumeric")) {            fieldValue = PasswordGenerator.generateAlphaNumeric(logger, Integer.parseInt(lengthOfField));            enterValueInCorrespondingTextFieldForInputTag(logger, fieldName, fieldValue, formType, moduleName);        } else if (fieldValue.equalsIgnoreCase("Numeric")) {            fieldValue = PasswordGenerator.generateNumeric(Integer.parseInt(lengthOfField));            enterValueInCorrespondingTextFieldForInputTag(logger, fieldName, fieldValue, formType, moduleName);        } else {            enterValueInCorrespondingTextFieldForInputTag(logger, fieldName, fieldValue, formType, moduleName);        }    }    /*    Method to get delivery address of a card     */    public String getDeliveryAddressOfACard(String accountNumber, String addressType) {        String addressOfACard = "";        String contactName = "";        String query = "";        Map<String, String> queryResults = null;        if (addressType.equalsIgnoreCase("AlternateAddress") || addressType.equalsIgnoreCase("addressAssociatedToCard")) {            query = "select cc.CONTACT_NAME,cc.STREET_ADDRESS_OID from card_contacts cc\n" +                    "inner join cards c on c.CARD_CONTACT_OID = cc.CARD_CONTACT_OID\n" +                    "inner join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mcust.customer_no = '" + PropUtils.getPropValue(baseUtils.testDataProperties, "orderCard-AccountNo") + "' \n" +                    "and mc.short_name = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "' \n" +                    "and c.card_no like '%" + PropUtils.getPropValue(baseUtils.testDataProperties, "Latest-CardNumber") + "%'";            queryResults = commonDBUtils.getQueryResultsOnMap(query);            contactName = queryResults.get("CONTACT_NAME");            query = "select * from addresses a\n" +                    "inner join m_clients mc on mc.country_oid = a.country_oid\n" +                    "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                    "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +                    PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'\n" +                    "and address_oid = " + queryResults.get("STREET_ADDRESS_OID");            queryResults = commonDBUtils.getQueryResultsOnMap(query);            if (contactName.equals("")) {                addressOfACard = getAddressOfContactOrAccount(queryResults);            } else {                addressOfACard = contactName + "\n" + getAddressOfContactOrAccount(queryResults);            }        }        if (addressOfACard.equalsIgnoreCase("")) {            query = "select distinct ct.description, c.* from contacts c\n" +                    "inner join contact_types ct on ct.contact_type_oid = c.contact_type_oid\n" +                    "inner join m_clients mc on mc.client_mid = ct.client_mid\n" +                    "inner join m_customers mcust on mcust.client_mid = mc.client_mid and mcust.customer_mid = c.member_oid\n" +                    "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +                    PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";            List<Map<String, String>> cardDetails = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            String postalAddressForAnAccount = "";            String streetAddressForAnAccount = "";            Boolean isCardDeliveryContactExistsAndPrimaryForAnAccount = false;            for (Map<String, String> map : cardDetails) {                if ((map.get("DESCRIPTION").equals("Card Delivery")) && (map.get("IS_DEFAULT").equalsIgnoreCase("Y"))) {                    postalAddressForAnAccount = commonPage.getSpecificValueFromMapObject(map, "POSTAL_ADDRESS_OID");                    streetAddressForAnAccount = commonPage.getSpecificValueFromMapObject(map, "STREET_ADDRESS_OID");                    contactName = map.get("CONTACT_NAME");                    isCardDeliveryContactExistsAndPrimaryForAnAccount = true;                    break;                }            }            if ((isCardDeliveryContactExistsAndPrimaryForAnAccount) && (!postalAddressForAnAccount.equals(""))) {                query = "select * from addresses a\n" +                        "inner join m_clients mc on mc.country_oid = a.country_oid\n" +                        "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                        "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +                        PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'\n" +                        "and address_oid = " + postalAddressForAnAccount;                queryResults = commonDBUtils.getQueryResultsOnMap(query);                if (contactName.equals("")) {                    addressOfACard = getAddressOfContactOrAccount(queryResults);                } else {                    addressOfACard = contactName + "\n" + getAddressOfContactOrAccount(queryResults);                }            } else {                if (!streetAddressForAnAccount.equals("")) {                    query = "select * from addresses a\n" +                            "inner join m_clients mc on mc.country_oid = a.country_oid\n" +                            "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                            "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +                            PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'\n" +                            "and address_oid = " + streetAddressForAnAccount;                    Map<String, String> queryResults1 = commonDBUtils.getQueryResultsOnMap(query);                    if (contactName.equals("")) {                        addressOfACard = getAddressOfContactOrAccount(queryResults1);                    } else {                        addressOfACard = contactName + "\n" + getAddressOfContactOrAccount(queryResults1);                    }                } else {                    query = "select mcust.POSTAL_ADDRESS_OID,mcust.STREET_ADDRESS_OID,mcust.customer_no,mcust.CONTACT_NAME from m_customers mcust\n" +                            "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +                            PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";                    Map<String, String> queryResults2 = commonDBUtils.getQueryResultsOnMap(query);                    contactName = commonPage.getSpecificValueFromMapObject(queryResults2, "CONTACT_NAME");                    postalAddressForAnAccount = commonPage.getSpecificValueFromMapObject(queryResults2, "POSTAL_ADDRESS_OID");                    streetAddressForAnAccount = commonPage.getSpecificValueFromMapObject(queryResults2, "STREET_ADDRESS_OID");                    if (!postalAddressForAnAccount.equals("")) {//                        query = "select * from addresses a\n" +//                                "inner join m_clients mc on mc.country_oid = a.country_oid\n" +//                                "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +//                                "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +//                                PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'\n" +//                                "and address_oid = " + postalAddressForAnAccount;                        query = "select * from addresses where address_oid = " + postalAddressForAnAccount;                        Map<String, String> queryResults3 = commonDBUtils.getQueryResultsOnMap(query);                        if (contactName.equals("")) {                            addressOfACard = getAddressOfContactOrAccount(queryResults3);                        } else {                            addressOfACard = contactName + "\n" + getAddressOfContactOrAccount(queryResults3);                        }                    } else {                        if (!streetAddressForAnAccount.equals("")) {//                            query = "select * from addresses a\n" +//                                    "inner join m_clients mc on mc.country_oid = a.country_oid\n" +//                                    "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +//                                    "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +//                                    PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'\n" +//                                    "and address_oid = " + streetAddressForAnAccount;                            query = "select * from addresses where address_oid = " + streetAddressForAnAccount;                            Map<String, String> queryResults4 = commonDBUtils.getQueryResultsOnMap(query);                            if (contactName.equals("")) {                                addressOfACard = getAddressOfContactOrAccount(queryResults4);                            } else {                                addressOfACard = contactName + "\n" + getAddressOfContactOrAccount(queryResults4);                            }                        }                    }                }            }        }        return addressOfACard;    }    /*    Method to get primary address in Delivery address stepper     */    public String getPrimaryAddressFromDeliveryAddressStepper(Scenario logger) {        By locator = By.cssSelector("div[class='delivery-address']>mat-radio-group>div>div>ols-address>div>div");        List<WebElement> primaryAddress = basePage.getListOfElements(logger, locator);        String primaryAdd = "";        for (int i = 0; i <= primaryAddress.size() - 1; i++) {            if (!primaryAddress.get(i).getText().equals("")) {                if (i == primaryAddress.size() - 1) {                    primaryAdd = primaryAdd + primaryAddress.get(i).getText();                } else {                    primaryAdd = primaryAdd + primaryAddress.get(i).getText() + "\n";                }            }        }        return primaryAdd;    }    /*    Method to get location address of transaction     */    public String getAddressOfContactOrAccount(Map<String, String> queryResults) {        String address = "";        address = commonPage.getSpecificValueFromMapObject(queryResults, "ADDRESS_LINE");        if (!address.isEmpty()) {            if (address.contains("\n")) {                address = address.replace("\n", " ");            }        }        if (!commonPage.getSpecificValueFromMapObject(queryResults, "SUBURB").equals("")) {            address = address + "\n" + commonPage.getSpecificValueFromMapObject(queryResults, "SUBURB");        }        if (!commonPage.getSpecificValueFromMapObject(queryResults, "STATE_OID").equals("")) {            Map<String, String> queryRes = commonDBUtils.getQueryResultsOnMap("select description from states where state_oid = '" +                    commonPage.getSpecificValueFromMapObject(queryResults, "STATE_OID") + "'");            address = address + ", " + commonPage.getSpecificValueFromMapObject(queryRes, "DESCRIPTION");        }        if (!commonPage.getSpecificValueFromMapObject(queryResults, "POSTAL_CODE").equals("")) {            address = address + ", " + commonPage.getSpecificValueFromMapObject(queryResults, "POSTAL_CODE");        }        return address;    }    /*    Method to get expiry date of card for an account     */    public String getExpiryDateOfACard(String accountNumber, String cardNumber) {        String query = "select * from cards c\n" +                "inner join card_programs cp on cp.card_program_oid = c.card_program_oid\n" +                "inner join m_clients mc on mc.client_mid = cp.client_mid\n" +                "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                "where mcust.customer_no = '" + accountNumber + "' and mc.short_name = '" +                PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'\n" +                "and card_no = " + cardNumber;        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        return commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRES_ON");    }    /*    Method to select account based on its status     */    public String selectAccountBasedOnStatus(Scenario logger, String status, String subStatus) {        String requiredAccountNo = getAccountNumberBasedOnStatus(logger, status, subStatus);        if (!requiredAccountNo.equals("")) {            commonPage.sleepForFewSeconds(5);            commonPage.selectAccountFromAccountPickerBasedOnAccountNo(logger, requiredAccountNo);        }        return requiredAccountNo;    }    /*    Method to enter account number based on status for Logged in user     */    public void enterAccountNumberBasedOnStatus(Scenario logger, String status, String subStatus, Boolean isContains) {        String requiredAccountNo = getAccountNumberBasedOnStatus(logger, status, subStatus);        if (!requiredAccountNo.equals("")) {            basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='accountNumber']>input"), requiredAccountNo);            PropUtils.setProps("commonAccountNo", requiredAccountNo, baseUtils.testDataFilePath);        } else {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("SkipReason", "Account is not present for the given status '" + status + "'", baseUtils.testDataFilePath);        }    }    /*    Method to get account number based on status     */    public String getAccountNumberBasedOnStatus(Scenario logger, String status, String subStatus) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String condition = "";        if (!status.equalsIgnoreCase("")) {            if (status.equalsIgnoreCase("Active")) {                condition = "and acs.description = '" + status + "'";            } else {                condition = "and acs.description not like ('%Active%')";            }        }        if (!subStatus.equalsIgnoreCase("")) {            if (status.equalsIgnoreCase("Active")) {                condition = condition + " and acss.description = '" + subStatus + "'";            } else {                condition = condition + " and acss.description not like ('%Active%')";            }        }        String query = "select a.account_no, acs.description as account_status,\n" +                "acss.description as account_sub_status from m_customers mcust\n" +                "inner join customer_values cv1 on cv1.customer_value_oid = mcust.customer_value_1_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join accounts a on a.customer_mid = mcust.customer_mid\n" +                "left join account_status acs on acs.account_status_oid = a.account_status_oid\n" +                "left join account_sub_status acss on acss.ACCOUNT_SUB_STATUS_OID = a.ACCOUNT_SUB_STATUS_OID\n" +                "left join applications a on a.application_oid = mcust.application_oid\n" +                "left join application_status aps on aps.application_status_oid = a.application_status_oid\n" +                "left join constants c on c.constant_oid = aps.application_mode_cid\n" +                "inner join account_credit_information aci on aci.ACCOUNT_OID = a.ACCOUNT_OID\n" +                "where  mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                " " + condition + " and aci.CREDIT_INFORMATION_NO is not null order by a.account_no asc";        logger.log(query);        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        if (queryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "None of the accounts has status like '" + status + "' ", baseUtils.testDataFilePath);        }        logger.log("account number is : " + queryResults.get("ACCOUNT_NO"));        return commonPage.getSpecificValueFromMapObject(queryResults, "ACCOUNT_NO");    }    /*    Method to get card offers based on accounts     */    public List<Map<String, String>> getCardDataBasedOnAccount(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select distinct cf.description as cardoffer,cp.card_product_oid,cp.description as cardproduct,const.description as cardType,\n" +                "mcust.customer_No,cf.card_offer_oid,cp.application_type_oid,cp.EXPIRY_MONTHS, \n" +                "mcust.Name,mcust.EMBOSSING_NAME from card_offers cf\n" +                "left join card_products cp on cp.card_offer_oid = cf.card_offer_oid\n" +                "left join card_program_offers cfo on cfo.card_offer_oid = cf.card_offer_oid\n" +                "left join m_customers mcust on mcust.card_program_oid = cfo.card_program_oid\n" +                "left join applications at on at.application_oid=mcust.application_oid and cp.application_type_oid = at.application_type_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid and mc.client_mid = cf.client_mid\n" +                "left join constants const on const.constant_oid = cp.card_type_cid\n" +                "where mcust.customer_no in (" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + ") and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and rownum<=10";        logger.log(query);        List<Map<String, String>> queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        return queryResults;    }    /*    Method to get expiry date of a Card     */    public String getExpiryDateToBePopulatedForACard(String expiryMonthsToBeAdded) {        String clientProcessingDate = commonPage.getProcessingDateOfClient();        Date date;        String formattedDate = "";        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        try {            date = df.parse(clientProcessingDate);            Calendar c = Calendar.getInstance();            c.setTime(date);            if (!expiryMonthsToBeAdded.equalsIgnoreCase("")) {                c.add(Calendar.MONTH, Integer.parseInt(expiryMonthsToBeAdded));                int currentDateNumber = c.get(Calendar.DATE);                int lastDateOfMonth = c.getActualMaximum(Calendar.DATE);                lastDateOfMonth = lastDateOfMonth - currentDateNumber;                c.add(Calendar.DAY_OF_YEAR, lastDateOfMonth);            }            df = new SimpleDateFormat("MMM dd yyyy");            formattedDate = df.format(c.getTime());        } catch (Exception e) {            e.printStackTrace();        }        return formattedDate;    }    /*    Method to get customer cost centres count for a selected account     */    public String getCountOfCustomerCostCentres() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select count(*) from customer_cost_centres ccc\n" +                "inner join m_customers mcust on mcust.customer_mid = ccc.customer_mid\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mc.client_mid in (\n"                + PropUtils.getPropValue(properties, "ClientMID") + ")" +                " and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        return queryResults.get("COUNT(*)");    }    /*    Method to validate Purchase controls     */    public void validatePurchaseControlFieldsAndValues(Scenario logger, String[] values, String action) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select VELOCITY_TYPE_VALUE_1_OID,VELOCITY_TYPE_VALUE_2_OID,\n" +                "VELOCITY_TYPE_VALUE_3_OID,VELOCITY_TYPE_VALUE_4_OID,VELOCITY_TYPE_VALUE_5_OID,\n" +                "VELOCITY_TYPE_VALUE_6_OID,VELOCITY_TYPE_VALUE_7_OID from velocity_assignments va\n" +                "left join card_controls cc on cc.velocity_assignment_oid = va.velocity_assignment_oid\n" +                "left join card_control_profiles ccp on ccp.card_control_profile_oid = cc.card_control_profile_oid\n" +                "left join m_customers mcust on mcust.customer_mid =ccp.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join card_offers cfo on cfo.card_offer_oid = ccp.card_offer_oid\n" +                "left join card_program_offers cpo on cpo.card_offer_oid = cfo.card_offer_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ") and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='account-number']")) + "'";        Map<String, String> queryResultsOfVelocityAssignments = commonDBUtils.getQueryResultsOnMap(query);        String conditionFieldName = "";        String velocityIds = commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_6_OID") +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_7_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_1_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_2_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_3_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_4_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_5_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResultsOfVelocityAssignments, "VELOCITY_TYPE_VALUE_8_OID"));        query = "select vtv.VELOCITY_TYPE_VALUE_OID,vtv.VELOCITY_TYPE_OID,vtv.description,vt.description as fieldname from velocity_type_values vtv\n" +                "inner join velocity_types vt on vt.VELOCITY_TYPE_OID = vtv.VELOCITY_TYPE_OID\n" +                "where vtv.VELOCITY_TYPE_VALUE_OID in (" + velocityIds + ")";        List<Map<String, String>> queryRes = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        List<WebElement> allElements = basePage.getListOfElements(logger, By.xpath("//div[@class='mat-form-field-flex']/div[@class='mat-form-field-infix']"));        if (action.equalsIgnoreCase("add")) {            for (int i = 0; i <= values.length - 1; i++) {                String fieldValue = basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[ng-reflect-name='" + values[i] + "']>mat-select>div>div>span"));                if (!fieldValue.equals("")) {                    fieldValue = basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[ng-reflect-name='" + values[i] + "']>mat-select>div>div>span>span"));                }                conditionFieldName = getPurchaseControlFieldName(values, conditionFieldName, i);                if (fieldValue.equals(commonPage.getSpecificValueFromMapBasedOnOtherValue(logger, queryRes, "DESCRIPTION", "FIELDNAME", conditionFieldName))) {                    PropUtils.setProps(conditionFieldName.replaceAll("\\s+", "-"), fieldValue, baseUtils.testDataFilePath);                    logger.log("Expected value for field : " + queryRes.get(i).get("FIELDNAME") + " is " + queryRes.get(i).get("DESCRIPTION"));                    logger.log("Actual Value for field :" + queryRes.get(i).get("FIELDNAME") + " is " + queryRes.get(i).get("DESCRIPTION"));                }            }        } else if (action.equalsIgnoreCase("edit")) {            List<WebElement> dropValues = null;            for (int i = 0; i <= values.length - 1; i++) {                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='" + values[i] + "']"));                dropValues = basePage.getListOfElements(logger, By.cssSelector("span[class='mat-option-text']"));                conditionFieldName = getPurchaseControlFieldName(values, conditionFieldName, i);                if (dropValues.size() > 1) {                    dropValues.get(1).click();                    PropUtils.setProps(conditionFieldName.replaceAll("\\s+", "-"), basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[ng-reflect-name='" + values[i] + "']>mat-select>div>div>span")), baseUtils.testDataFilePath);                } else {                    dropValues.get(0).click();                    PropUtils.setProps(conditionFieldName.replaceAll("\\s+", "-"), basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[ng-reflect-name='" + values[i] + "']>mat-select>div>div>span")), baseUtils.testDataFilePath);                }            }        }    }    private String getPurchaseControlFieldName(String[] values, String conditionFieldName, int i) {        if (values[i].equalsIgnoreCase("velocityTransactionLimit0")) {            conditionFieldName = "Transaction Volume Limit";        } else if (values[i].equalsIgnoreCase("velocityTransactionLimit1")) {            conditionFieldName = "Transaction Ringgit Limit";        } else if (values[i].equalsIgnoreCase("velocityPurchaseLimit0")) {            conditionFieldName = "Monthly Volume Limit";        } else if (values[i].equalsIgnoreCase("velocityPurchaseLimit1")) {            conditionFieldName = "Monthly Ring Limit";        } else if (values[i].equalsIgnoreCase("velocityPurchaseLimit2")) {            conditionFieldName = "Daily Transaction Limit";        } else if (values[i].equalsIgnoreCase("velocityPurchaseLimit3")) {            conditionFieldName = "Daily Ringgit Limit";        } else if (values[i].equalsIgnoreCase("velocityPurchaseLimit4")) {            conditionFieldName = "Daily Volume Limit";        }        return conditionFieldName;    }    /*    Method to validate all stepper values in Review page     */    public void validateAllStepperValues(Scenario logger, String formType) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select distinct c.currency_symbol from currencies c\n" +                "left join m_customers mcust on mcust.currency_oid = c.currency_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("//mat-grid-list[@class='mat-grid-list']/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("//mat-grid-list[@class='mat-grid-list']/div/mat-grid-tile/figure/div/div[2]"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            if (fieldNames.get(i).getText().equals("Card offer")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-cardOffer"), "Card offer");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("Card product")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-cardProduct"), "Card product");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("Card type")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-cardType"), "Card type");                i = i + 1;//            }if(fieldNames.get(i).getText().equals("Expiry date*")){            }            if (fieldNames.get(i).getText().equals("Identification method")) {//                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, "add-identificationMethod"), "Identification method");                if (fieldValues.get(i).getText().equalsIgnoreCase(PropUtils.getPropValue(properties, formType + "-identificationMethod"))) {                    logger.log("Idenfication method populated as expected.");                } else {                    logger.log("Idenfication method is not populated as expected.");                }                i = i + 1;            }//            if (fieldNames.get(i).getText().equals("Cost centre")) {//                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-costCentre"), "cost Centre");//                i = i + 1;//            }            if (fieldNames.get(i).getText().equals("Additional code")) {//                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-externalRef"), "Cost centre 2");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("POS prompts")) {                String expPOSPrompts[] = {};                if (PropUtils.getPropValue(properties, formType + "-POSPrompts").contains(",")) {                    expPOSPrompts = PropUtils.getPropValue(properties, formType + "-POSPrompts").split(",");                } else {                    expPOSPrompts = new String[]{PropUtils.getPropValue(properties, formType + "-POSPrompts")};                }                for (int j = 0; j < expPOSPrompts.length - 1; j++) {                    commonPage.assertTwoStrings(logger, expPOSPrompts[j], fieldValues.get(i).getText(), "POS prompts");                    i = i + 1;                }            }            if (fieldNames.get(i).getText().equals("Driver name")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-driverName"), "Driver name");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("Driver ID")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-driverId"), "Driver ID");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("Vehicle description")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-vehicleDescription"), "Vehicle description");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("License plate")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-licensePlate"), "License plate");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("Line 1*")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-EmboosingName"), "Line 1");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("Online purchases password")) {                commonPage.assertTwoStrings(logger, fieldValues.get(i).getText(), PropUtils.getPropValue(properties, formType + "-webAuthCode"), "Online purchases password");                i = i + 1;            }            if (fieldNames.get(i).getText().equals("Card control profile")) {                if (formType.equalsIgnoreCase("add")) {                    if (PropUtils.getPropValue(properties, "add-cardControlProfile").contains("new")) {                        commonPage.assertTwoStrings(logger, "[System defined profile name]", fieldValues.get(i).getText(), "Card control profile");                    } else {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-cardControlProfile"), fieldValues.get(i).getText(), "Card control profile");                    }                }            }            if (fieldNames.get(i).getText().equals("Alternate address") || fieldNames.get(i).getText().equals("Card contact address")) {                if (formType.equalsIgnoreCase("add")) {                    if (!PropUtils.getPropValue(properties, "cards-addSelectedAddressRadioBtnName").equalsIgnoreCase("")) {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "cards-addSelectedAddressRadioBtnName"), fieldNames.get(i).getText(), "Address in review page");                        if (PropUtils.getPropValue(properties, "cards-addSelectedAddressRadioBtnName").equalsIgnoreCase("Alternate address")) {                            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "AltADD-contactName") + "\n" + PropUtils.getPropValue(properties, "AltADD-addressLine") + "\n" + PropUtils.getPropValue(properties, "AltADD-suburb") + ", " + PropUtils.getPropValue(properties, "AltADD-state") + ", " + PropUtils.getPropValue(properties, "AltADD-country") + ", " + PropUtils.getPropValue(properties, "AltADD-postalCode"), fieldValues.get(i).getText(), "Account based address in review page");                        } else {                            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "selectedAddressForACard"), fieldValues.get(i).getText(), "Account based address in review page");                        }                    } else {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "cards-addExistingAddressRadioBtnName"), fieldNames.get(i).getText(), "Account based address in review page");                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "existingAddressForACard"), fieldValues.get(i).getText(), "Account based address in review page");                    }                }            }            if (fieldNames.get(i).getText().equalsIgnoreCase("PIN contact address")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "PINAddressForACard"), fieldValues.get(i).getText(), "PIN address which is available for the pinned account in review page");            }        }//        List<WebElement> productValues = basePage.getListOfElements(logger, By.xpath("//div[@class='product-selection']/div/div[@class='ng-star-inserted']/div"));////        List<WebElement> productTypes auto= basePage.getListOfElements(logger,By.xpath("//div[@class='product-selection']/mat-list-item/div/div[3]/div[@class='panel-expanded-field-label']"));//        String expProducts[] = {PropUtils.getPropValue(properties, "Cards-SelectedProducts")};//        if (PropUtils.getPropValue(properties, "Cards-SelectedProducts").contains(",")) {//            expProducts = PropUtils.getPropValue(properties, "Cards-SelectedProducts").split(",");//            int i = 0;//            for (int k = 0; k < productValues.size() - 1; k++) {//                if (!productValues.get(k).getText().equals("")) {//                    if (k == 0) {//                        commonPage.assertTwoStrings(logger, expProducts[i+1].toUpperCase(), productValues.get(k).getText().toUpperCase(), "SelectedProduct");//                    } else {//                        commonPage.assertTwoStrings(logger, expProducts[i + 1].toUpperCase(), productValues.get(k).getText().toUpperCase(), "SelectedProduct");//                    }//                }////                }else{////                    commonPage.assertTwoStrings(logger, expProducts[k].toUpperCase(), productValues.get(k+1).getText().toUpperCase(), "SelectedProduct");////                }//            }//        } else if (expProducts[0].equalsIgnoreCase("All Products")) {//            for (int j = 0; j < productValues.size() - 1; j++) {//                commonPage.assertTwoStrings(logger, expProducts[0], productValues.get(j).getText(), "SelectedValues");//            }//        }        StringBuilder sb = new StringBuilder();        int countOfScrollDown = 0;        fieldNames = basePage.getListOfElements(logger, By.cssSelector("mat-grid-list[class='mat-grid-list']>div>mat-grid-tile>figure>div>div[class='panel-expanded-field-label-card-order']"));        fieldValues = basePage.getListOfElements(logger, By.cssSelector("mat-grid-list[class='mat-grid-list']>div>mat-grid-tile>figure>div>div[class='panel-expanded-field-text-card-order']"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            if (fieldNames.get(i).getText().contains("Limit")) {                sb.delete(0, sb.length());                if (countOfScrollDown == 0) {                    usersPage.scrollDown(logger);                    countOfScrollDown = 1;                }                if (formType.equalsIgnoreCase("Edit")) {                    sb.append(PropUtils.getPropValue(properties, "cards-edit-" + fieldNames.get(i).getText()));                    if (fieldValues.get(i).getText().contains(sb.toString())) {                        logger.log("Expected value is " + sb.toString());                        logger.log("Actual Value is " + fieldValues.get(i).getText());                    }                } else {                    sb.append(PropUtils.getPropValue(properties, "cards-add-" + fieldNames.get(i).getText()));                    if (fieldValues.get(i).getText().contains(sb.toString())) {                        logger.log("Expected value is " + sb.toString());                        logger.log("Actual Value is " + fieldValues.get(i).getText());                    }                }            }        }        if (!PropUtils.getPropValue(properties, "newTimeLimits").equalsIgnoreCase("")) {            String[] timeLimitsArr = {};            if (PropUtils.getPropValue(properties, "newTimeLimits").contains(",")) {                timeLimitsArr = PropUtils.getPropValue(properties, "newTimeLimits").split(",");            } else {                timeLimitsArr = new String[]{PropUtils.getPropValue(properties, "newTimeLimits")};            }            for (int j = 0; j <= timeLimitsArr.length - 1; j++) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, formType + "-" + timeLimitsArr[j] + "-time-0") + " to " + PropUtils.getPropValue(properties, formType + "-" + timeLimitsArr[j] + "-time-1"), basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='card-day-time-config margin-day ng-star-inserted']/div)[" + getDayNumber(timeLimitsArr[j]) + "]/div/span[2]")), "Card valid on from and to time for a day '" + timeLimitsArr[j] + "'");            }        }    }    /*    Method to get day number     */    public int getDayNumber(String dayName) {        int number = 0;        if (dayName.equalsIgnoreCase("Monday")) {            number = 1;        } else if (dayName.equalsIgnoreCase("Tuesday")) {            number = 2;        } else if (dayName.equalsIgnoreCase("Wednesday")) {            number = 3;        } else if (dayName.equalsIgnoreCase("Thursday")) {            number = 4;        } else if (dayName.equalsIgnoreCase("Friday")) {            number = 5;        } else if (dayName.equalsIgnoreCase("Saterday")) {            number = 6;        } else if (dayName.equalsIgnoreCase("Sunday")) {            number = 7;        }        return number;    }    /*    Method to validate identification method     */    public void validateIdentificationMethod(Scenario logger) {        By locator = By.cssSelector("div>form>ul>div>li>mat-checkbox>label>div>input");        String isChecked = commonPage.getAttributeValue(locator, "aria-checked");        By lblIdentificationMethod = By.cssSelector("div>form>ul>div>li>mat-checkbox>label>span");        String identificationMethods = basePage.userGetTextFromWebElement(logger, lblIdentificationMethod);        PropUtils.setProps("orderCard-IdentificationMethod", identificationMethods, baseUtils.testDataFilePath);    }    /*    Method to change card status to active     */    public void makeCardStatusToActive(Properties properties, String cardNo) {        String cardsQuery = "select c.card_no,c.card_oid from cards c\n" +                "inner join accounts a on a.account_oid = c.account_oid\n" +                "inner join m_customers mcust on mcust.customer_no = a.account_no\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " " +                "and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'" +                " and c.card_no like '%" + PropUtils.getPropValue(properties, cardNo) + "%'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(cardsQuery);        commonDBUtils.executeUpdateQuery("update cards set card_status_oid=864 where card_no=" + queryResults.get("CARD_NO"));        commonDBUtils.executeUpdateQuery("update card_status_logs set CARD_STATUS_OID=864 where CARD_OID=" + queryResults.get("CARD_OID"));        commonDBUtils.executeUpdateQuery("update cards set card_status_oid=870 where card_no=" + queryResults.get("CARD_NO"));        commonDBUtils.executeUpdateQuery("update card_status_logs set CARD_STATUS_OID=870 where CARD_OID=" + queryResults.get("CARD_OID"));    }    /*    Method to validate success message of order card     */    public void validateOrderCardSuccessMessage(Scenario logger, String actionOfCard, String noOfCard) {        commonPage.sleepForFewSeconds(3);        if (basePage.getStatusOfElement(By.cssSelector("div[class='header']>div"))) {            logger.log("Error message displayed in review page of card '" + basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='header']>div")) + "'");        }//        Boolean isPresent = basePage.whetherElementPresent(logger, By.cssSelector("div[class='header']>div"));//        if (isPresent) {//            logger.log("Success message of order card is " + basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='header']>div")));//        }        String successMessage = "";//        basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='snackbar-text']"));        String cardNo = "";        if (actionOfCard.equalsIgnoreCase("orderCard")) {            successMessage = basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='header']>div"));            if (successMessage.contains("went wrong")) {                Assert.fail("Card has not been ordered Something went wrong message displayed");            } else {                cardNo = successMessage.substring(13, 18);                try{                    Integer.parseInt(cardNo);                }catch(NumberFormatException e){                    commonPage.assertTwoStrings(logger,"<5 digit card no>",cardNo,"Order card success message");                }                PropUtils.setProps(noOfCard, cardNo, baseUtils.testDataFilePath);                PropUtils.setProps("Latest-CardNumber", cardNo, baseUtils.testDataFilePath);                PropUtils.setProps("Cards-cardNumber", cardNo, baseUtils.testDataFilePath);            }        }        if (actionOfCard.equalsIgnoreCase("editCard")) {            if (noOfCard.equalsIgnoreCase("reIssueWithDiffCardNo")) {                successMessage = basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='header']>div"));                cardNo = successMessage.substring(10, 15);                PropUtils.setProps("ReissuedCardNumber-FromEditCard", cardNo, baseUtils.testDataFilePath);                makeCardStatusToActive(PropUtils.getProps(baseUtils.testDataFile), "ReissuedCardNumber-FromEditCard");            }        }        if (actionOfCard.equalsIgnoreCase("replaceCard")) {            successMessage = basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='snackbar-text']"));            cardNo = successMessage.substring(32, 37);            PropUtils.setProps("ReplaceRe-IssuedCardNumber", cardNo, baseUtils.testDataFilePath);            PropUtils.setProps("Latest-CardNumber", cardNo, baseUtils.testDataFilePath);        }        if (actionOfCard.equalsIgnoreCase("EditReIssue")) {            cardNo = successMessage.substring(9, 14);            PropUtils.setProps("EditRe-IssuedCardNumber", cardNo, baseUtils.testDataFilePath);            PropUtils.setProps("Latest-CardNumber", cardNo, baseUtils.testDataFilePath);        }        if (actionOfCard.equalsIgnoreCase("ChangePinType")) {            cardNo = PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile), "cardNumberToPerformAnAction");            cardNo = cardNo.substring(cardNo.length() - 6);            commonPage.validateTextUsingtag(logger, "PIN type for card ****" + cardNo + " has been updated", "div");        }        if (actionOfCard.equalsIgnoreCase("ChangeCardStatus")) {            cardNo = PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile), "cardNumberToPerformAnAction");            cardNo = cardNo.substring(cardNo.length() - 6);            commonPage.sleepForFewSeconds(1);            commonPage.validateTextUsingtag(logger, "Card status has been updated for ****" + cardNo, "div");        }        if (actionOfCard.equalsIgnoreCase("ManageAutoReissue")) {            cardNo = PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile), "autoReissueRecordCardNo");            cardNo = cardNo.substring(cardNo.length() - 6);            commonPage.validateTextUsingtag(logger, "Card ****" + cardNo + " has been updated", "div");        }    }    ///// Methods to change the card status from 'Requested Not issued' to 'No transactions'    public void changeCardStatusFromRequestedNotIssuedToNoTransactions(Scenario logger, String fromStatus, String toStatus) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select card_oid from cards where card_no like '%" + PropUtils.getPropValue(properties, "Latest-CardNumber") + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        String cardOid = queryResults.get("CARD_OID");        query = " select cs.card_status_oid,description as ifcsstatus from card_status cs\n" +                " inner join m_clients mc on mc.client_mid = cs.client_mid\n" +                " where cs.description = '" + toStatus + "' and mc.short_name = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";        queryResults = commonDBUtils.getQueryResultsOnMap(query);        query = "update card_status_logs set CARD_STATUS_OID=" + queryResults.get("CARD_STATUS_OID") + " where CARD_OID=" + cardOid;        commonDBUtils.executeUpdateQuery(query);        query = "update cards set CARD_STATUS_OID=" + queryResults.get("CARD_STATUS_OID") + " where CARD_OID=" + cardOid;        commonDBUtils.executeUpdateQuery(query);    }    /*    Method to get all card product names     */    public String getAllCardProductsBasedOnAccount(List<Map<String, String>> queryResults, String accountNo) {        String products = "";        for (int i = 0; i <= queryResults.size() - 1; i++) {            if (i == queryResults.size() - 1) {                products = products + queryResults.get(i).get("CARDPRODUCT");            } else {                products = products + queryResults.get(i).get("CARDPRODUCT") + ",";            }        }        return products;    }    /*    Method to get all card product names     */    public String getAllCardProductIdsBasedOnProductDescription(List<Map<String, String>> queryResults, String productDescriptions) {        String prodDescriptions[] = {productDescriptions};        if (productDescriptions.contains(",")) {            prodDescriptions = productDescriptions.split(",");        }        String productIds = "";        for (int i = 0; i <= prodDescriptions.length - 1; i++) {            for (int j = 0; j <= queryResults.size() - 1; j++) {                if (prodDescriptions[i].equalsIgnoreCase(queryResults.get(j).get("CARDPRODUCT"))) {                    if (i == prodDescriptions.length - 1) {                        productIds = productIds + queryResults.get(j).get("CARD_PRODUCT_OID");                        break;                    } else {                        productIds = productIds + queryResults.get(j).get("CARD_PRODUCT_OID") + ",";                    }                }            }        }        return productIds;    }    /*    Method to get card statuses in single quote     */    public String getCardStatusesInSingleQuite(String cardStatuses) {        String value = "";        String statuses[] = {cardStatuses};        if (cardStatuses.contains(",")) {            statuses = cardStatuses.split(",");        }        for (int i = 0; i <= statuses.length - 1; i++) {            if (i == statuses.length - 1) {                value = value + statuses[i];            } else {                value = value + statuses[i] + "','";            }        }        return value;    }    /*    Method to get all card statuses based on client     */    public String getAllCardStatusesBasedOnClient() {        String query = "select * from card_status_ols cso\n" +                "inner join m_clients mc on mc.client_mid = cso.client_mid\n" +                "where mc.short_name = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";        String cardStatuses = "";        List<Map<String, String>> queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        for (int i = 0; i < queryResults.size() - 1; i++) {            if (i == queryResults.size() - 1) {                cardStatuses = cardStatuses + queryResults.get(i).get("DESCRIPTION");            } else {                cardStatuses = cardStatuses + queryResults.get(i).get("DESCRIPTION") + ",";            }        }        return cardStatuses;    }    /*    Method to get user status codes based on user status description     */    public String getCardStatusidsBasedOnCardStatusDescription(String dbCardStatusDescription) {        Map<String, String> userStatusesIdsMap;        String cardStatusesIds = "";        String arrCardStatuses[] = {dbCardStatusDescription};        if (dbCardStatusDescription.contains(",")) {            arrCardStatuses = dbCardStatusDescription.split(",");        }        for (int j = 0; j <= arrCardStatuses.length - 1; j++) {            userStatusesIdsMap = commonDBUtils.getQueryResultsOnMap("select card_status_oid from card_status_ols cso\n" +                    "inner join m_clients mc on mc.client_mid = cso.client_mid where mc.short_name = '" +                    PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "' and cso.description = '" + arrCardStatuses[j] + "'");            if (j == arrCardStatuses.length - 1) {                cardStatusesIds = cardStatusesIds + (userStatusesIdsMap.get("CARD_STATUS_OID"));            } else {                cardStatusesIds = cardStatusesIds + (userStatusesIdsMap.get("CARD_STATUS_OID")) + ",";            }        }        return cardStatusesIds;    }    /*    Enter alternate address in Delivery address stepper     */    public void enterAlternateAddressOrSelectPrimaryAddress(Scenario logger, String radioButtonName) {        List<WebElement> radioButtonNames = basePage.getListOfElements(logger, By.cssSelector("div[class='mat-radio-label-content']"));//        List<WebElement> radioButtons = basePage.getListOfElements(logger,By.xpath("//mat-radio-button[@class='mat-radio-button mat-accent mat-radio-checked']/label/div[2]"));        List<WebElement> radioButtons = basePage.getListOfElements(logger, By.cssSelector("div[class='mat-radio-container']>input"));        for (int i = 0; i <= radioButtonNames.size() - 1; i++) {            if (radioButtonNames.get(i).getText().equalsIgnoreCase(radioButtonName)) {                commonPage.clickUsingJSExecutor(logger, radioButtons.get(i));            }        }    }    /*    Method to get first character in capital letter in a sentence     */    public void getFirstLetterIsCapital(String text) {        String field[] = text.split(" ");        String fieldValue = "";        String value = "";        for (int k = 0; k <= field.length - 1; k++) {            char c[] = field[k].toCharArray();            c[0] = Character.toUpperCase(c[0]);            value = new String(c);            fieldValue = fieldValue + value;        }    }    /*    Method to handle driverId, drivername licensePlate, vehicleDescription based on card Type     */    public void handleDriverIDDriverNameLicensePlateVehicleDescription(Scenario logger, String formType, String fieldName) {        StringBuffer stringBuffer = new StringBuffer();        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (PropUtils.getPropValue(properties, formType + "-cardType").equalsIgnoreCase("vehicle")) {            if (fieldName.equalsIgnoreCase("vehicleDescription") || fieldName.equalsIgnoreCase("licensePlate")) {                stringBuffer.delete(0, stringBuffer.length());                stringBuffer.append(PasswordGenerator.generateAlphaNumeric(logger, Integer.parseInt("8")));                if (formType.equalsIgnoreCase("edit") || formType.equalsIgnoreCase("clone")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-" + fieldName),                            commonPage.getAttributeValue(By.cssSelector("mav-input[name='" + fieldName + "']>input"), "ng-reflect-model"),                            "Vehicle description value in " + formType + " page");                }                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='" + fieldName + "']>input"), stringBuffer.toString());                PropUtils.setProps(formType + "-" + fieldName, stringBuffer.toString(), baseUtils.testDataFilePath);                logger.log("value '" + stringBuffer.toString() + "' has been entered in " + fieldName + " field");            }        } else if (PropUtils.getPropValue(properties, formType + "-cardType").equalsIgnoreCase("driver")) {            if (fieldName.equalsIgnoreCase("driverName") || fieldName.equalsIgnoreCase("driverId")) {                stringBuffer.delete(0, stringBuffer.length());                stringBuffer.append(PasswordGenerator.generateAlphaNumeric(logger, Integer.parseInt("8")));                if (formType.equalsIgnoreCase("edit") || formType.equalsIgnoreCase("clone")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-" + fieldName),                            commonPage.getAttributeValue(By.cssSelector("mav-input[name='" + fieldName + "']>input"), "ng-reflect-model"),                            "Vehicle description value in " + formType + " page");                }                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='" + fieldName + "']>input"), stringBuffer.toString());                PropUtils.setProps(formType + "-" + fieldName, stringBuffer.toString(), baseUtils.testDataFilePath);                logger.log("value '" + stringBuffer.toString() + "' has been entered in " + fieldName + " field");            }        } else {            stringBuffer.delete(0, stringBuffer.length());            stringBuffer.append(PasswordGenerator.generateAlphaNumeric(logger, Integer.parseInt("8")));            if (formType.equalsIgnoreCase("edit") || formType.equalsIgnoreCase("clone")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-" + fieldName),                        commonPage.getAttributeValue(By.cssSelector("mav-input[name='" + fieldName + "']>input"), "ng-reflect-model"),                        "Vehicle description value in " + formType + " page");            }            basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='" + fieldName + "']>input"), stringBuffer.toString());            PropUtils.setProps(formType + "-" + fieldName, stringBuffer.toString(), baseUtils.testDataFilePath);            logger.log("value '" + stringBuffer.toString() + "' has been entered in " + fieldName + " field");        }    }    /*    Method to handle velocity limits in order card page     */    public void handleVelocityLimitsInOrderCardPage(Scenario logger, String pageAction, String cardControlProfileAction) {        List<WebElement> labels = basePage.getListOfElements(logger, By.cssSelector("div[class='ng-star-inserted']>mat-form-field>div>div>div[class='mat-form-field-infix']>span>label>mat-label"));        List<WebElement> textBoxes = basePage.getListOfElements(logger, By.cssSelector("div[class='ng-star-inserted']>mat-form-field>div>div>div[class='mat-form-field-infix']>input"));        StringBuffer sb = new StringBuffer();        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        for (int i = 0; i <= labels.size() - 1; i++) {            if (cardControlProfileAction.equalsIgnoreCase("default") || cardControlProfileAction.equalsIgnoreCase("private")) {                PropUtils.setProps(pageAction + "-" + labels.get(i).getText().replaceAll(" ", "-"), "", baseUtils.testDataFilePath);            } else {                if (labels.get(i).getText().contains("Volume")) {                    if (pageAction.equalsIgnoreCase("clone") || pageAction.equalsIgnoreCase("edit")) {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-" + labels.get(i).getText().replaceAll(" ", "-")), textBoxes.get(i).getText(), labels.get(i).getText() + " field in " + pageAction + " page");                        textBoxes.get(i).clear();                        textBoxes.get(i).sendKeys("15.56");                        textBoxes.get(i).sendKeys(Keys.TAB);                        PropUtils.setProps(pageAction + "-" + labels.get(i).getText().replaceAll(" ", "-"), "15.56 Liters", baseUtils.testDataFilePath);                    } else {                        textBoxes.get(i).clear();                        textBoxes.get(i).sendKeys("12.5");                        textBoxes.get(i).sendKeys(Keys.TAB);                        PropUtils.setProps(pageAction + "-" + labels.get(i).getText().replaceAll(" ", "-"), "12.5 Liters", baseUtils.testDataFilePath);                    }                } else {                    if (pageAction.equalsIgnoreCase("clone") || pageAction.equalsIgnoreCase("edit")) {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add" + labels.get(i).getText().replaceAll(" ", "-")), textBoxes.get(i).getText(), labels.get(i).getText() + " field in " + pageAction + " page");                    }                    textBoxes.get(i).clear();                    textBoxes.get(i).sendKeys("8.6");                    textBoxes.get(i).sendKeys(Keys.TAB);//                commonPage.assertTwoStrings(logger, "Enter a valid whole numbers", basePage.userGetTextFromWebElement(logger, By.cssSelector("mat-error[class='error-role mat-error ng-star-inserted']")), "Error message for field '" + labels.get(i).getText());                    textBoxes.get(i).clear();                    sb.delete(0, sb.length());                    sb.append(PasswordGenerator.generateNumeric(2));                    textBoxes.get(i).sendKeys(sb.toString());                    PropUtils.setProps(pageAction + "-" + labels.get(i).getText().replaceAll(" ", "-"), sb.toString(), baseUtils.testDataFilePath);                }            }        }    }    /*    Method to enter Alternate address     */    public void enterAlternateAddress(Scenario logger, String pageAction) {        usersPage.enterValueBasedOfItsType(logger, "RandomAlphanumericWithFewSpecialChars", "contactName", pageAction, "cards", "10", "@&$#_");        PropUtils.setProps("cards" + "-" + "contactName", usersPage.getValueFromCorrespondingTextFieldInEditUser(logger, "contactName"), baseUtils.testDataFilePath);        usersPage.enterValueBasedOfItsType(logger, "5919 Trussville Crossings Pkwy,Birmingham AL 35235", "addressLine", pageAction, "cards", "10", "@&$#_");        PropUtils.setProps("cards" + "-" + "addressLine", usersPage.getValueFromCorrespondingTextFieldInEditUser(logger, "addressLine"), baseUtils.testDataFilePath);        usersPage.enterValueBasedOfItsType(logger, "Birmingham", "suburb", pageAction, "cards", "10", "@&$#_");        PropUtils.setProps("cards" + "-" + "suburb", usersPage.getValueFromCorrespondingTextFieldInEditUser(logger, "suburb"), baseUtils.testDataFilePath);        usersPage.enterValueBasedOfItsType(logger, "Numeric", "postalCode", pageAction, "cards", "10", "@&$#_");        PropUtils.setProps("cards" + "-" + "postalCode", usersPage.getValueFromCorrespondingTextFieldInEditUser(logger, "postalCode"), baseUtils.testDataFilePath);        basePage.userClick(logger, By.cssSelector("mav-select[name='state']"));        basePage.selectRandomValueFromDropDown(logger, By.xpath("//mat-option[contains(@class,'mat-option mat-focus-indicator ng-star-inserted')]/span"));        PropUtils.setProps("cards-state", basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[name='state']>mat-select>div>div>span>span")), baseUtils.testDataFilePath);        logger.log("selected random value of state drop down");    }    /*    Method to validate send your card pin to the following address section     */    public void validateSendYourCardPinToTheFollowingAddressSection(Scenario logger, String isAlternateAddressRequired, String pageAction) {        String expectedAddress = commonPage.getPrimaryOrCardAddressSection();        String selectedRadioButton = basePage.userGetTextFromWebElement(logger, By.xpath("(//mat-radio-button[contains(@class,'mat-radio-checked')]/label/div[@class='mat-radio-label-content'])[1]"));        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "PrimaryOrCardAddress"), selectedRadioButton, "Selected Radio button name");        PropUtils.setProps("cards" + "-" + pageAction + "ExistingAddressRadioBtnName", PropUtils.getPropValue(properties, "PrimaryOrCardAddress"), baseUtils.testDataFilePath);        if (expectedAddress.equalsIgnoreCase("Alternate address")) {            Map<String, String> queryResults = commonPage.getCardContactAddressForACard(PropUtils.getPropValue(properties, "cardNumberToPerformAnAction"));            commonPage.validateAlternateAddressSection(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CONTACT_NAME"), commonPage.getSpecificValueFromMapObject(queryResults, "ADDRESS_LINE"), commonPage.getSpecificValueFromMapObject(queryResults, "SUBURB"), commonPage.getSpecificValueFromMapObject(queryResults, "STATE"), commonPage.getSpecificValueFromMapObject(queryResults, "COUNTRY"), commonPage.getSpecificValueFromMapObject(queryResults, "POSTAL_CODE"));        } else {            commonPage.assertTwoStrings(logger, expectedAddress, basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='row primary-address']/ols-address[@ng-reflect-is-from='delivery-address']/div)[1]")), "Primary Or Card Address");        }        List<WebElement> allRadioButtonNames = basePage.getListOfElements(logger, By.xpath("//mat-radio-button[contains(@class,'mat-radio-button mat-accent')]/label/div[@class='mat-radio-label-content']"));        List<WebElement> allRadioButtons = basePage.getListOfElements(logger, By.xpath("//mat-radio-button[contains(@class,'mat-radio-button mat-accent')]/label/div[@class='mat-radio-container']"));        if (isAlternateAddressRequired.equalsIgnoreCase("Yes") || isAlternateAddressRequired.equalsIgnoreCase("True")) {            for (int i = 0; i <= allRadioButtonNames.size() - 1; i++) {                if (!selectedRadioButton.equalsIgnoreCase("Alternate address")) {                    if (allRadioButtonNames.get(i).getText().equalsIgnoreCase("Alternate address")) {                        PropUtils.setProps("cards" + "-" + pageAction + "SelectedAddressRadioBtnName", "Alternate address", baseUtils.testDataFilePath);                        basePage.userClickJSExecutor(logger, By.xpath("(//div[@class='mat-radio-container'])[" + (i + 1) + "]"));                        commonPage.enterNewAlternateAddress(logger);                        break;                    }                } else {                    if (!allRadioButtonNames.get(i).getText().equalsIgnoreCase("Alternate address")) {                        allRadioButtons.get(i).click();                        PropUtils.setProps("cards" + "-" + pageAction + "SelectedAddressRadioBtnName", allRadioButtonNames.get(i).getText(), baseUtils.testDataFilePath);                        break;                    }                }            }        }        properties = PropUtils.getProps(baseUtils.testDataFile);        String pinAddress = commonPage.getPINAddressForSelectedCustomer(logger);        if (pinAddress.equalsIgnoreCase("")) {            try {                driver.findElement(By.cssSelector("span[class='send-pin']"));            } catch (Exception e) {                logger.log("Send pin is not available as expected - because PIN address is not present for selected customer");            }        } else {            commonPage.verifyPresenceOfText(logger, "Send PIN");            commonPage.assertTwoStrings(logger, "PIN address:", basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='pin-contact-address']>div>mat-radio-group>div>mat-radio-button>label>div[class='mat-radio-label-content']")), "Selected address radio button name when PIN contact is available for selected customer");            commonPage.assertTwoStrings(logger, pinAddress, basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='pin-contact-address']>div>mat-radio-group>div>div[class='row primary-address']>ols-address[ng-reflect-is-from='delivery-address']>div")), "PIN Address");        }    }    /*    Method to get primary address in cards module     */    public String getPrimaryAddressInCardsModule(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select mcust.CONTACT_NAME as name,a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code from m_customers mcust\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join addresses a on a.address_oid = (case WHEN mcust.postal_address_oid is not null THEN mcust.postal_address_oid\n" +                "ELSE mcust.street_address_oid END)\n" +                "left join states s on s.state_oid = a.state_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ") and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        String expectedPrimaryAddress = "";        if (!commonPage.getSpecificValueFromMapObject(queryResults, "NAME").equalsIgnoreCase("")) {            expectedPrimaryAddress = queryResults.get("NAME") + "\n" + commonPage.getAddressLineSeparated(queryResults);        } else {            expectedPrimaryAddress = commonPage.getAddressLineSeparated(queryResults);        }        return expectedPrimaryAddress;    }    /*    Method to get cardContactAddress     */    public String getAddressBasedOnContactExternalCode(String externalCode) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select distinct a.address_oid,con.contact_oid,con.CONTACT_NAME as name,a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code from cards c\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join contact_types ct on ct.client_mid = mc.client_mid\n" +                "left join contacts con on con.contact_type_oid = ct.contact_type_oid and con.member_oid = mcust.customer_mid\n" +                "left join contacts cnts on cnts.contact_oid = con.contact_oid\n" +                "left join addresses a on a.address_oid = (case WHEN con.postal_address_oid is not null THEN con.postal_address_oid\n" +                "ELSE con.street_address_oid END)\n" +                "left join states s on s.state_oid = a.state_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ") and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'" +                " and ct.external_code = '" + externalCode + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        String expectedCardAddress = "";        if (!commonPage.getSpecificValueFromMapObject(queryResults, "NAME").equalsIgnoreCase("")) {            expectedCardAddress = queryResults.get("NAME") + "\n" + commonPage.getAddressLineSeparated(queryResults);        } else {            expectedCardAddress = commonPage.getAddressLineSeparated(queryResults);        }        return expectedCardAddress;    }    /*       Method to get alternate address        */    public Map<String, String> getCardContactAddress() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select distinct a.address_oid,cnts.card_contact_oid,cnts.CONTACT_NAME as name,a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code from cards c\n" +                " left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                " left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                " left join contact_types ct on ct.client_mid = mc.client_mid\n" +                " left join card_contacts cnts on cnts.card_contact_oid = c.card_contact_oid\n" +                " left join addresses a on a.address_oid = (case WHEN cnts.postal_address_oid is not null THEN cnts.postal_address_oid\n" +                " ELSE cnts.street_address_oid END)\n" +                " left join states s on s.state_oid = a.state_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ") and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);//        String expectedAlternateAddress = "";//        if (!commonPage.getSpecificValueFromMapObject(queryResults, "NAME").equalsIgnoreCase("")) {//            expectedAlternateAddress = queryResults.get("NAME") + "\n" + commonPage.getAddressLineSeparated(queryResults);//        } else {//            expectedAlternateAddress = commonPage.getAddressLineSeparated(queryResults);//        }        return queryResults;    }    /*    Validate specific address     */    public void validateSpecificAddress(Scenario logger, String addressType) {        List<WebElement> addresses = basePage.getListOfElements(logger, By.xpath("//div[@class='csr-delivery-address']/mat-radio-group/div/div/mat-radio-button/label/div/span"));        for (int i = 0; i <= addresses.size() - 1; i++) {            if (addresses.get(i).getText().equalsIgnoreCase(addressType)) {                if (addressType.equalsIgnoreCase("Primary account address:")) {                    commonPage.assertTwoStrings(logger, getPrimaryAddressInCardsModule(logger), basePage.userGetTextFromWebElement(logger, By.cssSelector("(//div[@class='csr-delivery-address']/mat-radio-group/div/div/div/ols-address)[" + i + "]")), "Primary account address:");                } else if (addressType.equalsIgnoreCase("PIN address:")) {                    commonPage.assertTwoStrings(logger, getAddressBasedOnContactExternalCode("PIN"), basePage.userGetTextFromWebElement(logger, By.cssSelector("(//div[@class='csr-delivery-address']/mat-radio-group/div/div/div/ols-address)[" + i + "]")), "Primary account address:");                } else if (addressType.equalsIgnoreCase("Card contact address:")) {                    commonPage.assertTwoStrings(logger, getAddressBasedOnContactExternalCode("CARD"), basePage.userGetTextFromWebElement(logger, By.cssSelector("(//div[@class='csr-delivery-address']/mat-radio-group/div/div/div/ols-address)[" + i + "]")), "Primary account address:");                }            }        }    }    /*    Method to validate address after ordering a card     */    public void validateAddressInCardsModuleAfterOrderingACard(Scenario logger, String externalCode) {        String query = "";        Map<String, String> queryResults = null;        List<WebElement> labels = null;        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        queryResults = getCardContactAddress();        if (!commonPage.getSpecificValueFromMapObject(queryResults, "ADDRESS_OID").equalsIgnoreCase("")) {            commonPage.assertTwoStrings(logger, "Alternate address", basePage.userGetTextFromWebElement(logger, By.xpath("//div[@class='csr-delivery-address']/mat-radio-group/div/div/mat-radio-button[contains(@class,'mat-accent mat-radio-checked')]/label/div/span")), "Selected address type should be 'Alternate address'");        } else {            String cardAddress = getAddressBasedOnContactExternalCode("CARD");            if (!cardAddress.equalsIgnoreCase("")) {                commonPage.assertTwoStrings(logger, "Card contact address:", basePage.userGetTextFromWebElement(logger, By.xpath("//div[@class='csr-delivery-address']/mat-radio-group/div/div/mat-radio-button[contains(@class,'mat-accent mat-radio-checked')]/label/div/span")), "Selected address type should be 'Card contact address:'");                commonPage.assertTwoStrings(logger, cardAddress, basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='csr-delivery-address']/mat-radio-group/div/div/div/ols-address)[1]")), "Address of card");            } else {                String primaryAddress = getPrimaryAddressInCardsModule(logger);                commonPage.assertTwoStrings(logger, "Primary account address:", basePage.userGetTextFromWebElement(logger, By.xpath("//div[@class='csr-delivery-address']/mat-radio-group/div/div/mat-radio-button[contains(@class,'mat-accent mat-radio-checked')]/label/div/span")), "Selected address type should be 'Primary account address:'");                commonPage.assertTwoStrings(logger, primaryAddress, basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='csr-delivery-address']/mat-radio-group/div/div/div/ols-address)[1]")), "Primary Address");            }        }    }    /*    Method to get card number based on specific action     */    public void getCardNumberBasedOnSpecificAction(Scenario logger, String actionApplicable, String actionType) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String queryCommon = "";        String queryCard = "";        String userJoinCond = "";        String userWhereCond = "";        if(PropUtils.getPropValue(properties,"cardsModuleUserType").equalsIgnoreCase("OLS")){            userJoinCond = " inner join user_members um on um.member_oid = mcu.customer_mid inner join users u on u.user_oid = um.user_oid ";            userWhereCond = " and u.logon_id = '"+PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"currentUserName")+"'";        }        queryCommon = "select distinct mcu.customer_no,mcu.client_mid,mcu.pin_offset as cus_pin,mcu.is_pin_req,mcu.customer_mid,\n" +                " SUBSTR(c.card_no, LENGTH(c.card_no) - 5, 6) as card_no,c.pin_offset,c.card_product_oid,c.pin_option_cid,c.card_oid,c.IS_GENERATED_PIN,c.update_count,c.LAST_UPDATED_AT from cards c \n" +                " left join card_controls cc on cc.card_control_profile_oid = c.card_control_profile_oid\n" +                " inner join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                " inner join card_offers co on co.card_offer_oid = cp.card_offer_oid\n" +                " inner join m_customers mcu on mcu.customer_mid = c.customer_mid\n" +                " inner join m_clients mc on mc.client_mid = mcu.client_mid\n" +userJoinCond+                "left join accounts a on a.account_no = mcu.customer_no\n" +                "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                " where c.replace_Card_oid is null and mcu.is_pin_req ='Y' \n" +//                " and cc.product_restriction_oid is not null " +                userWhereCond+" and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and mcu.customer_no != '800902' and ast.description like '%Active%'\n";        if (actionApplicable.equalsIgnoreCase("True") || actionApplicable.equalsIgnoreCase("Yes")) {            queryCard = queryCommon + " and c.card_Status_oid  in (select card_Status_oid from card_status where is_Valid='Y' and is_active='Y')\n" +                    "and c.card_Status_oid  in (select card_Status_oid from card_Status_ols_mapping where is_Status_change='Y')";        } else {            queryCard = queryCommon + " and c.card_Status_oid  in (select card_Status_oid from card_status where is_Valid='N' and is_active='N')\n" +                    "and c.card_Status_oid  in (select card_Status_oid from card_Status_ols_mapping where is_Status_change='N') and rownum<=10\n" +                    "order by c.LAST_UPDATED_AT desc";        }        if (actionType.equalsIgnoreCase("resetPin")) {            queryCard = queryCard + "and cp.card_pin_control_cid in (5110,5120,5130) and rownum<=10 order by c.LAST_UPDATED_AT desc";        } else if (actionType.equalsIgnoreCase("changePin") || actionType.equalsIgnoreCase("changePinTypeWishPin")) {            String queryChangePin = queryCard + "and cp.card_pin_control_cid !=5150 and mcu.pin_offset is not null and c.IS_GENERATED_PIN = 'N' order by c.LAST_UPDATED_AT desc\n";            List<Map<String, String>> queryResultsForChangePin = commonDBUtils.getAllRowsOfQueryResultsOnListMap(queryChangePin);            if (queryResultsForChangePin.size() == 0) {                String queryCardChangePIN = queryCard + " and cp.card_pin_control_cid !=5150 and c.IS_GENERATED_PIN = 'N' and rownum<=10 order by c.LAST_UPDATED_AT desc";                queryResultsForChangePin = commonDBUtils.getAllRowsOfQueryResultsOnListMap(queryCardChangePIN);                if (queryResultsForChangePin.size() != 0) {                    String query = "update m_customers set pin_offset = 1111 where customer_no = '" + queryResultsForChangePin.get(0).get("CUSTOMER_NO")                            + "' and client_mid=" + queryResultsForChangePin.get(0).get("CLIENT_MID");                    commonDBUtils.executeUpdateQuery(query);                    queryCard = queryCard + " and cp.card_pin_control_cid !=5150 and mcu.customer_no = '" + queryResultsForChangePin.get(0).get("CUSTOMER_NO") + "' and rownum<=10 order by c.LAST_UPDATED_AT desc";                } else {                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                    PropUtils.setProps("skipReason", "None of the customers eligible to perform action '" + actionType + "'", baseUtils.testDataFilePath);                }            } else {                queryCard = queryChangePin;            }//            queryCard = queryCard + "and cp.card_pin_control_cid !=5150 and mcu.pin_offset is not null and rownum<=10 order by c.LAST_UPDATED_AT desc\n";        } else if (actionType.equalsIgnoreCase("reissuePin")) {            queryCard = queryCard + "and cp.card_pin_control_cid !=5150 and rownum<=10 order by c.LAST_UPDATED_AT desc\n";        } else if (actionType.equalsIgnoreCase("changePinTypeSysPin")) {            queryCard = queryCard + "and c.is_generated_pin = 'Y' and mcu.pin_offset is not null and rownum<=10 order by c.LAST_UPDATED_AT desc";        } else {            queryCard = queryCard + " and rownum<=10 order by c.LAST_UPDATED_AT desc\n";        }        properties = PropUtils.getProps(baseUtils.testDataFile);        if (!PropUtils.getPropValue(properties, "testStatus").equalsIgnoreCase("Skipped")) {            logger.log(queryCard);            List<Map<String, String>> queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(queryCard);            if (queryResults.size() == 0) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "There are no cards available to perform an action : " + actionType, baseUtils.testDataFilePath);            } else {                PropUtils.setProps("cardNumberToPerformAnAction", queryResults.get(0).get("CARD_NO"), baseUtils.testDataFilePath);                PropUtils.setProps("accountNumberInCardsModule", queryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                PropUtils.setProps("Cards-accountNumber", queryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);            }        }//        if(actionType.equalsIgnoreCase("ReplaceCard")){//            String query = "update cards set expires_on = sysdate+10 where card_no like '%"+queryResults.get(0).get("CARD_NO")+"' and customer_mid = (\n" +//                    " select customer_mid from m_customers where customer_no = "+queryResults.get(0).get("CUSTOMER_NO")+"" +//                    " and client_mid = "+PropUtils.getPropValue(properties, "ClientMID");//            commonDBUtils.executeUpdateQuery(query);//        }    }    /*    Method to get account number which is eligible for create a new cardControlProfile     */    public void getAccountNumberWhichIsEligibleToCreateANewCardControlProfile() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        StringBuffer query = new StringBuffer();        query.append("select a.account_no from accounts a\n" +                "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                "left join m_customers mcust on mcust.customer_mid = a.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where ast.description like '%Active%' and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID"));        List<Map<String, String>> activeAccounts = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query.toString());        List<Map<String, String>> cardOffersAndCardProductsOfAnAccount = null;        List<Map<String, String>> cardOffersAndCardProductsWhichHasCardControlProfiles = null;        for (int i = 0; i <= activeAccounts.size() - 1; i++) {            query.delete(0, query.length());            query.append("select co.description as cardoffer, co.card_offer_oid,cp.description as cardProduct,cp.card_product_oid,\n" +                    "mcust.customer_mid from m_customers mcust\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join customer_card_offers cco on cco.customer_mid = mcust.customer_mid\n" +                    "left join card_offers co on co.card_offer_oid = cco.card_offer_oid\n" +                    "left join card_products cp on cp.card_offer_oid = co.card_offer_oid\n" +                    "where mcust.customer_no = '" + activeAccounts.get(i).get("ACCOUNT_NO") + "' and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID"));            cardOffersAndCardProductsOfAnAccount = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query.toString());            query.delete(0, query.length());            query.append("select co.description as cardoffer, cp.description as cardProduct from card_control_profiles ccp \n" +                    "left join card_offers co on co.card_offer_oid = ccp.card_offer_oid\n" +                    "left join card_products cp on cp.card_product_oid = ccp.card_product_oid\n" +                    "left join m_customers mcust on mcust.customer_mid = ccp.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mcust.customer_no = '" + activeAccounts.get(i).get("ACCOUNT_NO") + "' and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID"));            cardOffersAndCardProductsWhichHasCardControlProfiles = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query.toString());        }    }    /*    Method to get combination of cardoffer and cardproduct which are eligible to create private card control profile     */    public void getAccountNumberWhichIsEligibleToCreateCCP(Scenario logger, String action) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        PropUtils.setProps("cardControlProfileAction", action, baseUtils.testDataFilePath);        List<Map<String, String>> cardOfferCardProductCustomerLevel = null;        String query = "";        query = "select distinct(mcust.customer_no),co.description as cardOffer from m_customers mcust\n" +                "inner join card_control_profiles ccp on mcust.customer_mid = ccp.customer_mid\n" +                "left join accounts a on a.account_no = mcust.customer_no\n" +                "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                "left join customer_card_offers cco on cco.customer_mid = mcust.customer_mid\n" +                "left join card_offers co on co.card_offer_oid = ccp.card_offer_oid\n" +                "where ccp.customer_mid is not null and ccp.card_product_oid is null\n" +                "and mcust.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and ast.description like '%Active%' order by mcust.customer_no asc";        logger.log("Query :: " + query);        logger.log("---------------------------------------------------------");        List<Map<String, String>> activeAccounts = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        for (int k = 0; k <= activeAccounts.size() - 1; k++) {            query = "select co.description as cardoffer, cp.description as cardProduct\n" +                    " from m_customers mcust\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join customer_card_offers cco on cco.customer_mid = mcust.customer_mid\n" +                    "left join card_offers co on co.card_offer_oid = cco.card_offer_oid\n" +                    "left join card_products cp on cp.card_offer_oid = co.card_offer_oid\n" +                    "where mcust.customer_no = '" + activeAccounts.get(k).get("CUSTOMER_NO") + "'\n" +                    "and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and co.description = '" + activeAccounts.get(k).get("CARDOFFER") + "'";            logger.log("Query :: " + query);            logger.log("---------------------------------------------------------");            cardOfferCardProductCustomerLevel = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            List<Map<String, String>> cardOfferCardProductCardControlProfileLevel = null;            query = "select co.description as cardOffer, cp.description as cardProduct \n" +                    "from card_control_profile_enquiry ccpe\n" +                    "left join m_customers mcust on mcust.customer_mid = ccpe.customer_mid\n" +                    "left join application_types at on at.card_program_oid = ccpe.card_program_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join card_offers co on co.card_offer_oid = ccpe.card_offer_oid\n" +                    "left join card_products cp on cp.card_product_oid = ccpe.card_product_oid\n" +                    "where ((ccpe.profile_category_cid = 502 and ccpe.profile_criteria_cid = 6702 \n" +                    "and ccpe.application_type_oid = at.application_type_oid) or (ccpe.profile_category_cid = 502 and ccpe.profile_criteria_cid = 6703 and \n" +                    "ccpe.card_program_oid = mcust.card_program_oid) or (ccpe.profile_category_cid = 503 and ccpe.profile_criteria_cid = 6704 \n" +                    "and ccpe.customer_mid = mcust.customer_mid)) and mcust.customer_no = '" +                    activeAccounts.get(k).get("CUSTOMER_NO") + "' and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID")                    + ") and ccpe.effective_on <= mc.processing_date and ccpe.expires_on >=mc.processing_date";            logger.log("Query :: " + query);            logger.log("---------------------------------------------------------");            cardOfferCardProductCardControlProfileLevel = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            if (PropUtils.getPropValue(properties, "cardControlNameErrorChecking").equalsIgnoreCase("True")) {                if (cardOfferCardProductCardControlProfileLevel.size() > 1) {                    continue;                }            }            for (int i = 0; i <= cardOfferCardProductCardControlProfileLevel.size() - 1; i++) {                for (int j = 0; j <= cardOfferCardProductCustomerLevel.size() - 1; j++) {                    if (cardOfferCardProductCustomerLevel.get(j).entrySet().equals(cardOfferCardProductCardControlProfileLevel.get(i).entrySet())) {                        cardOfferCardProductCustomerLevel.remove(j);                        break;                    }                }            }            if (action.equalsIgnoreCase("noteligible")) {                query = "select ccpe.card_control_profile_oid,ccpe.description,co.description as cardOffer, cp.description as cardProduct \n" +                        "from card_control_profile_enquiry ccpe\n" +                        "left join m_customers mcust on mcust.customer_mid = ccpe.customer_mid\n" +                        "left join application_types at on at.card_program_oid = ccpe.card_program_oid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join card_offers co on co.card_offer_oid = ccpe.card_offer_oid\n" +                        "left join card_products cp on cp.card_product_oid = ccpe.card_product_oid\n" +                        "where ((ccpe.profile_category_cid = 502 and ccpe.profile_criteria_cid = 6702 \n" +                        "and ccpe.application_type_oid = at.application_type_oid) or (ccpe.profile_category_cid = 502 and ccpe.profile_criteria_cid = 6703 and \n" +                        "ccpe.card_program_oid = mcust.card_program_oid) or (ccpe.profile_category_cid = 503 and ccpe.profile_criteria_cid = 6704 \n" +                        "and ccpe.customer_mid = mcust.customer_mid)) and mcust.customer_no = '" +                        activeAccounts.get(0).get("CUSTOMER_NO") + "' and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID")                        + ") and ccpe.effective_on <= mc.processing_date and ccpe.expires_on >=mc.processing_date and ccpe.card_product_oid is not null";                logger.log("Query :: " + query);                logger.log("---------------------------------------------------------");                List<Map<String, String>> allRowsOfQueryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);                if (allRowsOfQueryResults.size() >= 1) {                    getPosPromptsAndStoreInTestDataProperties(allRowsOfQueryResults.get(0).get("CARD_CONTROL_PROFILE_OID"), "CardControlProfile");                    PropUtils.setProps("accountNumberInCardsModule-notEligibleForAddCCP", activeAccounts.get(k).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                    PropUtils.setProps("ccp-cardOffer-notEligibleForAddCCP", allRowsOfQueryResults.get(0).get("CARDOFFER"), baseUtils.testDataFilePath);                    PropUtils.setProps("ccp-cardProduct-notEligibleForAddCCP", allRowsOfQueryResults.get(0).get("CARDPRODUCT"), baseUtils.testDataFilePath);                    PropUtils.setProps("ccp-cardControlProfile-notEligibleForAddCCP", allRowsOfQueryResults.get(0).get("DESCRIPTION"), baseUtils.testDataFilePath);                    PropUtils.setProps("ccp-cardControlProfileName-Exists", allRowsOfQueryResults.get(0).get("DESCRIPTION"), baseUtils.testDataFilePath);                } else {                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                    PropUtils.setProps("skipReason", "There is no card control profiles to validate those errors", baseUtils.testDataFilePath);                }                break;            }            if (cardOfferCardProductCustomerLevel.size() >= 1) {                logger.log("Customer no is : " + activeAccounts.get(k).get("CUSTOMER_NO"));                PropUtils.setProps("accountNumberInCardsModule", activeAccounts.get(k).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                PropUtils.setProps("ccp-cardOffer", cardOfferCardProductCustomerLevel.get(0).get("CARDOFFER"), baseUtils.testDataFilePath);                PropUtils.setProps("ccp-cardProduct", cardOfferCardProductCustomerLevel.get(0).get("CARDPRODUCT"), baseUtils.testDataFilePath);                break;            }            if (k == activeAccounts.size() - 1) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            }        }        if (activeAccounts.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "No customer is available to execute this scenario", baseUtils.testDataFilePath);        }    }    /*    Method to get posPrompts based on card control profile     */    public void getPosPromptsAndStoreInTestDataProperties(String oid, String typeOfOID) {        String query = "";        if (typeOfOID.equalsIgnoreCase("CardControlProfile")) {            query = "select IS_VEHICLE_ID_REQ,IS_DRIVER_ID_REQ,IS_ORDER_NUMBER_REQ,IS_FLEET_ID_REQ,\n" +                    "IS_CUSTOMER_SELECTION_REQ,IS_ODOMETER_REQ,IS_ODOMETER_VALIDATION from card_controls where card_control_profile_oid = " + oid;        }        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        StringBuilder posPrompts = new StringBuilder();//            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_VEHICLE_ID_REQ").equalsIgnoreCase("Y")) {//                posPrompts = new StringBuilder("VehicleId" + ",");//            }//            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_DRIVER_ID_REQ").equalsIgnoreCase("Y")) {//                posPrompts.append("DriverId").append(",");//            }//            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_ORDER_NUMBER_REQ").equalsIgnoreCase("Y")) {//                posPrompts.append("OrderNumber").append(",");//            }//            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_FLEET_ID_REQ").equalsIgnoreCase("Y")) {//                posPrompts.append("FleetId").append(",");//            }//            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_CUSTOMER_SELECTION_REQ").equalsIgnoreCase("Y")) {//                posPrompts.append("CustomerSelection").append(",");//            }        if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_ODOMETER_REQ").equalsIgnoreCase("Y")) {            posPrompts.append("Odometer").append(",");        }        if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_ODOMETER_VALIDATION").equalsIgnoreCase("Y")) {            posPrompts.append("OdometerValidation");        }        PropUtils.setProps("PosPromptsBasedOnOID", posPrompts.toString(), baseUtils.testDataFilePath);    }    /*    Method to handle velocity limits based on module     */    public void handleVelocityLimitsBasedOnModule(Scenario logger, String moduleName, String actionOfModule) {        String query = "";        List<WebElement> fieldLabels = new ArrayList<>();        List<WebElement> fieldInputs = new ArrayList<>();        try {            fieldLabels = driver.findElements(By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>span>label>mat-label"));            fieldInputs = driver.findElements(By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>input"));        } catch (Exception e) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "Velocity limits are not available for selected card to validate", baseUtils.testDataFilePath);        }        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (!PropUtils.getPropValue(properties, "testStatus").equalsIgnoreCase("Skipped")) {            List<Map<String, String>> velocityLimits = new ArrayList<>();            query = "select vt.DESCRIPTION as velocityField,vt.MIN_VALUE,vt.MAX_VALUE from velocity_types vt\n" +                    "left join m_clients mc on mc.client_mid = vt.client_mid\n" +                    "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");            velocityLimits = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            if (actionOfModule.equalsIgnoreCase("add")) {                if (moduleName.equalsIgnoreCase("cardControlProfile")) {                    StringBuilder velocityLimitValue = new StringBuilder();                    for (int i = 0; i <= velocityLimits.size() - 1; i++) {                        for (int j = 0; j <= fieldLabels.size() - 1; j++) {                            if (fieldLabels.get(j).getText().equals(velocityLimits.get(i).get("VELOCITYFIELD"))) {                                fieldInputs.get(j).clear();                                velocityLimitValue.delete(0, velocityLimitValue.length());                                velocityLimitValue.append(getIntegerNumberInBetweenLimit(commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MIN_VALUE"), commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MAX_VALUE")));                                fieldInputs.get(j).sendKeys(velocityLimitValue.toString());                                PropUtils.setProps(moduleName + "-" + actionOfModule + "-" + velocityLimits.get(i).get("VELOCITYFIELD"), velocityLimitValue.toString(), baseUtils.testDataFilePath);                            }                        }                    }                }            } else if (actionOfModule.equalsIgnoreCase("Edit")) {                query = "select va.max_value, vt.DESCRIPTION as velocityField from card_control_profiles ccp \n" +                        "left join card_controls cc on cc.card_control_profile_oid = ccp.card_control_profile_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = ccp.customer_mid\n" +                        "inner join card_ctrl_vel_assignments ccva on ccva.CARD_CONTROL_OID = cc.CARD_CONTROL_OID\n" +                        "inner join velocity_assignments va on va.VELOCITY_ASSIGNMENT_OID = ccva.VELOCITY_ASSIGNMENT_OID\n" +                        "inner join velocity_types vt on vt.velocity_type_oid = va.velocity_type_oid\n" +                        "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'\n" +                        " and mcust.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") +                        " and ccp.description = '" + PropUtils.getPropValue(properties, "ccp-cardControlProfileName-Exists") + "'";                List<Map<String, String>> velocityLimitsForSpecificCCP = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);                boolean isContain = false;                StringBuilder velocityLimitValue = new StringBuilder();                for (int j = 0; j <= fieldLabels.size() - 1; j++) {                    for (int i = 0; i <= velocityLimitsForSpecificCCP.size() - 1; i++) {                        if (fieldLabels.get(j).getText().equals(velocityLimitsForSpecificCCP.get(i).get("VELOCITYFIELD"))) {                            isContain = true;                            commonPage.assertTwoStrings(logger, velocityLimitsForSpecificCCP.get(i).get("MAX_VALUE"), commonPage.getAttributeValue(By.xpath("(//div[@class='stepper-content']/form/div/mat-form-field/div/div/div/input)[" + (i + 1) + "]"), "ng-reflect-model"), fieldLabels.get(j).getText());                        }                    }                    if (!isContain) {                        for (int i = 0; i <= velocityLimits.size() - 1; i++) {                            if (fieldLabels.get(j).getText().equals(velocityLimits.get(i).get("VELOCITYFIELD"))) {                                fieldInputs.get(j).clear();                                velocityLimitValue.delete(0, velocityLimitValue.length());                                velocityLimitValue.append(getIntegerNumberInBetweenLimit(commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MIN_VALUE"), commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MAX_VALUE")));                                fieldInputs.get(j).sendKeys(velocityLimitValue.toString());                                PropUtils.setProps(moduleName + "-" + actionOfModule + "-" + velocityLimits.get(i).get("VELOCITYFIELD"), velocityLimitValue.toString(), baseUtils.testDataFilePath);                            }                        }                    }                }            }        } else {            logger.log(PropUtils.getPropValue(properties, "skipReason"));            PropUtils.setProps("testStatus", "", baseUtils.testDataFilePath);        }    }    /*    Method to get integer number in between limit     */    public int getIntegerNumberInBetweenLimit(String minValue, String maxValue) {        int number = 0;        boolean isMinValueRequired = false;        boolean isMaxValueRequired = false;        if (!minValue.equalsIgnoreCase("")) {            isMinValueRequired = true;        }        if (!maxValue.equalsIgnoreCase("")) {            isMaxValueRequired = true;        }        boolean minValueConditionSatisfied = false;        boolean maxValueConditionSatisfied = false;        int integer = 0;        for (int i = 0; i <= 10000; i++) {            integer = Integer.parseInt(PasswordGenerator.generateNumeric(2));            if (isMinValueRequired) {                if (integer >= Integer.parseInt(minValue)) {                    minValueConditionSatisfied = true;                }            } else {                minValueConditionSatisfied = true;            }            if (isMaxValueRequired) {                if (integer <= Integer.parseInt(maxValue)) {                    maxValueConditionSatisfied = true;                }            } else {                maxValueConditionSatisfied = true;            }            if (maxValueConditionSatisfied && minValueConditionSatisfied) {                number = integer;                break;            }        }        return number;    }    /*    Method to validate review page of card control profile     */    public void validateReviewPageOfCardControlProfile(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select c.currency_symbol from currencies c\n" +                "left join m_clients mc on mc.currency_oid = c.currency_oid\n" +                "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        String currencySymbol = commonDBUtils.getQueryResultsOnMap(query).get("CURRENCY_SYMBOL");        List<WebElement> labels = basePage.getListOfElements(logger, By.cssSelector("div[class='panel-expanded-field-label-card-control-csr']"));        List<WebElement> text = basePage.getListOfElements(logger, By.cssSelector("div[class='panel-expanded-field-text-card-control-csr']"));        int countOfScrollDown = 0;        for (int i = 0; i <= labels.size() - 1; i++) {            if (labels.get(i).getText().trim().equalsIgnoreCase("Card offer") && !PropUtils.getPropValue(properties, "ccp-cardOffer").equalsIgnoreCase("")) {                if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "ccp-cardOffer-notEligibleForAddCCP"), text.get(i).getText(), "Card Offer");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "ccp-cardOffer"), text.get(i).getText(), "Card Offer");                }                i = i + 1;            }            if (labels.get(i).getText().trim().equalsIgnoreCase("Card product") && !PropUtils.getPropValue(properties, "ccp-cardProduct").equalsIgnoreCase("")) {                if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "ccp-cardProduct-notEligibleForAddCCP"), text.get(i).getText(), "Card Product");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "ccp-cardProduct"), text.get(i).getText(), "Card Product");                }                i = i + 1;            }            if (labels.get(i).getText().trim().equalsIgnoreCase("Card control profile name") && !PropUtils.getPropValue(properties, "newCardControlProfile-cardControlProfileName").equalsIgnoreCase("")) {                if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "CCP-cardControlProfileName"), text.get(i).getText(), "Card control profile name");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "newCardControlProfile-cardControlProfileName"), text.get(i).getText(), "Card control profile name");                }                i = i + 1;            }            if (labels.get(i).getText().trim().equalsIgnoreCase("Pos Prompts")) {                List<WebElement> posPrompts = new ArrayList<>();                if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                    if (!PropUtils.getPropValue(properties, "ccpEditPosPrompts1").equalsIgnoreCase("") || !PropUtils.getPropValue(properties, "ccpEditPosPrompts2").equalsIgnoreCase("")) {                        posPrompts = basePage.getListOfElements(logger, By.cssSelector("div[class='posprompts-list']>mat-list-item>div>div>div[class='ng-star-inserted']>div"));                        for (int j = 0; j <= posPrompts.size() - 1; j++) {                            if (posPrompts.get(j).getText().equalsIgnoreCase("Odometer")) {                                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "ccpEditPosPrompts1"), posPrompts.get(j).getText(), "PosPrompts");                            }                            if (posPrompts.get(j).getText().equalsIgnoreCase("Odometer Validation")) {                                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "ccpEditPosPrompts2"), posPrompts.get(j).getText(), "PosPrompts");                            }                        }                    }                } else {                    if (!PropUtils.getPropValue(properties, "PosPrompts1").equalsIgnoreCase("") || !PropUtils.getPropValue(properties, "PosPrompts2").equalsIgnoreCase("")) {                        posPrompts = basePage.getListOfElements(logger, By.cssSelector("div[class='posprompts-list']>mat-list-item>div>div>div[class='ng-star-inserted']>div"));                        for (int j = 0; j <= posPrompts.size() - 1; j++) {                            if (posPrompts.get(j).getText().equalsIgnoreCase("Odometer")) {                                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "PosPrompts1"), posPrompts.get(j).getText(), "PosPrompts");                            }                            if (posPrompts.get(j).getText().equalsIgnoreCase("Odometer Validation")) {                                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "PosPrompts2"), posPrompts.get(j).getText(), "PosPrompts");                            }                        }                    }                }                i = i + 1;            }//            else {//                List<WebElement> productsSelected = basePage.getListOfElements(logger, By.cssSelector("div[class='product-selection']>div>div[class='ng-star-inserted']>div"));//                String selectedProducts = PropUtils.getPropValue(properties, "selectedProducts");//                String[] arrProducts = {selectedProducts};//                if (selectedProducts.contains(",")) {//                    arrProducts = selectedProducts.split(",");//                }//                for (int j = 0; j <= productsSelected.size() - 1; j++) {//                    if (selectedProducts.contains(productsSelected.get(j).getText())) {//                        logger.log(productsSelected.get(j).getText() + " is selected and displayed as expected");//                    } else {//                        logger.log(productsSelected.get(j).getText() + " product is not selected but displayed");//                    }//                }//                if (arrProducts.length == productsSelected.size()) {//                    logger.log("count of selected products expected : " + arrProducts.length + " , actual : " + productsSelected.size());//                }//                i = i + 1;//            }        }        StringBuilder sb = new StringBuilder();        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.cssSelector("mat-grid-list[class='mat-grid-list']>div>mat-grid-tile>figure>div>div[class='panel-expanded-field-label-card-control-csr']"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.cssSelector("mat-grid-list[class='mat-grid-list']>div>mat-grid-tile>figure>div>div[class='panel-expanded-field-text-card-control-csr']"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            if (labels.get(i).getText().contains("Limit")) {                sb.delete(0, sb.length());                if (countOfScrollDown == 0) {                    usersPage.scrollDown(logger);                    countOfScrollDown = 1;                }                if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                    sb.append(PropUtils.getPropValue(properties, "cardControlProfile-Edit-" + fieldNames.get(i).getText()));                    if (fieldValues.get(i).getText().contains(sb.toString())) {                        logger.log("Expected value is " + sb.toString());                        logger.log("Actual Value is " + fieldValues.get(i).getText());                    }                } else {                    sb.append(PropUtils.getPropValue(properties, "cardControlProfile-add-" + fieldNames.get(i).getText()));                    if (fieldValues.get(i).getText().contains(sb.toString())) {                        logger.log("Expected value is " + sb.toString());                        logger.log("Actual Value is " + fieldValues.get(i).getText());                    }                }            }        }    }    /*    Method to get distinct card offers for a customer     */    public List<Map<String, String>> getDistinctCardOffersForACustomer(Scenario logger, String action) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        query = "select mcust.card_program_oid,cfo.customer_mid,cf.description as cardoffer \n" +                "from card_offers cf \n" +                "inner join customer_card_offers cfo on cfo.card_offer_oid = cf.card_offer_oid \n" +                "inner join m_customers mcust on mcust.customer_mid = cfo.customer_mid\n" +                "inner join applications at on at.application_oid=mcust.application_oid\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid and mc.client_mid = cf.client_mid\n"+                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") +                "' and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";        logger.log("Card Data query : " + query);        List<Map<String, String>>queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        PropUtils.setProps(action+"-cardOffer",queryResults.get(0).get("CARDOFFER"),baseUtils.testDataFilePath);        return queryResults;    }    /*    Method to get card products based on cardoffer     */    public List<Map<String, String>> getCardProductsBasedOnCardOffer(String cardOffer, String action) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select cp.description as cardproduct from card_offers cf\n" +                "left join card_products cp on cp.card_offer_oid = cf.card_offer_oid\n" +                "left join customer_card_offers cfo on cfo.card_offer_oid = cf.card_offer_oid\n" +                "left join m_customers mcust on mcust.customer_mid = cfo.customer_mid\n" +                "left join applications at on at.application_oid=mcust.application_oid and cp.application_type_oid = at.application_type_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid and mc.client_mid = cf.client_mid\n" +                "left join constants const on const.constant_oid = cp.card_type_cid\n"+                "where mcust.customer_no in (" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") +                ") and mc.client_mid in (" +                PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                "and cf.description = '" + cardOffer + "'";        List<Map<String, String>>queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        PropUtils.setProps(action+"-cardProduct",queryResults.get(0).get("CARDPRODUCT"),baseUtils.testDataFilePath);        return queryResults;    }    /*    Method to get card type based on cardoffer and cardproduct     */    public List<Map<String, String>> getCardTypesBasedOnCardOfferAndCardProduct(String cardOffer, String cardProduct) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select const.description as cardType,mcust.name as name,mcust.embossing_name,cp.EXPIRY_MONTHS" +                " from card_offers co\n" +                "left join card_products cp on cp.card_offer_oid = co.card_offer_oid\n" +                "left join constants const on const.constant_oid = cp.card_type_cid\n" +                "left join customer_card_offers cfo on cfo.card_offer_oid = co.card_offer_oid\n" +                "left join m_customers mcust on mcust.customer_mid = cfo.customer_mid\n" +                "left join applications at on at.application_oid=mcust.application_oid and cp.application_type_oid = at.application_type_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid and mc.client_mid = co.client_mid\n" +                "where mcust.customer_no in (" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") +                ") and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                "and co.description = '" + cardOffer + "' and cp.description = '" + cardProduct + "'";        return commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);    }    /*    Method to card oid based on card no     */    public String getCardOidBasedOnCardNo(String cardNo) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        query = "select card_oid from cards c\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where card_no like ('%" + PropUtils.getPropValue(properties, "cardNumberToPerformAnAction") + "')" +                " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ") and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'";        Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);        return queryResults.get("CARD_OID");    }    /*    Method to validate card status based in db based on card oid     */    public void validateCardStatusBasedOnCardOid(Scenario logger, String cardOids, String expStatus) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select c.card_no,cs.description from cards c\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + "" +                " and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'" + "" +                " and c.card_oid in (" + cardOids + ")";        List<Map<String, String>> allRowsOfQueryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        for (int i = 0; i < allRowsOfQueryResults.size() - 1; i++) {            commonPage.assertTwoStrings(logger, expStatus, allRowsOfQueryResults.get(i).get("DESCRIPTION"), "card Status for a card " + allRowsOfQueryResults.get(i).get("CARD_NO"));        }    }    /*    Method to select card offer,cardProduct,cardType drop downs     */    public void handleCardOfferCardProductCardTypeDropDownsInOrderCardPage(Scenario logger, String nameOfDropDown, String action, List<Map<String, String>> validationControlFields) {        String valueOfElement = "";        String selectedValue = "";        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        commonPage.sleepForFewSeconds(1);        List<Map<String, String>> cardData = new ArrayList<>();        Map<String, String> validationControlRecord = new HashMap<>();        String valueToBeSelected = "";        if (nameOfDropDown.equalsIgnoreCase("cardOffer")) {            cardData = getDistinctCardOffersForACustomer(logger, action);            properties = PropUtils.getProps(baseUtils.testDataFile);            valueToBeSelected = PropUtils.getPropValue(properties, action + "-cardOffer");        }        if (nameOfDropDown.equalsIgnoreCase("cardProduct")) {            cardData = getCardProductsBasedOnCardOffer(PropUtils.getPropValue(properties, action + "-cardOffer"),action);            properties = PropUtils.getProps(baseUtils.testDataFile);            valueToBeSelected = PropUtils.getPropValue(properties, action + "-cardProduct");        }        if (nameOfDropDown.equalsIgnoreCase("cardType")) {            cardData = getCardTypesBasedOnCardOfferAndCardProduct(PropUtils.getPropValue(properties, action + "-cardOffer"), PropUtils.getPropValue(properties, action + "-cardProduct"));            properties = PropUtils.getProps(baseUtils.testDataFile);            valueToBeSelected = cardData.get(0).get(nameOfDropDown.toUpperCase());        }        String isDisabled = "";        validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName(nameOfDropDown, validationControlFields);        if (nameOfDropDown.equalsIgnoreCase("cardType")) {            if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") && nameOfDropDown.equalsIgnoreCase("cardType")) {                basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'Card type *')]"));            }            if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional") && nameOfDropDown.equalsIgnoreCase("cardType")) {                basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'Card type')]"));            }            isDisabled = commonPage.getAttributeValue(By.cssSelector("mav-input[name='" + nameOfDropDown + "']>input"), "ng-reflect-is-disabled");        } else {            if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") && nameOfDropDown.equalsIgnoreCase("cardOffer")) {                basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'Card offer *')]"));            } else if (!validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("hidden") && nameOfDropDown.equalsIgnoreCase("cardOffer")) {                basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'Card offer')]"));            }            if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") && nameOfDropDown.equalsIgnoreCase("cardProduct")) {                basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'Card product *')]"));            } else if (!validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("hidden") && nameOfDropDown.equalsIgnoreCase("cardProduct")) {                basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'Card product')]"));            }            isDisabled = commonPage.getAttributeValue(By.cssSelector("mav-select[name='" + nameOfDropDown + "']"), "ng-reflect-is-disabled");        }        if (isDisabled.equalsIgnoreCase("False")) {            if (nameOfDropDown.equalsIgnoreCase("cardType")) {                valueOfElement = commonPage.getAttributeValue(By.cssSelector("mav-input[name='" + nameOfDropDown + "']>input"), "ng-reflect-model");            } else {                valueOfElement = commonPage.getAttributeValue(By.cssSelector("mav-select[name='" + nameOfDropDown + "']"), "ng-reflect-model");            }        }        Boolean singleValue = true;        for (int i = 0; i <= cardData.size() - 1; i++) {            if (i == cardData.size() - 1) {                break;            }            if (cardData.get(i).get(nameOfDropDown.toUpperCase()).equals(cardData.get(i + 1).get(nameOfDropDown.toUpperCase()))) {                singleValue = true;            } else {                singleValue = false;            }        }        if (singleValue) {            if (valueOfElement.equals(cardData.get(0).get(nameOfDropDown.toUpperCase()))) {                if (isDisabled.equalsIgnoreCase("False")) {                    logger.log("The drop down " + nameOfDropDown + " value is pre-selected and it is disabled");                } else {                    logger.log("Drop down is enabled even though it has only one value");                }            }        } else {            if (action.equalsIgnoreCase("add")) {                if (commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='" + nameOfDropDown + "']>mat-select"), "ng-reflect-is-disabled").equalsIgnoreCase("false")) {                    basePage.userClick(logger, By.name(nameOfDropDown));//                selectedValue = cardData.get(0).get(nameOfDropDown.toUpperCase());//                if (nameOfDropDown.equalsIgnoreCase("cardProduct")) {//                    if (cardData.size() > 1) {//                        selectedValue = cardData.get(1).get(nameOfDropDown.toUpperCase());//                    }//                }                    commonPage.clickButtonUsingSpan(logger, valueToBeSelected);                }                if (isDisabled.equalsIgnoreCase("False")) {                    logger.log("The drop down " + nameOfDropDown + " is enabled");                }            } else if (action.equalsIgnoreCase("clone")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-" + nameOfDropDown), commonPage.getAttributeValue(By.cssSelector("mav-select[name='" + nameOfDropDown + "']"), "ng-reflect-model"), nameOfDropDown + " in " + action + " page");                basePage.userClick(logger, By.name(nameOfDropDown));                selectedValue = cardData.get(1).get(nameOfDropDown.toUpperCase());                commonPage.clickButtonUsingSpan(logger, selectedValue);                if (isDisabled.equalsIgnoreCase("False")) {                    logger.log("The drop down " + nameOfDropDown + " is enabled");                }            } else if (action.equalsIgnoreCase("edit")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "orderCard-" + nameOfDropDown), valueOfElement, nameOfDropDown + " in " + action + " page");                if (isDisabled.equalsIgnoreCase("true")) {                    logger.log("The drop down " + nameOfDropDown + " is enabled");                } else {                    logger.log("The drop down " + nameOfDropDown + " is disabled");                }            }        }        if (selectedValue.equalsIgnoreCase("")) {            selectedValue = cardData.get(0).get(nameOfDropDown.toUpperCase());        }        if (nameOfDropDown.equalsIgnoreCase("cardType")) {            PropUtils.setProps(action + "-" + nameOfDropDown, selectedValue, baseUtils.testDataFilePath);        }        PropUtils.setProps("card_currentAction", action, baseUtils.testDataFilePath);    }    /*    Method to handle field based on validation control     */    public void handleFieldBasedOnValidationControl(Scenario logger, String fieldName, List<Map<String, String>> validationControlFields, String form) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        Map<String, String> validationControlRecord = new HashMap<>();        if (fieldName.equalsIgnoreCase("webAuthCode")) {            validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("cardVO.Web_Authentication_Code", validationControlFields);            checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Web authentication code");            if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                String webAuthenticationCode = PasswordGenerator.generateNumeric(10);                if (form.equalsIgnoreCase("add")) {                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='webAuthCode']>input"), webAuthenticationCode);                    PropUtils.setProps("add-webAuthCode", webAuthenticationCode, baseUtils.testDataFilePath);                } else if (form.equalsIgnoreCase("Edit")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-webAuthCode"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='webAuthCode']>input"), "ng-reflect-model"), "Web Auth Code");                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='webAuthCode']>input"), webAuthenticationCode);                    PropUtils.setProps("edit-webAuthCode", webAuthenticationCode, baseUtils.testDataFilePath);                }            } else {                logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");            }        }        if (fieldName.equalsIgnoreCase("costCentreCode")) {            validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("costCentreCode", validationControlFields);            checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Cost centre");            if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                if (form.equalsIgnoreCase("add")) {                    selectCostCentreInCardsModule(logger, "existing", form);                } else if (form.equalsIgnoreCase("Edit")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "add-costCentre"), commonPage.getAttributeValue(By.cssSelector("ols-autocomplete[ng-reflect-name='costCentre']>mat-form-field>div>div>div>input"), "ng-reflect-model"), "Web Auth Code");                    basePage.userClick(logger, By.cssSelector("button[class='autocomp-mat-button mat-focus-indicator mat-button mat-icon-button mat-button-base ng-star-inserted']>span>mav-svg-icon>fa-icon"));                    selectCostCentreInCardsModule(logger, "", form);                }            } else {                logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");            }        }        if (fieldName.equalsIgnoreCase("driverName")) {            if (form.equalsIgnoreCase("edit") || form.equalsIgnoreCase("clone")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, form + "-driverName"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='driverName']>input"), "ng-reflect-model"), "Driver name in '" + form + "' card page");                if (PropUtils.getPropValue(properties, form + "-fieldWhichHasCardReissueTypeCid").equalsIgnoreCase("driverName")) {                    validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("driverVO.driver_name", validationControlFields);                    checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Driver name");                    if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                        handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                    } else {                        logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                    }                }            } else {                validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("driverVO.driver_name", validationControlFields);                checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Driver name");                if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                    handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                } else {                    logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                }            }        }        if (fieldName.equalsIgnoreCase("driverId")) {            if (form.equalsIgnoreCase("edit") || form.equalsIgnoreCase("clone")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, form + "-driverId"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='driverId']>input"), "ng-reflect-model"), "Driver name in '" + form + "' card page");                if (PropUtils.getPropValue(properties, form + "-fieldWhichHasCardReissueTypeCid").equalsIgnoreCase("driverId")) {                    validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("driverVO.driver_id", validationControlFields);                    checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Driver ID");                    if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                        handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                    } else {                        logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                    }                }            } else {                validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("driverVO.driver_id", validationControlFields);                checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Driver ID");                if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                    handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                } else {                    logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                }            }        }        if (fieldName.equalsIgnoreCase("vehicleDescription")) {            if (form.equalsIgnoreCase("edit") || form.equalsIgnoreCase("clone")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, form + "-vehicleID"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='vehicleDescription']>input"), "ng-reflect-model"), "VehicleDescription in '" + form + "' card page");                if (PropUtils.getPropValue(properties, form + "-fieldWhichHasCardReissueTypeCid").equalsIgnoreCase("vehicleId")) {                    validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("vehicleVO.description", validationControlFields);                    checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Vehicle ID");                    if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                        handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                    } else {                        logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                    }                }            } else {                validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("vehicleVO.description", validationControlFields);                checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "Vehicle ID");                if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                    handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                } else {                    logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                }            }        }        if (fieldName.equalsIgnoreCase("licensePlate")) {            if (form.equalsIgnoreCase("edit") || form.equalsIgnoreCase("clone")) {                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, form + "-licensePlate"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='licensePlate']>input"), "ng-reflect-model"), "Driver name in '" + form + "' card page");                if (PropUtils.getPropValue(properties, form + "-fieldWhichHasCardReissueTypeCid").equalsIgnoreCase("licensePlate")) {                    validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("vehicleVO.license_plate", validationControlFields);                    checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "License plate");                    if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                        handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                    } else {                        logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                    }                }            } else {                validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("vehicleVO.license_plate", validationControlFields);                checkLabelStatusBasedOnValidationControl(logger, validationControlRecord, "License plate");                if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                    handleDriverIDDriverNameLicensePlateVehicleDescription(logger, form, fieldName);                } else {                    logger.log("No action can be performed for the field '" + fieldName + "' because which has status '" + validationControlRecord.get("FIELDSTATUS") + "'");                }            }        }    }    /*    Method to check label status based on validation control behavior     */    public void checkLabelStatusBasedOnValidationControl(Scenario logger, Map<String, String> validationControlRecord, String fieldName) {        if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {            if (basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'" + fieldName + " *')]"))) {                logger.log("label " + fieldName + " displayed as expected");            } else {                logger.log("label " + fieldName + " not displayed which is not expected");            }        } else if (!validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("hidden")) {            if (basePage.whetherElementPresent(logger, By.xpath("//mat-label[contains(text(),'" + fieldName + "')]"))) {                logger.log("label " + fieldName + " displayed as expected");            } else {                logger.log("label " + fieldName + " not displayed which is not expected");            }        }    }    /*    Method to handle POSPrompts in order card page     */    public void handleSectionsBasedOnValidationControls(Scenario logger, String section, String form, String cardControlType, String profileType, List<Map<String, String>> validationControlFields) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (!cardControlType.equalsIgnoreCase("existing") && !cardControlType.equalsIgnoreCase("private")) {            PropUtils.setProps(form + "-cardControlProfile", cardControlType, baseUtils.testDataFilePath);        }        String cardOffer = "";        String cardProduct = "";        String productRestrictionOid = "";        if (form.equalsIgnoreCase("add")) {            cardOffer = PropUtils.getPropValue(properties, "add-cardOffer");            cardProduct = PropUtils.getPropValue(properties, "add-cardProduct");        } else if (form.equalsIgnoreCase("edit")) {            cardOffer = PropUtils.getPropValue(properties, "edit-cardOffer");            cardProduct = PropUtils.getPropValue(properties, "edit-cardProduct");        } else if (form.equalsIgnoreCase("clone")) {            cardOffer = PropUtils.getPropValue(properties, "clone-cardOffer");            cardProduct = PropUtils.getPropValue(properties, "clone-cardProduct");        }        if (section.equalsIgnoreCase("POSPrompts")) {            String cardControlProfileOid = "";            Map<String, String> cardControlProfileOidData = new HashMap<>();            String profileTypeCid = "";            if (profileType.equalsIgnoreCase("reference")) {                profileTypeCid = "502";            } else if (profileType.equalsIgnoreCase("private")) {                profileTypeCid = "503";            }            String query = "select ccpe.customer_mid,ccpe.card_oid,ccpe.description,ccpe.CARD_CONTROL_PROFILE_OID,co.description as cardOffer, cp.description as cardProduct \n" +                    ",ccpe.profile_category_cid,ccpe.PRODUCT_RESTRICTION_OID from card_control_profile_enquiry ccpe\n" +                    "left join m_customers mcust on mcust.customer_mid = ccpe.customer_mid\n" +                    "left join application_types at on at.card_program_oid = ccpe.card_program_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join card_offers co on co.card_offer_oid = ccpe.card_offer_oid\n" +                    "left join card_products cp on cp.card_product_oid = ccpe.card_product_oid\n" +                    "where ((ccpe.profile_category_cid = 502 and ccpe.profile_criteria_cid = 6702 \n" +                    "and ccpe.application_type_oid = at.application_type_oid) or (ccpe.profile_category_cid = 502 and ccpe.profile_criteria_cid = 6703 and \n" +                    "ccpe.card_program_oid = mcust.card_program_oid) or (ccpe.profile_category_cid = 503 and ccpe.profile_criteria_cid = 6704 \n" +                    "and (ccpe.customer_mid = mcust.customer_mid or ccpe.customer_mid is null)) and mcust.customer_no = '" +                    PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "' and \n" +                    "ccpe.effective_on <= mc.processing_date and ccpe.expires_on >=mc.processing_date and\n" +                    "mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and co.description = '" + cardOffer + "' " +                    "and (cp.description  = '" + cardProduct + "' or cp.description is null))";            logger.log(query);            List<Map<String, String>> cardControlProfiles = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            List<WebElement> ccpRadioBtns = basePage.getListOfElements(logger, By.xpath("//mat-radio-button[contains(@class,'mat-radio-checked')]"));            if (!PropUtils.getPropValue(properties, form + "-ccpCardOid").equalsIgnoreCase("")) {                if (ccpRadioBtns.size() == 2) {                    commonPage.assertTwoStrings(logger, "new", commonPage.getAttributeValue(By.xpath("(//mat-radio-button[contains(@class,'mat-radio-checked')])[2]"), "ng-reflect-value"), "Selected Radio button in " + form + " form");                } else {                    commonPage.assertTwoStrings(logger, "new", commonPage.getAttributeValue(By.xpath("(//mat-radio-button[contains(@class,'mat-radio-checked')])[1]"), "ng-reflect-value"), "Selected Radio button in " + form + " form");                }                query = "select cc.product_restriction_oid from card_controls cc\n" +                        "left join cards c on c.card_control_profile_oid = cc.card_control_profile_oid\n" +                        "inner join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where mc.client_mid = "+PropUtils.getPropValue(properties,"ClientMID")+                        " and mcust.customer_no = '"+PropUtils.getPropValue(properties,"accountNumberInCardsModule")                        +"' and c.card_oid = "+PropUtils.getPropValue(properties, form + "-ccpCardOid");                Map<String, String>queryResults = commonDBUtils.getQueryResultsOnMap(query);                productRestrictionOid = queryResults.get("PRODUCT_RESTRICTION_OID");            } else {                if (ccpRadioBtns.size() == 2) {                    commonPage.assertTwoStrings(logger, "existing", commonPage.getAttributeValue(By.xpath("(//mat-radio-button[contains(@class,'mat-radio-checked')])[2]"), "ng-reflect-value"), "Selected Radio button in " + form + " form");                } else {                    commonPage.assertTwoStrings(logger, "existing", commonPage.getAttributeValue(By.xpath("(//mat-radio-button[contains(@class,'mat-radio-checked')])[1]"), "ng-reflect-value"), "Selected Radio button in " + form + " form");                }//                commonPage.assertTwoStrings(logger, "existing", commonPage.getAttributeValue(By.xpath("//mat-radio-button[contains(@class,'cardprofile-radio mat-radio-button mat-accent mat-radio-checked')]"), "ng-reflect-value"), "Selected Radio button in " + form + " form");                if (cardControlProfiles.size() == 1) {                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cardControlProfile']"), "ng-reflect-is-disabled"), "carControlProfile drop down status");//                    if (!profileTypeCid.equalsIgnoreCase(cardControlProfiles.get(0).get("PROFILE_CATEGORY_CID"))) {//                        PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);//                        PropUtils.setProps("skipReason", "There is no '" + profileType + "' card control profile exists to execute this scenario", baseUtils.testDataFilePath);//                    } else {                    PropUtils.setProps(form + "-cardControlProfile", cardControlProfiles.get(0).get("DESCRIPTION"), baseUtils.testDataFilePath);                    cardControlProfileOid = cardControlProfiles.get(0).get("CARD_CONTROL_PROFILE_OID");                    productRestrictionOid = commonPage.getSpecificValueFromMapObject(cardControlProfiles.get(0), "PRODUCT_RESTRICTION_OID");//                    }                } else if (cardControlProfiles.size() > 1) {                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='cardControlProfile']>mat-select"));                    for (int i = 0; i <= cardControlProfiles.size() - 1; i++) {                        if (profileTypeCid.equalsIgnoreCase(cardControlProfiles.get(i).get("PROFILE_CATEGORY_CID")) || profileTypeCid.equalsIgnoreCase("")) {                            List<WebElement>ccps = basePage.getListOfElements(logger,By.cssSelector("span[class='mat-option-text']"));                            for(int j=0;j<=ccps.size()-1;j++) {                                if(ccps.get(j).getText().equalsIgnoreCase(cardControlProfiles.get(i).get("DESCRIPTION"))){                                    ccps.get(j).click();                                    break;                                }//                                commonPage.clickButtonUsingSpan(logger, cardControlProfiles.get(i).get("DESCRIPTION"));                            }                            PropUtils.setProps(form + "-cardControlProfile", cardControlProfiles.get(i).get("DESCRIPTION"), baseUtils.testDataFilePath);                            cardControlProfileOid = cardControlProfiles.get(i).get("CARD_CONTROL_PROFILE_OID");                            productRestrictionOid = commonPage.getSpecificValueFromMapObject(cardControlProfiles.get(i), "PRODUCT_RESTRICTION_OID");                            break;                        }                    }                }                PropUtils.setProps(form + "-cardControlProfileOID", cardControlProfileOid, baseUtils.testDataFilePath);            }            properties = PropUtils.getProps(baseUtils.testDataFile);            if (!PropUtils.getPropValue(properties, "testStatus").equalsIgnoreCase("Skipped")) {                String posPromptsQuery = "select IS_VEHICLE_ID_REQ,IS_DRIVER_ID_REQ,IS_ORDER_NUMBER_REQ,IS_FLEET_ID_REQ,IS_CUSTOMER_SELECTION_REQ,IS_ODOMETER_REQ,IS_ODOMETER_VALIDATION from card_controls where" +                        " card_control_profile_oid = " + PropUtils.getPropValue(properties, form + "-cardControlProfileOID");                cardControlProfileOidData = commonDBUtils.getQueryResultsOnMap(posPromptsQuery);            }//                }            if (!PropUtils.getPropValue(properties, "testStatus").equalsIgnoreCase("Skipped")) {                handlePOSPromptsBasedOnCardControlType(logger, cardControlProfileOidData, cardControlType, form);                PropUtils.setProps("productRestrictionOid", productRestrictionOid, baseUtils.testDataFilePath);            }        }//        else if(form.equalsIgnoreCase("Edit") || form.equalsIgnoreCase("Clone")){//            if(section.equalsIgnoreCase("POSPrompts")) {//                String posPromptsQuery = "select IS_VEHICLE_ID_REQ,IS_DRIVER_ID_REQ,IS_ORDER_NUMBER_REQ,IS_FLEET_ID_REQ,IS_CUSTOMER_SELECTION_REQ,IS_ODOMETER_REQ,IS_ODOMETER_VALIDATION from card_controls where" +//                        " card_control_profile_oid = " + PropUtils.getPropValue(properties, form + "-cardControlProfileOID");//                Map<String, String> cardControlProfileOidData = commonDBUtils.getQueryResultsOnMap(posPromptsQuery);//                handlePOSPromptsBasedOnCardControlType(logger, cardControlProfileOidData, cardControlType, form);//            }//        }        if (section.equalsIgnoreCase("ProductSelection")) {            handleProductSelectionInCardsModule(logger, PropUtils.getPropValue(properties, "productRestrictionOid"), form, cardControlType, validationControlFields);        }        if (section.equalsIgnoreCase("velocityLimits")) {            handleVelocityLimitsInCardsModule(logger, form, cardControlType);        }    }    /*    Method to handle location restriction     */    public void handleLocationRestriction(Scenario logger, String form, String cardControlType, String scenario) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (cardControlType.equalsIgnoreCase("newLocationRestriction") || PropUtils.getPropValue(properties, "accountNumberInCardsModule").equalsIgnoreCase("newPrivate")) {            if (!scenario.equalsIgnoreCase("noLocationRestriction")) {                String locationCategory = "";                String locationValues = "";                String query = "select description from constants where constant_type_oid = 123";                List<Map<String, String>> queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);                List<Map<String, String>> locationResValues = new ArrayList<>();                if (queryResults.size() == 0) {                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                    PropUtils.setProps("skipReason", "Location restriction categories are not available to handle 'location restriction' stepper in cards module", baseUtils.testDataFilePath);                } else {                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='locationCategory']>mat-select"));                    StringBuilder sb = new StringBuilder();                    if (scenario.equalsIgnoreCase("bothValues")) {                        for (int i = 0; i <= queryResults.size() - 1; i++) {                            sb.delete(0, sb.length());                            if (queryResults.get(i).get("DESCRIPTION").equalsIgnoreCase("location")) {                                sb.append("select name as description from m_locations where client_mid = ").append(PropUtils.getPropValue(properties, "ClientMID")).append(" and rownum<=30");                            }                            if (queryResults.get(i).get("DESCRIPTION").equalsIgnoreCase("Location Group")) {                                sb.append("select description from m_location_groups where client_mid = ").append(PropUtils.getPropValue(properties, "ClientMID")).append(" and rownum<=30");                            }                            if (queryResults.get(i).get("DESCRIPTION").equalsIgnoreCase("Geographic Area 1")) {                                sb.append("select ga.description from geographic_areas ga left join geographic_area_types gat on gat.GEOGRAPHIC_AREA_TYPE_OID = ga.GEOGRAPHIC_AREA_TYPE_OID where gat.client_mid = ").append(PropUtils.getPropValue(properties, "ClientMID")).append(" and GEOGRAPHIC_AREA_NO = 1 and rownum<=30");                            }                            if (queryResults.get(i).get("DESCRIPTION").equalsIgnoreCase("Geographic Area 2")) {                                sb.append("select ga.description from geographic_areas ga left join geographic_area_types gat on gat.GEOGRAPHIC_AREA_TYPE_OID = ga.GEOGRAPHIC_AREA_TYPE_OID where gat.client_mid = ").append(PropUtils.getPropValue(properties, "ClientMID")).append(" and GEOGRAPHIC_AREA_NO = 2 and rownum<=30");                            }                            if (queryResults.get(i).get("DESCRIPTION").equalsIgnoreCase("Geographic Area 3")) {                                sb.append("select ga.description from geographic_areas ga left join geographic_area_types gat on gat.GEOGRAPHIC_AREA_TYPE_OID = ga.GEOGRAPHIC_AREA_TYPE_OID where gat.client_mid = ").append(PropUtils.getPropValue(properties, "ClientMID")).append(" and GEOGRAPHIC_AREA_NO = 3 and rownum<=30");                            }                            if (queryResults.get(i).get("DESCRIPTION").equalsIgnoreCase("Geographic Area 4")) {                                sb.append("select ga.description from geographic_areas ga left join geographic_area_types gat on gat.GEOGRAPHIC_AREA_TYPE_OID = ga.GEOGRAPHIC_AREA_TYPE_OID where gat.client_mid = ").append(PropUtils.getPropValue(properties, "ClientMID")).append(" and GEOGRAPHIC_AREA_NO = 4 and rownum<=30");                            }                            if (queryResults.get(i).get("DESCRIPTION").equalsIgnoreCase("Geographic Area 5")) {                                sb.append("select ga.description from geographic_areas ga left join geographic_area_types gat on gat.GEOGRAPHIC_AREA_TYPE_OID = ga.GEOGRAPHIC_AREA_TYPE_OID where gat.client_mid = ").append(PropUtils.getPropValue(properties, "ClientMID")).append(" and GEOGRAPHIC_AREA_NO = 5 and rownum<=30");                            }                            locationResValues = commonDBUtils.getAllRowsOfQueryResultsOnListMap(sb.toString());                            if (locationResValues.size() != 0) {                                commonPage.clickButtonUsingSpan(logger, queryResults.get(i).get("DESCRIPTION"));                                commonPage.verifyPresenceOfText(logger, "Change to custom card profile");                                commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");                                basePage.userClick(logger, By.xpath("(//a[contains(text(),'Cancel')])[2]"));                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='locationCategory']>mat-select"));                                commonPage.clickButtonUsingSpan(logger, queryResults.get(i).get("DESCRIPTION"));                                commonPage.clickButtonUsingSpan(logger, "Approve");                                locationCategory = queryResults.get(i).get("DESCRIPTION");                                commonPage.sleepForFewSeconds(3);                                int count = 0;                                basePage.userClick(logger, By.cssSelector("mat-select[ng-reflect-name='locationValue']"));                                for (int j = 0; j <= locationResValues.size() - 1; j++) {                                    if (count == 3) {                                        Actions actions = new Actions(driver);                                        actions.moveToElement(basePage.getWebElementUsingLocator(logger, By.xpath("//div[contains(text(),'Location restriction')]"))).click().perform();                                        break;                                    }                                    basePage.userClick(logger, By.xpath(" //mat-option/span[contains(text(),'" + locationResValues.get(i).get("DESCRIPTION") + "')]"));                                    locationValues = locationValues + locationResValues.get(i).get("DESCRIPTION");                                    count++;                                }                                Actions action = new Actions(driver);                                action.sendKeys(Keys.ESCAPE).perform();                                break;                            }                            if (i == queryResults.size() - 1) {                                logger.log("Location restrictions are not present to handle location restriction stepper in cards module");                            }                        }                    } else if (scenario.equalsIgnoreCase("onlyLocationCategory")) {                        commonPage.clickButtonUsingSpan(logger, queryResults.get(0).get("DESCRIPTION"));                    }                }                PropUtils.setProps("cards-" + form + "-locationCategory", locationCategory, baseUtils.testDataFilePath);                PropUtils.setProps("cards-" + form + "-locationValues", locationValues, baseUtils.testDataFilePath);            } else {                PropUtils.setProps("cards-" + form + "-locationCategory", "", baseUtils.testDataFilePath);                PropUtils.setProps("cards-" + form + "-locationValues", "", baseUtils.testDataFilePath);            }        } else {            String query = "select distinct cc.location_restriction_oid from card_controls cc\n" +                    "left join location_restrictions lr on lr.location_restriction_oid = cc.location_restriction_oid\n" +                    "where cc.card_control_profile_oid = " + PropUtils.getPropValue(properties, form + "-cardControlProfileOID");            Map<String, String> queryResults = commonDBUtils.getQueryResultsOnMap(query);            if (queryResults.size() != 0) {                logger.log("For the selected card control profile there are no location restriction");                PropUtils.setProps("cards-" + form + "-locationCategory", "", baseUtils.testDataFilePath);                PropUtils.setProps("cards-" + form + "-locationValues", "", baseUtils.testDataFilePath);            } else {            }        }    }    /*    Method to handle time limits in cards module     */    public void handleTimeLimitsInCardsModule(Scenario logger, String form, String cardControlType, String scenario) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (cardControlType.equalsIgnoreCase("newTimeLimits") || PropUtils.getPropValue(properties, "accountNumberInCardsModule").equalsIgnoreCase("newPrivate")) {            PropUtils.setProps("newTimeLimits", scenario, baseUtils.testDataFilePath);            if (form.equalsIgnoreCase("Edit") || form.equalsIgnoreCase("Clone")) {                if (basePage.getStatusOfElement(By.xpath("//div[contains(text(),'+Add')]"))) {                    commonPage.clickUsingDiv(logger, "Edit");                    commonPage.clickButtonUsingSpan(logger, "Reset all");                    commonPage.clickButtonUsingSpan(logger, "Update");                }            }            commonPage.clickUsingDiv(logger, "+Add");            commonPage.verifyPresenceOfText(logger, "Change to custom card profile");            commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");            basePage.userClick(logger, By.xpath("(//a[contains(text(),'Cancel')])[2]"));            commonPage.clickUsingDiv(logger, "+Add");            commonPage.clickButtonUsingSpan(logger, "Approve");            List<WebElement> checkBoxes = basePage.getListOfElements(logger, By.cssSelector("mat-checkbox>label>div"));            List<WebElement> labels = basePage.getListOfElements(logger, By.xpath("//mat-checkbox/label/span/div[1]"));            List<WebElement> toggles = basePage.getListOfElements(logger, By.cssSelector("mat-slide-toggle>label>div"));            List<WebElement> dateAndTimeOfADay = new ArrayList<>();            String timeLimitArr[] = {};            if (scenario.contains(",")) {                timeLimitArr = scenario.split(",");            } else {                timeLimitArr = new String[]{scenario};            }            boolean isPresent = false;            int startOrEndTimeFieldNo = 0;            for (int k = 0; k <= labels.size() - 1; k++) {                for (int l = 0; l <= timeLimitArr.length - 1; l++) {                    if (labels.get(k).getText().equalsIgnoreCase(timeLimitArr[l])) {                        isPresent = true;                        break;                    }                }                if (!isPresent) {                    checkBoxes.get(k).click();                } else {                    toggles.get(k).click();                    dateAndTimeOfADay = basePage.getListOfElements(logger, By.xpath("(//div[@class='price-value ng-star-inserted'])[" + (k + 1) + "]/div[@class='ng-star-inserted']/mav-form-field/mat-form-field/div/div/div[@class='mat-form-field-infix']/span/mav-select/mat-select"));                    startOrEndTimeFieldNo = startOrEndTimeFieldNo + 1;                    for (int j = 0; j <= dateAndTimeOfADay.size() - 1; j++) {                        startOrEndTimeFieldNo = startOrEndTimeFieldNo + j;                        dateAndTimeOfADay.get(j).click();                        basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                        PropUtils.setProps(form + "-" + labels.get(k).getText() + "-time-" + j, commonPage.getAttributeValue(By.xpath("(//div[@class='price-value ng-star-inserted']/div[@class='ng-star-inserted']/mav-form-field/mat-form-field/div/div/div[@class='mat-form-field-infix']/span/mav-select/mat-select)[" + startOrEndTimeFieldNo + "]"), "ng-reflect-model"), baseUtils.testDataFilePath);                    }                    isPresent = false;                }            }            commonPage.clickButtonUsingSpan(logger, "Add");            commonPage.verifyPresenceOfDivText(logger, "Day and time restrictions has been added");        }    }    /*    Method to handle velocity limits in cards module     */    public void handleVelocityLimitsInCardsModule(Scenario logger, String form, String cardControlType) {        List<WebElement> fieldLabels = new ArrayList<>();        List<WebElement> fieldInputs = new ArrayList<>();        try {            fieldLabels = driver.findElements(By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>span>label>mat-label"));            fieldInputs = driver.findElements(By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>input"));        } catch (Exception e) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "VelocityLimits are not available for selected card hence we wont be able to validate velocity limits", baseUtils.testDataFilePath);        }        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (!PropUtils.getPropValue(properties, "testStatus").equalsIgnoreCase("Skipped")) {            String query = "";            List<Map<String, String>> velocityLimits = new ArrayList<>();            query = "select vt.DESCRIPTION as velocityField,vt.MIN_VALUE,vt.MAX_VALUE from velocity_types vt\n" +                    "left join m_clients mc on mc.client_mid = vt.client_mid\n" +                    "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");            velocityLimits = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            if (form.equalsIgnoreCase("add")) {                query = "select va.max_value, vt.DESCRIPTION as velocityField from card_control_profiles ccp \n" +                        "left join card_controls cc on cc.card_control_profile_oid = ccp.card_control_profile_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = ccp.customer_mid\n" +                        "inner join card_ctrl_vel_assignments ccva on ccva.CARD_CONTROL_OID = cc.CARD_CONTROL_OID\n" +                        "inner join velocity_assignments va on va.VELOCITY_ASSIGNMENT_OID = ccva.VELOCITY_ASSIGNMENT_OID\n" +                        "inner join velocity_types vt on vt.velocity_type_oid = va.velocity_type_oid\n" +                        "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberInCardsModule") + "'\n" +                        " and mcust.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") +                        " and ccp.card_control_profile_oid = '" + PropUtils.getPropValue(properties, "add-cardControlProfileOID") + "'";                List<Map<String, String>> velocityLimitsForSpecificCCP = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);                boolean isContain = false;                StringBuilder velocityLimitValue = new StringBuilder();                if (cardControlType.equalsIgnoreCase("newVelocityLimitSelection") || PropUtils.getPropValue(properties, "accountNumberInCardsModule").equalsIgnoreCase("newPrivate")) {                    String isNewProfileValidated = "";                    for (int j = 0; j <= fieldLabels.size() - 1; j++) {                        for (int i = 0; i <= velocityLimitsForSpecificCCP.size() - 1; i++) {                            if (fieldLabels.get(j).getText().equals(velocityLimitsForSpecificCCP.get(i).get("VELOCITYFIELD"))) {                                isContain = true;                                commonPage.assertTwoStrings(logger, velocityLimitsForSpecificCCP.get(i).get("MAX_VALUE"), commonPage.getAttributeValue(By.xpath("(//div[@class='stepper-content']/form/div/mat-form-field/div/div/div/input)[" + (j + 1) + "]"), "ng-reflect-model"), fieldLabels.get(j).getText());                            }                        }                    }                    for (int j = 0; j <= fieldLabels.size() - 1; j++) {                        if (!isContain) {                            for (int i = 0; i <= velocityLimits.size() - 1; i++) {                                if (fieldLabels.get(j).getText().equals(velocityLimits.get(i).get("VELOCITYFIELD"))) {                                    fieldInputs.get(j).clear();                                    velocityLimitValue.delete(0, velocityLimitValue.length());                                    velocityLimitValue.append(getIntegerNumberInBetweenLimit(commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MIN_VALUE"), commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MAX_VALUE")));                                    fieldInputs.get(j).sendKeys(velocityLimitValue.toString());                                    if (isNewProfileValidated.equalsIgnoreCase("")) {                                        commonPage.verifyPresenceOfText(logger, "Change to custom card profile");                                        commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");                                        basePage.userClick(logger, By.xpath("(//a[contains(text(),'Cancel')])[2]"));                                        commonPage.sleepForFewSeconds(2);                                        fieldLabels = basePage.getListOfElements(logger, By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>span>label>mat-label"));                                        fieldInputs = basePage.getListOfElements(logger, By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>input"));                                        fieldInputs.get(j).clear();                                        fieldInputs.get(j).sendKeys(velocityLimitValue.toString());                                        commonPage.clickButtonUsingSpan(logger, "Approve");                                        fieldLabels = basePage.getListOfElements(logger, By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>span>label>mat-label"));                                        fieldInputs = basePage.getListOfElements(logger, By.cssSelector("div[class='stepper-content']>form>div>mat-form-field>div>div>div>input"));                                        isNewProfileValidated = "Yes";                                    }                                    PropUtils.setProps("cards" + "-" + form + "-" + velocityLimits.get(i).get("VELOCITYFIELD"), velocityLimitValue.toString(), baseUtils.testDataFilePath);                                    break;                                }                            }                        }                    }                } else if (cardControlType.equalsIgnoreCase("newTimeLimits") || PropUtils.getPropValue(properties, "accountNumberInCardsModule").equalsIgnoreCase("newPrivate")) {                    for (int j = 0; j <= fieldLabels.size() - 1; j++) {                        for (int i = 0; i <= velocityLimits.size() - 1; i++) {                            if (fieldLabels.get(j).getText().equals(velocityLimits.get(i).get("VELOCITYFIELD"))) {                                fieldInputs.get(j).clear();                                velocityLimitValue.delete(0, velocityLimitValue.length());                                velocityLimitValue.append(getIntegerNumberInBetweenLimit(commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MIN_VALUE"), commonPage.getSpecificValueFromMapObject(velocityLimits.get(i), "MAX_VALUE")));                                fieldInputs.get(j).sendKeys(velocityLimitValue.toString());                                PropUtils.setProps("cards" + "-" + form + "-" + velocityLimits.get(i).get("VELOCITYFIELD"), velocityLimitValue.toString(), baseUtils.testDataFilePath);                                break;                            }                        }                    }                } else {                    for (int j = 0; j <= fieldLabels.size() - 1; j++) {                        for (int i = 0; i <= velocityLimitsForSpecificCCP.size() - 1; i++) {                            if (fieldLabels.get(j).getText().equals(velocityLimitsForSpecificCCP.get(i).get("VELOCITYFIELD"))) {                                commonPage.assertTwoStrings(logger, velocityLimitsForSpecificCCP.get(i).get("MAX_VALUE"), commonPage.getAttributeValue(By.xpath("(//div[@class='stepper-content']/form/div/mat-form-field/div/div/div/input)[" + (j + 1) + "]"), "ng-reflect-model"), fieldLabels.get(j).getText());                            }                        }                    }                }            }        } else {            logger.log(PropUtils.getPropValue(properties, "skipReason"));            PropUtils.setProps("testStatus", "", baseUtils.testDataFilePath);        }    }    /*    Method to handle Product selection in cards module     */    public void handleProductSelectionInCardsModule(Scenario logger, String productRestrictionOid, String form, String cardControlType, List<Map<String, String>> validationControlFields) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        String isProductSelection = "";        String selectedProducts = "";        isProductSelection = "editable";//        Map<String, String> validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("product_restriction_oid", validationControlFields);//        if (validationControlRecord.get("FIELDSTATUS").contains("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {//            isProductSelection = "editable";//        } else if (!validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Hidden")) {//            isProductSelection = "viewable";//        }        String productRestrictionCond = "";        if(!productRestrictionOid.equalsIgnoreCase("")){            productRestrictionCond = "cc.product_restriction_oid = "+productRestrictionOid+" and ";        }        List<Map<String, String>> productsBasedOnProductRestriction = new ArrayList<>();        String existingProdSelection = "";        query = "select distinct pg.description as product,pr.customer_mid from card_control_profiles ccp\n" +                "inner join card_controls cc on cc.card_control_profile_oid = ccp.card_control_profile_oid\n" +                "inner join product_restrictions pr on pr.product_restriction_oid = cc.product_restriction_oid\n" +                "inner join product_restrict_prods prp on prp.product_restriction_oid = pr.product_restriction_oid\n" +                "inner join product_group_products pgp on pgp.product_oid = prp.product_oid\n" +                "inner join product_groups pg on pg.product_group_oid = pgp.product_group_oid\n" +                "where "+productRestrictionCond+" cc.card_control_profile_oid = " + PropUtils.getPropValue(properties, form + "-cardControlProfileOID") + " and pg.product_group_type_cid = 2910";        logger.log(query);        productsBasedOnProductRestriction = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);//        if (productsBasedOnProductRestriction != null) {//            if (productsBasedOnProductRestriction.size() != 0) {        boolean isCustomerSpecificCardProducts = false;        String customerSpecificCardProducts = "select * from product_restrictions where product_restriction_oid = " + productRestrictionOid + " and client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> cusSpecCardProd = commonDBUtils.getQueryResultsOnMap(customerSpecificCardProducts);        if (commonPage.getSpecificValueFromMapObject(cusSpecCardProd, "CUSTOMER_MID").equalsIgnoreCase("")) {            isCustomerSpecificCardProducts = true;        }        if(productRestrictionOid.equalsIgnoreCase("")){            isCustomerSpecificCardProducts = false;        }        if (cardControlType.contains("new") || PropUtils.getPropValue(properties, "accountNumberInCardsModule").equalsIgnoreCase("newPrivate")) {            List<WebElement> productNames = basePage.getListOfElements(logger, By.xpath("//div[@class='ng-star-inserted']/mat-checkbox/label/span"));            List<WebElement> productCheckBoxes = basePage.getListOfElements(logger, By.xpath("//div[@class='ng-star-inserted']/mat-checkbox/label/div/input"));            String isNewProfileValidated = "";            for (int i = 0; i <= productNames.size() - 1; i++) {                if (commonPage.getAttributeValue(By.xpath("(//div[@class='ng-star-inserted']/mat-checkbox)[" + (i + 1) + "]"), "ng-reflect-disabled").equalsIgnoreCase("false")) {                    basePage.userClickJSExecutor(logger, By.xpath("(//div[@class='ng-star-inserted']/mat-checkbox)[" + (i + 1) + "]/label/span"));                    if(cardControlType.equalsIgnoreCase("newProductSelection")) {                        if (isNewProfileValidated.equalsIgnoreCase("")) {                            commonPage.verifyPresenceOfText(logger, "Change to custom card profile");                            commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");                            basePage.userClick(logger, By.xpath("(//a[contains(text(),'Cancel')])[2]"));                            basePage.userClickJSExecutor(logger, By.xpath("(//div[@class='ng-star-inserted']/mat-checkbox)[" + (i + 1) + "]/label/span"));                            commonPage.clickButtonUsingSpan(logger, "Approve");                            isNewProfileValidated = "Yes";                        }                    }                }            }            productsBasedOnProductRestriction = commonPage.getProductsBasedOnProductRestriction(logger);            for (int i = 0; i <= productsBasedOnProductRestriction.size() - 1; i++) {                for (int j = 0; j <= productNames.size() - 1; j++) {                    if (productsBasedOnProductRestriction.get(i).get("PRODUCT").trim().equalsIgnoreCase(productNames.get(j).getText())) {                        commonPage.clickAndPerformUsingActions(productCheckBoxes.get(j));                        logger.log("'" + productCheckBoxes.get(j) + "' product has been selected");                        if(cardControlType.equalsIgnoreCase("newProductSelection")) {                            if (isNewProfileValidated.equalsIgnoreCase("")) {                                commonPage.verifyPresenceOfText(logger, "Change to custom card profile");                                commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");                                basePage.userClick(logger, By.xpath("(//a[contains(text(),'Cancel')])[2]"));                                commonPage.clickAndPerformUsingActions(productCheckBoxes.get(j));                                commonPage.clickButtonUsingSpan(logger, "Approve");                                isNewProfileValidated = "Yes";                            }                        }                        if (!existingProdSelection.contains(productNames.get(j).getText())) {                            if (i == productsBasedOnProductRestriction.size() - 1) {                                selectedProducts = selectedProducts + productNames.get(j).getText();                            } else {                                selectedProducts = selectedProducts + productNames.get(j).getText() + ",";                            }                        }                        break;                    }                }            }        }else if (!isCustomerSpecificCardProducts) {            List<WebElement> productNames = basePage.getListOfElements(logger, By.xpath("//div[@class='ng-star-inserted']/mat-checkbox/label/span"));            List<WebElement> productCheckBoxes = basePage.getListOfElements(logger, By.xpath("//div[@class='ng-star-inserted']/mat-checkbox/label/div/input"));            if (form.equalsIgnoreCase("add")) {                if (!productRestrictionOid.equalsIgnoreCase("")) {                    for (int i = 0; i <= productsBasedOnProductRestriction.size() - 1; i++) {                        if (i == productsBasedOnProductRestriction.size() - 1) {                            existingProdSelection = existingProdSelection + productsBasedOnProductRestriction.get(i).get("PRODUCT");                        } else {                            existingProdSelection = existingProdSelection + productsBasedOnProductRestriction.get(i).get("PRODUCT") + ",";                        }                    }                    String actualProductSelection = "";                    String[] expProdSelectionArr = {existingProdSelection};                    if (existingProdSelection.contains(",")) {                        expProdSelectionArr = existingProdSelection.split(",");                    }                    for (int i = 0; i <= productNames.size() - 1; i++) {                        if (commonPage.getAttributeValue(By.xpath("(//div[@class='ng-star-inserted']/mat-checkbox)[" + (i + 1) + "]"), "ng-reflect-checked").equalsIgnoreCase("true")) {                            if (i == productNames.size() - 1) {                                actualProductSelection = actualProductSelection + basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='ng-star-inserted']/mat-checkbox)[" + (i + 1) + "]/label/span"));                            } else {                                actualProductSelection = actualProductSelection + basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='ng-star-inserted']/mat-checkbox)[" + (i + 1) + "]/label/span")) + ",";                            }                        }                    }                    String[] actualProductSelectionArr = {};                    if (actualProductSelection.contains(",")) {                        actualProductSelectionArr = actualProductSelection.split(",");                    }                    int count = 0;                    for (int i = 0; i <= actualProductSelectionArr.length - 1; i++) {                        if (existingProdSelection.contains(actualProductSelectionArr[i])) {                            count++;                        }                    }//                commonPage.assertTwoStrings(logger, String.valueOf(count), String.valueOf(expProdSelectionArr.length), "Products selected based on card control profile");//                commonPage.assertTwoStrings(logger, String.valueOf(expProdSelectionArr.length), String.valueOf(actualProductSelectionArr.length), "no of products");                }//            if (productRestrictionOid.equalsIgnoreCase("")) {// && (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional"))) {//                if (cardControlType.equalsIgnoreCase("existing")) {//                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);//                    PropUtils.setProps("skipReason", "Product restriciton is mandatory and empty but we need to order a card with existing profile hence we cannot order a card", baseUtils.testDataFilePath);//                } else if (isProductSelection.equalsIgnoreCase("editable")) {//                    productsBasedOnProductRestriction = commonPage.getProductsBasedOnProductRestriction(logger);//                    String isNewProfileValidated = "";//                    for (int i = 0; i <= productsBasedOnProductRestriction.size() - 1; i++) {//                        for (int j = 0; j <= productNames.size() - 1; j++) {//                            if (productsBasedOnProductRestriction.get(i).get("PRODUCT").equalsIgnoreCase(productNames.get(j).getText())) {//                                commonPage.clickAndPerformUsingActions(productCheckBoxes.get(j));//                                logger.log("'" + productCheckBoxes.get(j) + "' product has been selected");//                                if (cardControlType.equalsIgnoreCase("newProductSelection")) {//                                    if (isNewProfileValidated.equalsIgnoreCase("")) {//                                        commonPage.verifyPresenceOfText(logger, "Change to custom card profile");//                                        commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");//                                        commonPage.clickButtonUsingSpecificTagName(logger, "Cancel", "a");//                                        commonPage.clickAndPerformUsingActions(productCheckBoxes.get(j));//                                        commonPage.clickButtonUsingSpan(logger, "Approve");//                                        isNewProfileValidated = "Yes";//                                    }//                                }//                                if (i == productsBasedOnProductRestriction.size() - 1) {//                                    selectedProducts = selectedProducts + productNames.get(j).getText();//                                } else {//                                    selectedProducts = selectedProducts + productNames.get(j).getText() + ",";//                                }//                            }//                        }//                    }//                }//            }            }        } else {            commonPage.assertTwoStrings(logger, "This account has custom product controls. Please contact customer care if you want to review or change these.", basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='product-msg ng-star-inserted']")), "Product selection stepper message");            selectedProducts = "This account has custom product controls. Please contact customer care if you want to review or change these.";        }        PropUtils.setProps(form + "-selectedProducts", selectedProducts, baseUtils.testDataFilePath);    }    /*    Method to handle PosPrompts based on card control type     */    public void handlePOSPromptsBasedOnCardControlType(Scenario logger, Map<String, String> cardControlProfileOidData, String cardControlType, String form) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String posPrompts = "";//        validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("is_odometer_req", validationControlFields);//        if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {//            isOdometerReq = "editable";//        } else if (!validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Hidden")) {//            isOdometerReq = "viewable";//        }//        validationControlRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("is_odometer_validation", validationControlFields);//        if (validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {//            isOdometerValidationReq = "editable";//        } else if (!validationControlRecord.get("FIELDSTATUS").equalsIgnoreCase("Hidden")) {//            isOdometerValidationReq = "viewable";//        }        String posPromptsQuery = "select * from menu_context where ADD_LABEL = 'POS Prompts' and DISPLAY_SEQNO != 0";        List<Map<String, String>> ppQR = commonDBUtils.getAllRowsOfQueryResultsOnListMap(posPromptsQuery);        Set<String> keys = cardControlProfileOidData.keySet();        Iterator<String> it = keys.iterator();        boolean isApproved = false;        String nextValue = "";        while (it.hasNext()) {            nextValue = it.next();            for (int i = 0; i <= ppQR.size() - 1; i++) {                if (nextValue.replaceAll("_", "").equalsIgnoreCase(ppQR.get(i).get("ATTRIBUTE_VALUES"))) {                    if (cardControlType.equalsIgnoreCase("newPOSPrompts") || PropUtils.getPropValue(properties, "accountNumberInCardsModule").equalsIgnoreCase("newPrivate")) {                        if (cardControlProfileOidData.get(nextValue).equalsIgnoreCase("Y")) {                            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='" + ppQR.get(i).get("ATTRIBUTE_VALUES") + "']"), "ng-reflect-checked"), ppQR.get(i).get("ATTRIBUTE_VALUES") + " check box status");                        } else {                            commonPage.assertTwoStrings(logger, "false", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='" + ppQR.get(i).get("ATTRIBUTE_VALUES") + "']"), "ng-reflect-checked"), ppQR.get(i).get("ATTRIBUTE_VALUES") + " check box status");                        }                        basePage.userClick(logger, By.cssSelector("mat-checkbox[ng-reflect-name='" + ppQR.get(i).get("ATTRIBUTE_VALUES") + "']"));                        if (!isApproved) {                            commonPage.verifyPresenceOfText(logger, "Change to custom card profile");                            commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");                            commonPage.clickButtonUsingSpan(logger, "Approve");                            commonPage.sleepForFewSeconds(1);                            commonPage.assertTwoStrings(logger, "cardprofile-radio mat-radio-button mat-accent mat-radio-checked", commonPage.getAttributeValue(By.cssSelector("mat-radio-button[ng-reflect-value='new']"), "class"), "Create new profile radio button status");                            isApproved = true;                        }                    } else {                        if (cardControlProfileOidData.get(nextValue).equalsIgnoreCase("Y")) {                            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='" + ppQR.get(i).get("ATTRIBUTE_VALUES") + "']"), "ng-reflect-checked"), ppQR.get(i).get("ATTRIBUTE_VALUES") + " check box status");                            if (posPrompts.equalsIgnoreCase("")) {                                posPrompts = ppQR.get(i).get("LABEL_VALUE");                            } else if (i <= ppQR.size()) {                                posPrompts = posPrompts + " & " + ppQR.get(i).get("LABEL_VALUE");                            } else {                                posPrompts = posPrompts + ", " + ppQR.get(i).get("LABEL_VALUE");                            }                        } else {                            commonPage.assertTwoStrings(logger, "false", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='" + ppQR.get(i).get("ATTRIBUTE_VALUES") + "']"), "ng-reflect-checked"), ppQR.get(i).get("ATTRIBUTE_VALUES") + " check box status");                        }                    }                    break;                }            }        }//        if (cardControlProfileOidData.get("IS_ODOMETER_REQ").equalsIgnoreCase("Y")) {//            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerReq']"), "ng-reflect-checked"), "Odometer check box status");//            if (cardControlType.equalsIgnoreCase("newPOSPrompts")) {//                basePage.userClick(logger, By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerReq']"));//                commonPage.verifyPresenceOfText(logger, "Change to custom card profile");//                commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");//                commonPage.clickButtonUsingSpan(logger, "Approve");//                commonPage.assertTwoStrings(logger, "false", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerReq']"), "ng-reflect-checked"), "Odometer check box status");//                commonPage.assertTwoStrings(logger, "cardprofile-radio mat-radio-button mat-accent mat-radio-checked", commonPage.getAttributeValue(By.cssSelector("mat-radio-button[ng-reflect-value='new']"), "class"), "Create new profile radio button status");//            } else {//                posPrompts = "ODOMETER";//            }//        } else if (cardControlProfileOidData.get("IS_ODOMETER_REQ").equalsIgnoreCase("N")) {//            commonPage.assertTwoStrings(logger, "false", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerReq']"), "ng-reflect-checked"), "Odometer check box status");//            if (cardControlType.equalsIgnoreCase("newPOSPrompts")) {//                basePage.userClick(logger, By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerReq']"));//                commonPage.verifyPresenceOfText(logger, "Change to custom card profile");//                commonPage.verifyPresenceOfText(logger, "By changing this card control profile you are changing this for a unique card control profile for this card only");//                commonPage.clickButtonUsingSpan(logger, "Approve");//                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerReq']"), "ng-reflect-checked"), "Odomter check box status");//                commonPage.assertTwoStrings(logger, "cardprofile-radio mat-radio-button mat-accent mat-radio-checked", commonPage.getAttributeValue(By.cssSelector("mat-radio-button[ng-reflect-value='new']"), "class"), "Create new profile radio button status");//                posPrompts = "ODOMETER";//            }//        }//        if (cardControlProfileOidData.get("IS_ODOMETER_VALIDATION").equalsIgnoreCase("Y")) {//            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerValidation']"), "ng-reflect-checked"), "Odometer Validation check box status");//            if (cardControlType.equalsIgnoreCase("newPOSPrompts")) {//                basePage.userClick(logger, By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerValidation']"));//                commonPage.assertTwoStrings(logger, "false", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerValidation']"), "ng-reflect-checked"), "Odometer Validation check box status");//            } else {//                if (!posPrompts.equalsIgnoreCase("")) {//                    posPrompts = posPrompts + " & " + "ODOMTER VALIDATION";//                } else {//                    posPrompts = "ODOMTER VALIDATION";//                }//            }//        } else if (cardControlProfileOidData.get("IS_ODOMETER_VALIDATION").equalsIgnoreCase("N")) {//            commonPage.assertTwoStrings(logger, "false", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerValidation']"), "ng-reflect-checked"), "Odometer Validation check box status");//            if (cardControlType.equalsIgnoreCase("newPOSPrompts")) {//                basePage.userClick(logger, By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerValidation']"));//                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mat-checkbox[ng-reflect-name='isOdometerValidation']"), "ng-reflect-checked"), "Odometer Validation check box status");//                if (!posPrompts.equalsIgnoreCase("")) {//                    posPrompts = posPrompts + " & " + "ODOMTER VALIDATION";//                } else {//                    posPrompts = "ODOMTER VALIDATION";//                }//            }//        }        PropUtils.setProps(form + "-POSPrompts", posPrompts, baseUtils.testDataFilePath);    }    /*    Method to handle mail indicator     */    public void handleMailIndicator(Scenario logger, String pageType, Properties properties) {        if (pageType.equalsIgnoreCase("clone") || pageType.equalsIgnoreCase("edit")) {            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, pageType + "-mailIndicator"), basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-select[name='mailIndicator']>mat-select>div>div>span>span")), "mail Indicator in : " + pageType + " form");        }        String query = "select mi.DESCRIPTION from mail_indicators mi\n" +                "left join m_clients mc on mc.client_mid = mi.client_mid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";        List<Map<String, String>> allRowsOfQueryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if (allRowsOfQueryResults.size() > 1) {            commonPage.assertTwoStrings(logger, "false", commonPage.getAttributeValue(By.cssSelector("mav-select[name='mailIndicator']>mat-select"), "ng-reflect-disabled"), "Mail Indicator drop down status");            basePage.userClick(logger, By.cssSelector("mav-select[name='mailIndicator']>mat-select"));            for (int i = 0; i <= allRowsOfQueryResults.size() - 1; i++) {                commonPage.verifyPresenceOSpanText(logger, allRowsOfQueryResults.get(i).get("DESCRIPTION"));            }            basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), PropUtils.getPropValue(properties, pageType + "-mailIndicator"));        } else {            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[name='mailIndicator']>mat-select"), "ng-reflect-disabled"), "Mail Indicator drop down status");            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(allRowsOfQueryResults.get(0), "DESCRIPTION"), commonPage.getAttributeValue(By.cssSelector("mav-select[name='mailIndicator']>mat-select"), "ng-reflect-model"), "Mail Indicate field value");        }        PropUtils.setProps(pageType + "-mailIndicator", allRowsOfQueryResults.get(0).get("DESCRIPTION"), baseUtils.testDataFilePath);    }    /*    Method to get an eligible account number to order a card     */    public void getAnEligibleAccountNumberToOrderACard(Scenario logger, String cardPinControlCid, String cardReissueTypeCid, String cardType, String userType) {        PropUtils.setProps(cardType + "-fieldWhichHasCardReissueTypeCid", "", baseUtils.testDataFilePath);        PropUtils.setProps("accountNumberInCardsModule", "", baseUtils.testDataFilePath);        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String cardPinCondition = "";        if (!cardPinControlCid.equalsIgnoreCase("")) {            if(PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"environment").equalsIgnoreCase("uidev")) {                cardPinCondition = " and cp.card_pin_control_cid != " + cardPinControlCid;            }else{                cardPinCondition = " and cp.card_pin_control_cid = " + cardPinControlCid;            }        }        String userJoinCond = "";        String userWhereCond = "";        if(userType.equalsIgnoreCase("OLS")){            userJoinCond = " inner join user_members um on um.member_oid = mcust.customer_mid inner join users u on u.user_oid = um.user_oid ";            userWhereCond = " and u.logon_id = '"+PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"currentUserName")+"'";        }        String ccpConditionForCloneOrEditCard = "";        if (PropUtils.getPropValue(properties, "actionOfCardControlProfile").equalsIgnoreCase("newPrivate")) {            ccpConditionForCloneOrEditCard = " and ccp.card_oid is not null";        }        String query = "";        if (cardReissueTypeCid.equalsIgnoreCase("NA")) {            query = "select distinct mcust.customer_no,mc.NAME, cp.description as cardproduct,cf.description as cardOffer from card_offers cf\n" +                    "left join card_products cp on cp.card_offer_oid = cf.card_offer_oid\n" +                    "left join card_program_offers cfo on cfo.card_offer_oid = cf.card_offer_oid\n" +                    "left join m_customers mcust on mcust.card_program_oid = cfo.card_program_oid\n" +                    "inner join card_control_profiles ccp on mcust.customer_mid = ccp.customer_mid\n" +                    "left join accounts a on a.account_no = mcust.customer_no\n" +                    "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                    "left join applications at on at.application_oid=mcust.application_oid and cp.application_type_oid = at.application_type_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid and mc.client_mid = cf.client_mid\n" +                    "left join constants const on const.constant_oid = cp.card_type_cid\n" +userJoinCond+                    "where ccp.customer_mid is not null and ccp.card_product_oid is null and mc.client_mid in 101 and ast.description like '%Active%'" + cardPinCondition+userWhereCond;        } else {            query = "select distinct mcust.customer_no,mc.NAME, cp.description as cardproduct,cf.description as cardOffer,cp.EMBOSS_NAME_ACTION_CID,cp.CARD_NO_ACTION_CID,cp.EXPIRES_ON_ACTION_CID\n" +                    ",cp.CARD_PRODUCT_ACTION_CID,cp.EMBOSS_TEXT_ACTION_CID,cp.PIN_OFFSET_ACTION_CID,cp.DRIVER_NAME_ACTION_CID\n" +                    ",cp.DRIVER_ID_ACTION_CID,cp.VEHICLE_DESCRIPTION_ACTION_CID,cp.VEHICLE_ID_ACTION_CID,cp.LICENSE_PLATE_ACTION_CID\n" +                    ",cp.EXTERNAL_REF_ACTION_CID,cp.PUMP_CONTROL_ACTION_CID,cp.PRODUCT_RESTRICT_ACTION_CID,cp.TIME_LIMITS_ACTION_CID\n" +                    ",cp.REQ_SIGN_ACTION_CID,cp.REQ_PIN_ACTION_CID,cp.REQ_FLEET_ID_ACTION_CID,cp.REQ_ODOMETER_ACTION_CID,cp.REQ_ORDER_NUM_ACTION_CID\n" +                    ",cp.LOCATION_RESTRICT_ACTION_CID,cp.VEHICLE_OPTION_CID from card_offers cf\n" +                    "left join card_products cp on cp.card_offer_oid = cf.card_offer_oid\n" +                    "left join card_program_offers cfo on cfo.card_offer_oid = cf.card_offer_oid\n" +                    "left join m_customers mcust on mcust.card_program_oid = cfo.card_program_oid\n" +                    "inner join card_control_profiles ccp on mcust.customer_mid = ccp.customer_mid\n" +                    "left join accounts a on a.account_no = mcust.customer_no\n" +                    "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                    "left join applications at on at.application_oid=mcust.application_oid and cp.application_type_oid = at.application_type_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid and mc.client_mid = cf.client_mid\n" +                    "left join constants const on const.constant_oid = cp.card_type_cid\n" +userJoinCond+                    "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and ccp.customer_mid is not null and ccp.card_product_oid is null and (cp.EMBOSS_NAME_ACTION_CID = " + cardReissueTypeCid + " or cp.CARD_NO_ACTION_CID = " + cardReissueTypeCid + " or cp.EXPIRES_ON_ACTION_CID = " + cardReissueTypeCid + "\n" +                    "or cp.CARD_PRODUCT_ACTION_CID = " + cardReissueTypeCid + " or cp.EMBOSS_TEXT_ACTION_CID = " + cardReissueTypeCid + " or cp.PIN_OFFSET_ACTION_CID = " + cardReissueTypeCid + " or cp.DRIVER_NAME_ACTION_CID = " + cardReissueTypeCid + "\n" +                    "or cp.DRIVER_ID_ACTION_CID = " + cardReissueTypeCid + " or cp.VEHICLE_DESCRIPTION_ACTION_CID = " + cardReissueTypeCid + " or cp.VEHICLE_ID_ACTION_CID = " + cardReissueTypeCid + " or cp.LICENSE_PLATE_ACTION_CID = " + cardReissueTypeCid + " \n" +                    "or cp.EXTERNAL_REF_ACTION_CID = " + cardReissueTypeCid + " or cp.PUMP_CONTROL_ACTION_CID = " + cardReissueTypeCid + " or cp.PRODUCT_RESTRICT_ACTION_CID = " + cardReissueTypeCid + "\n" +                    "or cp.TIME_LIMITS_ACTION_CID = " + cardReissueTypeCid + " or cp.REQ_SIGN_ACTION_CID = " + cardReissueTypeCid + " or cp.REQ_PIN_ACTION_CID = " + cardReissueTypeCid + " or cp.REQ_FLEET_ID_ACTION_CID = " + cardReissueTypeCid + " \n" +                    "or cp.REQ_ODOMETER_ACTION_CID = " + cardReissueTypeCid + " or cp.REQ_ORDER_NUM_ACTION_CID = " + cardReissueTypeCid + " or cp.LOCATION_RESTRICT_ACTION_CID = " + cardReissueTypeCid + "\n" +                    "or cp.VEHICLE_OPTION_CID = " + cardReissueTypeCid + ") and ast.description like '%Active%'"+cardPinCondition+userWhereCond;        }        logger.log(query);        List<Map<String, String>> queryResults = new ArrayList<>();        int queryRecordNo = 0;        if (cardType.equalsIgnoreCase("edit") || cardType.equalsIgnoreCase("clone")) {            String editQuery = "select co.description as cardOffer, cp.description as cardProduct, mcust.customer_no,SUBSTR(c.card_no, LENGTH(c.card_no) - 5, 6) as card_no,c.card_no as fullCardNo from cards c\n" +                    "left join card_controls cc on cc.card_control_profile_oid = c.card_control_profile_oid\n" +                    "inner join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                    "inner join card_offers co on co.card_offer_oid = cp.card_offer_oid\n" +                    "inner join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "inner join card_control_profiles ccp on ccp.card_control_profile_oid = c.card_control_profile_oid\n" +                    "left join accounts a on a.account_no = mcust.customer_no\n"+                    "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +userJoinCond+                    "where c.replace_Card_oid is null\n" +                    "and mc.client_mid in (" +                    PropUtils.getPropValue(properties, "ClientMID") + ") and c.card_Status_oid \n" +                    "in (select card_Status_oid from card_status where is_Valid='Y' and is_active='Y')\n" +                    "and c.card_Status_oid  in (select card_Status_oid from card_Status_ols_mapping where is_Status_change='Y') " + ccpConditionForCloneOrEditCard+userWhereCond;            List<Map<String, String>> cardOfferAndProductQuery = commonDBUtils.getAllRowsOfQueryResultsOnListMap(editQuery);            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            outerloop:            for (int i = 0; i <= cardOfferAndProductQuery.size() - 1; i++) {                for (int j = 0; j <= queryResults.size() - 1; j++) {                    if (cardOfferAndProductQuery.get(i).get("CARDOFFER").equalsIgnoreCase(queryResults.get(j).get("CARDOFFER")) && cardOfferAndProductQuery.get(i).get("CARDPRODUCT").equalsIgnoreCase(queryResults.get(j).get("CARDPRODUCT"))) {                        queryRecordNo = j;                        PropUtils.setProps("cardNumberToPerformAnAction", cardOfferAndProductQuery.get(i).get("CARD_NO"), baseUtils.testDataFilePath);                        PropUtils.setProps("Cards-accountNumber", cardOfferAndProductQuery.get(i).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                        PropUtils.setProps("accountNumberInCardsModule", cardOfferAndProductQuery.get(i).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                        PropUtils.setProps(cardType + "-cardOffer", cardOfferAndProductQuery.get(i).get("CARDOFFER"), baseUtils.testDataFilePath);                        PropUtils.setProps(cardType + "-cardProduct", cardOfferAndProductQuery.get(i).get("CARDPRODUCT"), baseUtils.testDataFilePath);                        break outerloop;                    }                }            }            properties = PropUtils.getProps(baseUtils.testDataFile);            if (PropUtils.getPropValue(properties, "accountNumberInCardsModule").equalsIgnoreCase("")) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "No customer is available to execute this scenario", baseUtils.testDataFilePath);            }        } else {            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            queryRecordNo = 0;        }        if (queryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "No customer is available to execute this scenario", baseUtils.testDataFilePath);        } else {            String fieldWhichHasCardReissueTypeCid = "";            if(!PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"environment").equalsIgnoreCase("uidev")) {                for (Map.Entry<String, String> pair : queryResults.get(queryRecordNo).entrySet()) {                    if (pair.getValue() != null) {                        if (pair.getValue().equalsIgnoreCase(cardReissueTypeCid)) {                            fieldWhichHasCardReissueTypeCid = pair.getKey();                            if (!cardType.equalsIgnoreCase("edit") && !cardType.equalsIgnoreCase("clone")) {                                PropUtils.setProps("accountNumberInCardsModule", queryResults.get(queryRecordNo).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                                PropUtils.setProps(cardType + "-cardOffer", queryResults.get(queryRecordNo).get("CARDOFFER"), baseUtils.testDataFilePath);                                PropUtils.setProps(cardType + "-cardProduct", queryResults.get(queryRecordNo).get("CARDPRODUCT"), baseUtils.testDataFilePath);                                PropUtils.setProps("COUNTRY", queryResults.get(queryRecordNo).get("NAME"), baseUtils.testDataFilePath);                                commonDBUtils.executeUpdateQuery("update m_customers set distributor_id = '' where customer_no = '" + queryResults.get(0).get("CUSTOMER_NO") + "' and client_mid = 101");                            }                            break;                        }                    }                }            }else{                if (!cardType.equalsIgnoreCase("edit") && !cardType.equalsIgnoreCase("clone")) {                    PropUtils.setProps("accountNumberInCardsModule", queryResults.get(queryRecordNo).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                    PropUtils.setProps(cardType + "-cardOffer", queryResults.get(queryRecordNo).get("CARDOFFER"), baseUtils.testDataFilePath);                    PropUtils.setProps(cardType + "-cardProduct", queryResults.get(queryRecordNo).get("CARDPRODUCT"), baseUtils.testDataFilePath);                    PropUtils.setProps("COUNTRY", queryResults.get(queryRecordNo).get("NAME"), baseUtils.testDataFilePath);                    commonDBUtils.executeUpdateQuery("update m_customers set distributor_id = '' where customer_no = '" + queryResults.get(queryRecordNo).get("CUSTOMER_NO") + "' and client_mid = 101");                }            }            String fieldName = "";            if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("EMBOSS_NAME_ACTION_CID")) {                fieldName = "Embossing";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("CARD_PRODUCT_ACTION_CID")) {                fieldName = "cardProduct";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("PIN_OFFSET_ACTION_CID")) {                fieldName = "selfSelectPIN";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("DRIVER_NAME_ACTION_CID")) {                fieldName = "driverName";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("DRIVER_ID_ACTION_CID")) {                fieldName = "driverID";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("VEHICLE_DESCRIPTION_ACTION_CID")) {                fieldName = "vehicleDescription";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("VEHICLE_ID_ACTION_CID")) {                fieldName = "vehicleID";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("LICENSE_PLATE_ACTION_CID")) {                fieldName = "licensePlate";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("EXTERNAL_REF_ACTION_CID")) {                fieldName = "externalRef";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("PRODUCT_RESTRICT_ACTION_CID")) {                fieldName = "productSelection";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("TIME_LIMITS_ACTION_CID")) {                fieldName = "timeLimits";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("REQ_ODOMETER_ACTION_CID")) {                fieldName = "Odometer";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("REQ_ORDER_NUM_ACTION_CID")) {                fieldName = "Odonumber";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("LOCATION_RESTRICT_ACTION_CID")) {                fieldName = "locationRestriction";            } else if (fieldWhichHasCardReissueTypeCid.equalsIgnoreCase("VEHICLE_OPTION_CID")) {                fieldName = "cardTypeVehicle";            }            if (cardReissueTypeCid.equalsIgnoreCase("5902") || cardReissueTypeCid.equalsIgnoreCase("5903")) {                PropUtils.setProps(cardType + "-fieldWhichHasCardReissueTypeCid", fieldName, baseUtils.testDataFilePath);            } else {                PropUtils.setProps(cardType + "-fieldWhichNotReissue", fieldName, baseUtils.testDataFilePath);            }        }    }    /*    Method to get which has cards     */    public void getAnAccountNumberWhichHasCardsBasedOnLoggedInUser(Scenario logger, String userType){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        if(userType.equalsIgnoreCase("OLS")){            query = "select distinct mcust.customer_no from cards c\n" +                    "inner join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "inner join user_members um on um.member_oid = mcust.customer_mid\n" +                    "inner join users u on u.user_oid = um.user_oid\n" +                    "where mc.client_mid = "+PropUtils.getPropValue(properties,"ClientMID")                    +" and u.logon_id = '"+PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile),"currentUserName")+"'";        }else if(userType.equalsIgnoreCase("OMV")){            query = "select distinct mcust.customer_no from cards c\n" +                    "inner join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid = "+PropUtils.getPropValue(properties,"ClientMID");        }        List<Map<String, String>>queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if(queryResults.size()>=1){            PropUtils.setProps("accountNumberInCardsModule",queryResults.get(0).get("CUSTOMER_NO"),baseUtils.testDataFilePath);        }else{            PropUtils.setProps("testStatus","Skipped",baseUtils.testDataFilePath);            PropUtils.setProps("skipReason","No Customer available to execute this scenario",baseUtils.testDataFilePath);        }    }}