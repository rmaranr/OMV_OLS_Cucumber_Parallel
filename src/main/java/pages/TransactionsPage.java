package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;//import listeners.ExtentReportListener;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.interactions.Actions;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import java.math.BigDecimal;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;public class TransactionsPage {    private WebDriver driver;    private BasePage basePage;    private CommonDBUtils commonUtils;    private BaseUtils baseUtils = new BaseUtils();    private CommonPage commonPage;    public Scenario logger;    /* Constructor to get the driver object */    public TransactionsPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);    }    private static final By lblCountOfRecords = By.cssSelector("div[class='view-page-list ng-star-inserted']");    //    private final By lblTransactionMainFieldValues = By.xpath("(//div[contains(@class,'transaction-details')]/mat-grid-list[@class='main-details mat-grid-list'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/mat-grid-tile/figure/div/div[2]");//    private final By lblTransactionMainFieldNames = By.xpath("(//div[contains(@class,'transaction-details')]/mat-grid-list[@class='main-details mat-grid-list'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/mat-grid-tile/figure/div/div[1]");//    private final By lblTransactionDetailsFieldNames = By.xpath("(//div[@class='transaction-details']/mat-grid-list[@class='transction-details mat-grid-list'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/mat-grid-tile/figure/div/div[1]");//    private final By lblTransactionDetailsFieldValues = By.xpath("(//div[@class='transaction-details']/mat-grid-list[@class='transction-details mat-grid-list'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/mat-grid-tile/figure/div/div[2]");//    private final By lblNonCardTransactionDetailsFieldNames = By.xpath("(//mat-grid-list[@class='transction-details border-bottom mat-grid-list'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/mat-grid-tile/figure/div/div[1]");//    private final By lblNonCardTransactionDetailsFieldValues = By.xpath("(//mat-grid-list[@class='transction-details border-bottom mat-grid-list'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/mat-grid-tile/figure/div/div[2]");    private final By sectionTransactionBreakDown = By.cssSelector("div[class='head-section']");    //    private final By lblTransBreakDownTableBorderFieldNames = By.xpath("(//table[@class='table-border'])[" + getNumberOfRecordOfACurrentTransaction() + "]/thead/tr/th");//    private final By lblTransBreakDownTableBorderFieldValues = By.xpath("(//table[@class='table-border'])[" + getNumberOfRecordOfACurrentTransaction() + "]/tbody/tr/td");//    private final By lblTransBreakDownTableAmountFieldNames = By.xpath("(//div[@class='table-amount-section'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/div");//    private final By lblTransBreakDownTableAmountFiledValues = By.xpath("(//div[@class='table-amount-section'])[" + getNumberOfRecordOfACurrentTransaction() + "]/div/span");    private final By lblTransRebateBreakDownFieldNames = By.xpath("(//div[@class='table-section ng-star-inserted'])/mat-grid-list/div/mat-grid-tile/figure/div/div[1]");    private final By lblTransRebateBreakDownFieldValues = By.xpath("(//div[@class='table-section ng-star-inserted'])/mat-grid-list/div/mat-grid-tile/figure/div/div[2]");    private final By filter1DayInDatePopUp = By.xpath("(//div[@class='dropdown-button-content'])");    private final By filter1DayInPage = By.xpath("(//span[@class='dropdown-text filter-selected'])[2]");    /*    Method to get number of record of a current transaction     *///    public int getNumberOfRecordOfACurrentTransaction(){//        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);//        String currentTransactionRecordNumber = PropUtils.getPropValue(testDataProp,"transactionRecordNumberInUI");//        return Integer.parseInt(currentTransactionRecordNumber);//    }    /*    Method to select filter from 1 day filter drop down     */    public void selectFilter(Scenario logger, String filterValue) {        basePage.userClick(logger, filter1DayInPage);        basePage.userClick(logger, filter1DayInDatePopUp);        commonPage.clickUsingDiv(logger, filterValue);        commonPage.clickApplyButtonOnDatePicker(logger);    }    /*    Method to get count of records from Transctions page     */    public String getCountOfRecords(Scenario logger) {        String count = basePage.userGetTextFromWebElement(logger, lblCountOfRecords);        return count.substring(0, count.indexOf(' '));    }    /*    Method to get transaction record number from ui     */    public int getCurrentTransactionRecordNumber() {        return Integer.parseInt(PropUtils.getPropValue(baseUtils.testDataProperties, "transactionRecordNumberInUI"));    }    /*    Method to store transaction id in Property file     */    public String getTransactionBasedOnCategoryID(Scenario logger, String categoryID, String accountNo, List<Map<String, String>> queryResults) {        String transOID = "";        for (int i = 0; i <= queryResults.size() - 1; i++) {            if ((getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_CATEGORY_CID")).equals(categoryID)) {                if (categoryID.equals("4701")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-Purchase-CardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4708")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-Host-CardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4710")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-CardAdminFee-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4711")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-CardIssueFee-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4713")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-TransactionFee-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4712")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-AccountFee-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4715")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-DepositAccount-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4719")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-Subsidy-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4716")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-BillingNote-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4702")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-Sundry-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4705")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-Loyalty-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4709")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-Other-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4704")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-ChequePayment-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4717")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-ManualPayment-NonCardTransOID", transOID, baseUtils.testDataFilePath);                } else if (categoryID.equals("4714")) {                    transOID = getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID");                    PropUtils.setProps("trans-PeriodRebate-RebateNonCardTransOID", transOID, baseUtils.testDataFilePath);                } else {                    transOID = "";                }                break;            }        }        return transOID;    }    /*    Method to get todate value based on no of days     */    public String getToDateBasedOnNumberOfDays(Scenario logger, String selectFilter) {        String toDate = "";        if (selectFilter.equals("1 day")) {            toDate = getDesiredDateInSpecificFormat(logger, getProcessingDateOfClient(), 1, "Past", "yyyy-MM-dd HH:mm:ss", "dd-MMM-yy");        } else if (selectFilter.equals("Last 7 days")) {            toDate = getDesiredDateInSpecificFormat(logger, getProcessingDateOfClient(), 1, "Past", "yyyy-MM-dd HH:mm:ss", "dd-MMM-yy");        } else if (selectFilter.equals("Last 14 days")) {            toDate = getDesiredDateInSpecificFormat(logger, getProcessingDateOfClient(), 1, "Past", "yyyy-MM-dd HH:mm:ss", "dd-MMM-yy");        } else if (selectFilter.equals("Last 30 days")) {            toDate = getDesiredDateInSpecificFormat(logger, getProcessingDateOfClient(), 1, "Past", "yyyy-MM-dd HH:mm:ss", "dd-MMM-yy");        } else if (selectFilter.equals("Last 90 days")) {            toDate = getDesiredDateInSpecificFormat(logger, getProcessingDateOfClient(), 1, "Past", "yyyy-MM-dd HH:mm:ss", "dd-MMM-yy");        } else if (selectFilter.equals("Custom")) {        }        return toDate;    }    /*    Method to get FromDate value based on no of days     */    public String getFromDateBasedOnNumberOfDays(Scenario logger, String selectFilter, String toDate, String currentDateFormat) {        String fromDate = "";        if (selectFilter.equals("1 day")) {            fromDate = getDesiredDateInSpecificFormat(logger, toDate, 1, "Past", currentDateFormat, "dd-MMM-yy");        } else if (selectFilter.equals("Last 7 days")) {            fromDate = getDesiredDateInSpecificFormat(logger, toDate, 8, "Past", currentDateFormat, "dd-MMM-yy");        } else if (selectFilter.equals("Last 14 days")) {            fromDate = getDesiredDateInSpecificFormat(logger, toDate, 15, "Past", currentDateFormat, "dd-MMM-yy");        } else if (selectFilter.equals("Last 30 days")) {            fromDate = getDesiredDateInSpecificFormat(logger, toDate, 31, "Past", currentDateFormat, "dd-MMM-yy");        } else if (selectFilter.equals("Last 90 days")) {            fromDate = getDesiredDateInSpecificFormat(logger, toDate, 91, "Past", currentDateFormat, "dd-MMM-yy");        } else if (selectFilter.equals("Custom")) {        }        return fromDate;    }    /*    Method to get processing date of client     */    public String getProcessingDateOfClient() {        String query = "select PROCESSING_DATE from m_clients where short_name = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return getSpecificValueFromMapObject(queryResults, "PROCESSING_DATE");    }    /*    Method to get desired date in specific format     */    public String getDesiredDateInSpecificFormat(Scenario logger, String currentDate, int noOfDays, String futureOrPast, String currentDateFormat, String expectedDateFormat) {        Date date = new Date();        String formattedDate = "";        DateFormat df = new SimpleDateFormat(currentDateFormat);        try {            if (!currentDate.equals("today")) {                date = df.parse(currentDate);            }            Calendar c = Calendar.getInstance();            c.setTime(date);            if (futureOrPast.equalsIgnoreCase("Future")) {                c.add(Calendar.DAY_OF_YEAR, noOfDays);            } else if (futureOrPast.equalsIgnoreCase("Past")) {                c.add(Calendar.DAY_OF_YEAR, Integer.parseInt("-" + noOfDays));            }            SimpleDateFormat sdf = new SimpleDateFormat(expectedDateFormat);            formattedDate = sdf.format(c.getTime());        } catch (ParseException e) {            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }        return formattedDate;    }    /*    Method to get value from settings table to get from date of transaction     */    public String getSettingValueFromSettingsTable(String settingID) {        String query = "select SETTING_VALUE from settings where setting_id = '" + settingID + "'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return getSpecificValueFromMapObject(queryResults, "SETTING_VALUE");    }    /*    Method to get client mid from m_locations table     */    public int getClientMidFromM_LocationsTable() {        String query = "select ml.CLIENT_MID from m_locations ml\n" +                "inner join m_clients mc on mc.client_mid = ml.client_mid\n" +                "where mc.SHORT_NAME = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return Integer.parseInt(getSpecificValueFromMapObject(queryResults, "CLIENT_MID"));    }    /*    Method to get query results of Transaction table     */    public List<Map<String, String>> getQueryResultsOfTransactionTable(Scenario logger, String accountNo, String toDate, String fromDate) {        String query = "SELECT * FROM(SELECT nested_query.*,rownum AS paged_query_rn FROM   (SELECT t.transaction_oid,\n" +                "t.transaction_type_oid,t.reference,t.effective_at,t.processed_at,t.customer_amount,tli.product_oid AS product_oid,\n" +                "ptr.description AS product_description,t.merchant_amount,t.customer_total_points,t.merchant_mid,\n" +                " pos.pos_transaction_oid,t.card_no AS card_number,pos.attention_key,pos.odometer,loc.location_no,\n" +                "pos.extra_card_no AS extra_card_number,\n" +                "CASE WHEN loc.location_type_did IN\n" +                "(SELECT vc.context_value_oid FROM   validation_controls vc\n" +                "INNER JOIN validation_context_flds vcf ON vcf.validation_context_fld_oid = vc.validation_context_fld_oid\n" +                "WHERE vcf.column_name = 'location_type_did' AND vc.system_module_cid = 1507\n" +                "AND vc.column_control_cid = 1703) THEN NULL ELSE loc.location_type_did\n" +                "END AS location_type_did, loc.NAME AS location_name,loc.location_mid,\n" +                "addr.address_line AS location_address,addr.suburb AS location_address_suburb,\n" +                "addr.postal_code AS location_address_postal_code,addr.state_oid AS location_address_state_oid,\n" +                "addr.country_oid AS location_address_country_oid,tt.transaction_class_cid,\n" +                "tt.is_displayed,tt.description AS transaction_type_description,tt.transaction_category_cid,\n" +                "vor.has_been_analysed,vor.vehicle_odo_reading_oid,\n" +                "CASE WHEN vor.vehicle_odo_reading_oid IS NOT NULL\n" +                "AND t.effective_at >= Nvl(cust_client.month_end_2_on,\n" +                "To_date('01/01/1970','dd/mm/yyyy'))+ 1 THEN 'Y'ELSE 'N'\n" +                "END AS is_odo_updateable,cust.customer_no AS account_no,cust.customer_mid,\n" +                "pos.terminal_id,cd.embossing_name,ccc.customer_cost_centre_code,d.driver_name,\n" +                "v.license_plate,pos.original_amount    AS trans_original_amount,\n" +                "cur.currency_code      AS original_currency_code_char,\n" +                "currCust.currency_code AS customer_currency_code_char\n" +                "FROM   transactions t\n" +                "LEFT JOIN transaction_line_items tli ON t.transaction_oid = tli.transaction_oid\n" +                "LEFT JOIN product_translations ptr ON ptr.product_translation_oid = tli.product_translation_oid\n" +                "LEFT JOIN vehicle_odo_readings vor ON vor.transaction_oid = t.transaction_oid\n" +                "INNER JOIN transaction_types tt ON t.transaction_type_oid = tt.transaction_type_oid\n" +                "LEFT JOIN cards cd ON cd.card_oid = t.card_oid\n" +                "LEFT OUTER JOIN pos_transactions pos ON pos.pos_transaction_oid = t.pos_transaction_oid\n" +                "LEFT JOIN drivers d ON d.driver_oid = t.driver_oid\n" +                "LEFT JOIN vehicles v ON v.vehicle_oid = t.vehicle_oid\n" +                "LEFT JOIN m_locations loc ON loc.location_mid = t.location_mid\n" +                "INNER JOIN m_customers cust ON cust.customer_mid = t.customer_mid\n" +                "INNER JOIN m_clients cust_client ON cust_client.client_mid = cust.client_mid\n" +                "LEFT JOIN cost_centres cc ON t.card_oid = cc.card_oid AND t.effective_at >= cc.effective_on\n" +                "AND t.effective_at <= ( cc.expires_on + 86399 / 86400)\n" +                "LEFT JOIN customer_cost_centres ccc ON ccc.customer_cost_centre_oid =\n" +                "cc.customer_cost_centre_oid\n" +                "LEFT JOIN addresses addr ON addr.address_oid = loc.street_address_oid\n" +                "LEFT JOIN currencies cur ON t.original_currency_oid = cur.currency_oid\n" +                "LEFT JOIN currencies currCust ON cust.currency_oid = currcust.currency_oid\n" +                "WHERE  1 = 1 AND t.effective_at >= '" + fromDate + "'\n" +                "AND t.effective_at <= '" + toDate + "11.59.59.000000000 PM'\n" +                "AND ( NULL IS NULL OR (SELECT Count (*)\n" +                "FROM   transaction_line_items tli WHERE  tli.transaction_oid = t.transaction_oid\n" +                "AND tli.product_translation_oid IN ( SELECT product_translation_oid\n" +                "FROM product_translations WHERE product_oid = NULL)) > 0 )\n" +                "AND Nvl(tli.line_number, 1) = 1 AND Nls_lower(customer_no) = '" + accountNo + "'\n" +                "AND is_displayed = 'Y' AND NOT transaction_class_cid = 7502\n" +                "AND ( loc.client_mid = " + getClientMidFromM_LocationsTable() + " OR CUST.client_mid = " + getClientMidFromM_LocationsTable() +                " ) ORDER  BY effective_at DESC,\n" +                "transaction_oid) nested_query WHERE  rownum <= 100000) WHERE  paged_query_rn >= 1";        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        return queryResults;    }    /*    Method to validate field values present in Transactions page     */    public int getTransactionRecordNumberFromUIToValidateFieldValues(Scenario logger, List<Map<String, String>> queryResultsInList) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        By dateLocator = By.cssSelector("div[class='date-display-group ng-star-inserted']");        List<WebElement> dates = basePage.getListOfElements(logger, dateLocator);        String effectiveDateFromDB = "";        Map<String, String> queryResults = getSpecificTransactionRecord(queryResultsInList, PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID"));        effectiveDateFromDB = getSpecificValueFromMapObject(queryResults, "EFFECTIVE_AT").substring(0, getSpecificValueFromMapObject(queryResults, "EFFECTIVE_AT").length() - 2);        String strDate = getDesiredDateInSpecificFormat(logger, effectiveDateFromDB, 0, "Future", "yyyy-MM-dd HH:mm:ss", "MMM dd");        int currentTransRecordAtPlaceOf = 0;        for (int i = 0; i <= dates.size() - 1; i++) {            if (dates.get(i).getText().equals(strDate)) {                currentTransRecordAtPlaceOf = i;                break;            }        }        return currentTransRecordAtPlaceOf;    }    /*    Method to get product description based on product id     */    public String getProductDescriptionBasedOnProductID(String PRODUCT_OID) {        if (PRODUCT_OID.equals("")) {            return "";        } else {            String query = "select description from products where product_oid = '" + PRODUCT_OID + "'";            Map<String, String> queryResultsOnMap = commonUtils.getQueryResultsOnMap(query);            return getSpecificValueFromMapObject(queryResultsOnMap, "DESCRIPTION");        }    }    /*    Method to get product oid from Transaction Enquiry table     */    public String getProductOIDFromTransAdjustmentItemsTable(String transactionOID) {        String query = "select PRODUCT_OID from trans_adjustment_items where transaction_oid = " + transactionOID;        Map<String, String> queryResultsOnMap = commonUtils.getQueryResultsOnMap(query);        String productOID = getSpecificValueFromMapObject(queryResultsOnMap, "PRODUCT_OID");        if (productOID == null) {            productOID = "";        }        return productOID;    }    /*    Method to get specific transaction record from database     */    public Map<String, String> getSpecificTransactionRecord(List<Map<String, String>> queryResults, String transactionOID) {        Map<String, String> specificTransRecord = new HashMap<>();        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        for (int i = 0; i <= queryResults.size() - 1; i++) {            if (getSpecificValueFromMapObject(queryResults.get(i), "TRANSACTION_OID").equals(PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID"))) {                specificTransRecord = queryResults.get(i);                break;            }        }        return specificTransRecord;    }    /*    Method to get specific transaction record from Transaction table     */    public String getSpecificTransactionRecordFromTransactionTable(String fieldName) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select * from transactions where transaction_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return getSpecificValueFromMapObject(queryResults, fieldName);    }    /*    Method to validate Transaction record field present in default view     */    public void validateTransactionFieldValues(Scenario logger, int currentTransRecordAtPlaceOf, List<Map<String, String>> queryResultsInList) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        Map<String, String> queryResults = getSpecificTransactionRecord(queryResultsInList, PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID"));        By transRecords = By.cssSelector("div[class='header-fields']>mat-grid-list");        List<WebElement> transRecordsList = basePage.getListOfElements(logger, transRecords);        List<WebElement> recordFieldValuesList = transRecordsList.get(currentTransRecordAtPlaceOf).findElements(By.cssSelector("div>mat-grid-tile>figure>div>div"));        String expectedProductDescription = getProductDescriptionBasedOnProductID(getProductOIDFromTransAdjustmentItemsTable(PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID")));        if (expectedProductDescription.equals("")) {            expectedProductDescription = "N/A";        }        String reference = "";        if (recordFieldValuesList.size() == 4) {            reference = recordFieldValuesList.get(3).getText();        } else if (recordFieldValuesList.size() == 3) {            reference = recordFieldValuesList.get(2).getText();        } else if (recordFieldValuesList.size() == 2) {            reference = recordFieldValuesList.get(1).getText();        }        String actualProductDescription = recordFieldValuesList.get(0).getText();//        basePage.assertTwoStrings(logger, expectedProductDescription, actualProductDescription);        basePage.assertTwoStrings(logger, getSpecificValueFromMapObject(queryResults, "REFERENCE"), reference);        validateTotalAmountAndCurrencySymbol(logger, recordFieldValuesList.get(1).getText().replaceAll(",", ""), queryResults);        Actions actions = new Actions(driver);        actions.moveToElement(transRecordsList.get(currentTransRecordAtPlaceOf)).click().perform();    }    /* cv    Method to validate total amount and currency symbol for a transaction     */    public void validateTotalAmountAndCurrencySymbol(Scenario logger, String totalAmountFromUI, Map<String, String> queryResults) {        String amount[] = totalAmountFromUI.split(" ");        String totalAmount = amount[1];        String actCurrencySymbol = amount[0];        String expCurrencySymbol = getCurrencySymbolBasedOnCurrencyCodeChar(getSpecificValueFromMapObject(queryResults, "CUSTOMER_CURRENCY_CODE_CHAR"));        basePage.assertTwoStrings(logger, expCurrencySymbol, actCurrencySymbol);        String expectedAmount = truncateDecimal(Double.valueOf(getSpecificValueFromMapObject(queryResults, "CUSTOMER_AMOUNT")), 2);        basePage.assertTwoStrings(logger, expectedAmount, totalAmount);    }    /*    Method to validate main fields of transaction     */    public void validateMainFieldsOfTransaction(Scenario logger, String fields, String cardType, List<Map<String, String>> queryResultsInList) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        int transRecordPosition = Integer.parseInt(PropUtils.getPropValue(testDataProp, "transactionRecordNumberInUI"))+1;        By lblTransactionMainFieldValues = By.xpath("(//div[contains(@class,'transaction-details')]/mat-grid-list[@class='main-details mat-grid-list'])[" + transRecordPosition + "]/div/mat-grid-tile/figure/div/div[2]");        By lblTransactionMainFieldNames = By.xpath("(//div[contains(@class,'transaction-details')]/mat-grid-list[@class='main-details mat-grid-list'])[" + transRecordPosition + "]/div/mat-grid-tile/figure/div/div[1]");        Map<String, String> queryResults = getSpecificTransactionRecord(queryResultsInList, PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID"));        List<WebElement> transMainFieldNamesList = basePage.getListOfElements(logger, lblTransactionMainFieldNames, 10);        List<WebElement> transMainFieldValuesList = basePage.getListOfElements(logger, lblTransactionMainFieldValues, 5);        String fieldsArr[] = {fields};        if (fields.contains(",")) {            fieldsArr = fields.split(",");        }        for (int i = 0; i <= transMainFieldNamesList.size()-1; i++) {            for (int j = 0; j <= fieldsArr.length - 1; j++) {                //if(fieldsArr[j].equals("DateOfTransaction")){                if (transMainFieldNamesList.get(i).getText().equals("")) {                    logger.log("expected value = "+transMainFieldNamesList.get(i).getText());                    PropUtils.setProps("trans-" + "DateOfTransaction", transMainFieldValuesList.get(i).getText(), baseUtils.testDataFilePath);                    logger.log("Actual value = "+transMainFieldNamesList.get(i).getText());                    break;                }                if (transMainFieldNamesList.get(i).getText().equals(fieldsArr[j])) {                    logger.log("expected value = "+transMainFieldNamesList.get(i).getText());                    PropUtils.setProps("trans-" + (transMainFieldNamesList.get(i).getText()).replaceAll("\\s+", ""), transMainFieldValuesList.get(i).getText(), baseUtils.testDataFilePath);                    logger.log("Actual value = "+fieldsArr[j]);                    break;                }            }        }        if (cardType.equalsIgnoreCase("CardTransaction")) {            validateCardTransactionMainSectionFields(logger, queryResults);        } else if (cardType.equalsIgnoreCase("NonCardTransaction")) {            validateNonCardTransactionMainSectionFields(logger, queryResults);        } else if (cardType.equalsIgnoreCase("RebateTransaction")) {        }    }    /*    Method to validate Non card Transaction main section fields     */    public void validateNonCardTransactionMainSectionFields(Scenario logger, Map<String, String> queryResults) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        validateTotalAmountAndCurrencySymbol(logger, PropUtils.getPropValue(testDataProp, "trans-Totalamount"), queryResults);//        basePage.assertTwoStrings(logger,getSpecificValueFromMapObject(queryResults,"EFFECTIVE_AT"),PropUtils.getPropValue(testDataProp,"trans-DateOfTransaction"));        basePage.assertTwoStrings(logger, getTransactionTypeDescriptionBasedOnTransactionTypeOid(getSpecificValueFromMapObject(queryResults, "TRANSACTION_TYPE_OID")), PropUtils.getPropValue(testDataProp, "trans-Transactiontype"));        basePage.assertTwoStrings(logger, getGLAccountDescriptionBaseOnTransactionOid(), PropUtils.getPropValue(testDataProp, "trans-GLaccount"));        //Validate posted time        basePage.assertTwoStrings(logger, getDesiredValueFromTransAdjustmentItemsBasedOnTransactionOid("APPROVED_BY"), PropUtils.getPropValue(testDataProp, "trans-Approvedby"));    }    /*    Method to validate cardTransaction main section fields     */    public void validateCardTransactionMainSectionFields(Scenario logger, Map<String, String> queryResults) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        validateTotalAmountAndCurrencySymbol(logger, PropUtils.getPropValue(testDataProp, "trans-Totalamount"), queryResults);        basePage.assertTwoStrings(logger, getSpecificValueFromMapObject(queryResults, "CUSTOMER_COST_CENTRE_CODE"), PropUtils.getPropValue(testDataProp, "trans-Costcentre"));//        basePage.assertTwoStrings(logger,getSpecificValueFromMapObject(queryResults,"EFFECTIVE_AT"),PropUtils.getPropValue(testDataProp,"trans-DateOfTransaction"));        basePage.assertTwoStrings(logger, getSpecificValueFromMapObject(queryResults, "DRIVER_NAME"), PropUtils.getPropValue(testDataProp, "trans-Drivername"));        basePage.assertTwoStrings(logger, getVehicleDescriptionBasedOnLicensePlateNo(getSpecificValueFromMapObject(queryResults, "LICENSE_PLATE")), PropUtils.getPropValue(testDataProp, "trans-Vehicledescription"));    }    /*    Method to validate transaction deftails field values     */    public void validateDetailsFieldsOfTransaction(Scenario logger, String fields, String cardType, List<Map<String, String>> queryResultsInList) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        int transRecordPosition = Integer.parseInt(PropUtils.getPropValue(testDataProp, "transactionRecordNumberInUI"))+1;        By lblTransactionDetailsFieldNames = By.xpath("(//div[@class='transaction-details']/mat-grid-list[@class='transction-details mat-grid-list'])[" + transRecordPosition + "]/div/mat-grid-tile/figure/div/div[1]");        By lblTransactionDetailsFieldValues = By.xpath("(//div[@class='transaction-details']/mat-grid-list[@class='transction-details mat-grid-list'])[" + transRecordPosition + "]/div/mat-grid-tile/figure/div/div[2]");        By lblNonCardTransactionDetailsFieldNames = By.xpath("(//mat-grid-list[@class='transction-details border-bottom mat-grid-list'])[" + transRecordPosition + "]/div/mat-grid-tile/figure/div/div[1]");        By lblNonCardTransactionDetailsFieldValues = By.xpath("(//mat-grid-list[@class='transction-details border-bottom mat-grid-list'])[" + transRecordPosition + "]/div/mat-grid-tile/figure/div/div[2]");        Map<String, String> queryResults = getSpecificTransactionRecord(queryResultsInList, PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID"));        List<WebElement> transDetailsFieldNamesList = null;        List<WebElement> transDetailsFieldValuesList = null;        if (cardType.equalsIgnoreCase("NonCardTransaction")) {            transDetailsFieldNamesList = basePage.getListOfElements(logger, lblNonCardTransactionDetailsFieldNames, 10);            transDetailsFieldValuesList = basePage.getListOfElements(logger, lblNonCardTransactionDetailsFieldValues, 5);        } else if (cardType.equalsIgnoreCase("CardTransaction")) {            transDetailsFieldNamesList = basePage.getListOfElements(logger, lblTransactionDetailsFieldNames, 10);            transDetailsFieldValuesList = basePage.getListOfElements(logger, lblTransactionDetailsFieldValues, 5);        }        String fieldsArr[] = {fields};        if (fields.contains(",")) {            fieldsArr = fields.split(",");        }        for (int i = 0; i <= transDetailsFieldNamesList.size() - 1; i++) {            for (int j = 0; j <= fieldsArr.length - 1; j++) {                if (transDetailsFieldNamesList.get(i).getText().equals(fieldsArr[j])) {                    PropUtils.setProps("trans-" + (transDetailsFieldNamesList.get(i).getText()).replaceAll("\\s", ""), transDetailsFieldValuesList.get(j).getText(), baseUtils.testDataFilePath);                    break;                }            }        }        if (cardType.equalsIgnoreCase("CardTransaction")) {            validateCardTransactionDetailsSectionFields(logger, queryResults);        } else if (cardType.equalsIgnoreCase("NonCardTransaction")) {            validateNonCardTransactionDetailsSectionFields(logger, queryResults);        } else if (cardType.equalsIgnoreCase("RebateTransaction")) {        }    }    /*     Method to validate Non Card transaction detail section fields      */    public void validateNonCardTransactionDetailsSectionFields(Scenario logger, Map<String, String> queryResults) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        basePage.assertTwoStrings(logger, getDesiredValueFromTransAdjustmentItemsBasedOnTransactionOid("CHEQUE_NO"), PropUtils.getPropValue(testDataProp, "trans-ChequeNo"));        basePage.assertTwoStrings(logger, getDesiredValueFromTransAdjustmentItemsBasedOnTransactionOid("SUPPLIED_REMITTANCE_ID"), PropUtils.getPropValue(testDataProp, "trans-RemittanceID"));        basePage.assertTwoStrings(logger, getNoteValueFromTransactionNoteTableBasedOnTransactionOid(), PropUtils.getPropValue(testDataProp, "trans-Note"));    }    /*    Method to validate card transaction details fields     */    public void validateCardTransactionDetailsSectionFields(Scenario logger, Map<String, String> queryResults) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        basePage.assertTwoStrings(logger, getSpecificValueFromMapObject(queryResults, "LOCATION_NO") + " " + getSpecificValueFromMapObject(queryResults, "LOCATION_NAME"), PropUtils.getPropValue(testDataProp, "trans-Location"));        basePage.assertTwoStrings(logger, getLocationAddressOfTransaction(queryResults), PropUtils.getPropValue(testDataProp, "trans-Locationaddress"));//        basePage.assertTwoStrings(logger,getPostedDateAndTimeOfATransaction(),PropUtils.getPropValue(testDataProp,"trans-Posted time"));        basePage.assertTwoStrings(logger, getSpecificValueFromMapObject(queryResults, "REFERENCE"), PropUtils.getPropValue(testDataProp, "trans-Referencenumber"));        basePage.assertTwoStrings(logger, getCaptureTypeBasedOnTransactionOid(), PropUtils.getPropValue(testDataProp, "trans-Capturetype"));        basePage.assertTwoStrings(logger, getTransactionDescriptionBasedOnTransactionCategoryCID(), PropUtils.getPropValue(testDataProp, "trans-Transactiontype"));        basePage.assertTwoStrings(logger, getAuthorisationNoBasedOnTransactionNumber(), PropUtils.getPropValue(testDataProp, "trans-Authorisationnumber"));        basePage.assertTwoStrings(logger, getSpecificValueFromMapObject(queryResults, "ODOMETER"), PropUtils.getPropValue(testDataProp, "trans-Odometer"));    }    /*    Method to get location address of transaction     */    public String getLocationAddressOfTransaction(Map<String, String> queryResults) {        String locationAddress = "";        locationAddress = getSpecificValueFromMapObject(queryResults, "LOCATION_ADDRESS");        if (!getSpecificValueFromMapObject(queryResults, "LOCATION_ADDRESS_SUBURB").equals("")) {            locationAddress = locationAddress + " " + getSpecificValueFromMapObject(queryResults, "LOCATION_ADDRESS_SUBURB");        }        if (!getSpecificValueFromMapObject(queryResults, "LOCATION_ADDRESS_POSTAL_CODE").equals("")) {            locationAddress = locationAddress + " " + getSpecificValueFromMapObject(queryResults, "LOCATION_ADDRESS_POSTAL_CODE");        }        return locationAddress;    }    /*    Method to get Authorisation number based on transaction oid     */    public String getAuthorisationNoBasedOnTransactionNumber() {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select AUTHORISATION_NO from pos_transactions\n" +                "inner join transactions on transactions.pos_transaction_oid = pos_transactions.pos_transaction_oid\n" +                "where transactions.transaction_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = getSpecificValueFromMapObject(queryResults, "AUTHORISATION_NO");        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get transaction description based on transaction category cid     */    public String getTransactionDescriptionBasedOnTransactionCategoryCID() {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select description from constants where constant_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransCategoryCID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return getSpecificValueFromMapObject(queryResults, "DESCRIPTION");    }    /*    Method to get capture type based on Transactionoid     */    public String getCaptureTypeBasedOnTransactionOid() {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select description from capture_types\n" +                "inner join transactions on transactions.capture_type_oid = capture_types.capture_type_oid\n" +                "where transaction_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get Posted date and time of a transaction based on transactionoid     */    public String getPostedDateAndTimeOfATransaction() {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select POSTED_AT from transactions where transaction_oid = '" + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID") + "'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return getSpecificValueFromMapObject(queryResults, "POSTED_AT");    }    /*    Method to get vehicle description based on the license plate number     */    public String getVehicleDescriptionBasedOnLicensePlateNo(String licensePlateNo) {        String query = "select Description from vehicles where LICENSE_PLATE = '" + licensePlateNo + "'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get currency symbol based on currency oid     */    public String getCurrencySymbolBasedOnCurrencyCodeChar(String currencyCodeChar) {        String query = "select CURRENCY_SYMBOL from currencies where CURRENCY_CODE = '" + currencyCodeChar + "'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        return getSpecificValueFromMapObject(queryResults, "CURRENCY_SYMBOL");    }    /*    Method to validate TransactionBreakdown fields of card transaction     */    public void validateTransBreakDownFields(Scenario logger, String breakDownType, String fields, List<Map<String, String>> queryResultsInList) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        int transRecordPosition = Integer.parseInt(PropUtils.getPropValue(testDataProp, "transactionRecordNumberInUI"))+1;        By lblTransBreakDownTableBorderFieldNames = By.xpath("(//table[@class='table-border'])[" + transRecordPosition + "]/thead/tr/th");        By lblTransBreakDownTableBorderFieldValues = By.xpath("(//table[@class='table-border'])[" + transRecordPosition + "]/tbody/tr/td");        By lblTransBreakDownTableAmountFieldNames = By.xpath("(//div[@class='table-amount-section'])[" + transRecordPosition + "]/div/div");        By lblTransBreakDownTableAmountFiledValues = By.xpath("(//div[@class='table-amount-section'])[" + transRecordPosition + "]/div/span");        Map<String, String> queryResults = getSpecificTransactionRecord(queryResultsInList, PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID"));        List<WebElement> transBreakDownTableBorderFieldNamesList = basePage.getListOfElements(logger, lblTransBreakDownTableBorderFieldNames, 10);        List<WebElement> transBreakDownTableBorderFieldValuesList = basePage.getListOfElements(logger, lblTransBreakDownTableBorderFieldValues, 5);        By lineItemsForCurrentTransaction = By.xpath("(//table[@class='table-border'])[" + transRecordPosition + "]//tbody/tr");        List<WebElement> transBreakDownLines = basePage.getListOfElements(logger, lineItemsForCurrentTransaction);        String fieldsArr[] = {fields};        if (fields.contains(",")) {            fieldsArr = fields.split(",");        }        if (breakDownType.equals("Border")) {            for (int k = 1; k <= transBreakDownLines.size(); k++) {                outerloop:                for (int i = 0; i <= transBreakDownTableBorderFieldNamesList.size() - 1; i++) {                    for (int j = 0; j <= fieldsArr.length - 1; j++) {                        if (transBreakDownTableBorderFieldNamesList.get(i).getText().equals(fieldsArr[j])) {                            PropUtils.setProps("trans-" + k + "-" + transBreakDownTableBorderFieldNamesList.get(i).getText().replaceAll("\\s", ""), transBreakDownTableBorderFieldValuesList.get(j).getText(), baseUtils.testDataFilePath);                            break;                        }                    }                }                testDataProp = PropUtils.getProps(baseUtils.testDataFile);                basePage.assertTwoStrings(logger, getAnyFieldValueFromProductTranslationTableForATransactionLineItem("DESCRIPTION", k), PropUtils.getPropValue(testDataProp, "trans-" + k + "-Product"));                String expQuantity = getAnyFieldValueFromProductTranslationTableForATransactionLineItem("QUANTITY", k);                String expCurrencyCode = getCurrencySymbolBasedOnCurrencyCodeChar(getSpecificValueFromMapObject(queryResults, "CUSTOMER_CURRENCY_CODE_CHAR"));                String expOriginalUnitPrice = getAnyFieldValueFromProductTranslationTableForATransactionLineItem("CUSTOMER_UNIT_PRICE", k);//                basePage.assertTwoStrings(logger, expQuantity + " @ " + expCurrencyCode + " " + expOriginalUnitPrice, PropUtils.getPropValue(testDataProp, "trans-" + k + "-Unitprice"));                basePage.assertTwoStrings(logger, expCurrencyCode + " " + truncateDecimal(Double.valueOf(getAnyFieldValueFromProductTranslationTableForATransactionLineItem("CUSTOMER_VALUE", k)), 2), PropUtils.getPropValue(testDataProp, "trans-" + k + "-Total(incloftax&rebate)"));            }        }        List<WebElement> transBreakDownTableAmountFieldNamesList = basePage.getListOfElements(logger, lblTransBreakDownTableAmountFieldNames, 10);        List<WebElement> transBreakDownTableAmountFieldValuesList = basePage.getListOfElements(logger, lblTransBreakDownTableAmountFiledValues, 5);        if (breakDownType.equals("Amount")) {            outerloop:            for (int i = 0; i <= transBreakDownTableBorderFieldNamesList.size() - 1; i++) {                for (int j = 0; j <= fieldsArr.length - 1; j++) {                    if (transBreakDownTableAmountFieldNamesList.get(i).getText().equals(fieldsArr[j])) {                        PropUtils.setProps("trans-" + transBreakDownTableAmountFieldNamesList.get(i).getText().replaceAll("\\s", ""), transBreakDownTableAmountFieldValuesList.get(j).getText(), baseUtils.testDataFilePath);                        break;                    }                }            }            testDataProp = PropUtils.getProps(baseUtils.testDataFile);            //validate Fees value            basePage.assertTwoStrings(logger, getCurrencySymbolBasedOnCurrencyCodeChar(queryResults.get("CUSTOMER_CURRENCY_CODE_CHAR")) + " " + truncateDecimal(Double.valueOf(getSpecificTransactionRecordFromTransactionTable("FEE_TOTAL_AMOUNT")), 2), PropUtils.getPropValue(testDataProp, "trans-Fees"));            basePage.assertTwoStrings(logger, getCurrencySymbolBasedOnCurrencyCodeChar(queryResults.get("CUSTOMER_CURRENCY_CODE_CHAR")) + " " + truncateDecimal(Double.valueOf(getSpecificValueFromMapObject(queryResults, "CUSTOMER_AMOUNT")), 2), PropUtils.getPropValue(testDataProp, "trans-Transactionamount"));            basePage.assertTwoStrings(logger, getCurrencySymbolBasedOnCurrencyCodeChar(queryResults.get("CUSTOMER_CURRENCY_CODE_CHAR")) + " " + truncateDecimal(Double.valueOf(getSpecificTransactionRecordFromTransactionTable("CUSTOMER_TAX_AMOUNT")), 2), PropUtils.getPropValue(testDataProp, "trans-Totaltaxes"));            //Validate Total Rebate value//            basePage.assertTwoStrings(logger, getCurrencySymbolBasedOnCurrencyCodeChar(queryResults.get("CUSTOMER_CURRENCY_CODE_CHAR"))+" "+truncateDecimal(Double.valueOf(getSpecificTransactionRecordFromTransactionTable("CUSTOMER_REBATE_TOTAL")), 2), PropUtils.getPropValue(testDataProp, "trans-Totalrebate"));        }    }    /*    Method to validate Rebate Break down section     */    public void validateTransRebateBreakDownSection(Scenario logger, String fields, List<Map<String, String>> queryResultsInList) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        Map<String, String> queryResults = getSpecificTransactionRecord(queryResultsInList, PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID"));        List<WebElement> transRebateBreakDownFieldNamesList = basePage.getListOfElements(logger, lblTransRebateBreakDownFieldNames, 10);        List<WebElement> transRebateBreakDownFieldValues = basePage.getListOfElements(logger, lblTransRebateBreakDownFieldValues, 5);        String fieldsArr[] = {fields};        if (fields.contains(",")) {            fieldsArr = fields.split(",");        }        for (int i = 0; i <= transRebateBreakDownFieldNamesList.size() - 1; i++) {            for (int j = 0; j <= fieldsArr.length - 1; j++) {                if (transRebateBreakDownFieldNamesList.get(i).getText().equals(fieldsArr[j])) {                    PropUtils.setProps("trans-" + transRebateBreakDownFieldNamesList.get(i).getText().replaceAll("\\s", ""), transRebateBreakDownFieldValues.get(j).getText(), baseUtils.testDataFilePath);                    break;                }            }        }        String detailedNote = getDetailedNoteOfTransactionUsingTranscationOid(PropUtils.getPropValue(baseUtils.testDataProperties, "trans-currentScenarioTransID"));        if (!detailedNote.equals("")) {            String breakDownFieldRows[] = {};            if (detailedNote.contains("\n")) {                breakDownFieldRows = detailedNote.split("\n");                String rebateType = "";                String rebateAmount = "";                String taxRate = "";                String rebateVolume = "";                String product = "";                for (int i = 0; i <= breakDownFieldRows.length - 1; i++) {                    String breakDownFields[] = breakDownFieldRows[i].split(":");                    if (breakDownFields[0].equals("Trans Rebate Type")) {                        rebateType = breakDownFields[1];                    }                    if (breakDownFields[0].equals("Rebate amt")) {                        rebateAmount = breakDownFields[1];                    }                    if (breakDownFields[0].equals("Tax Rate")) {                        taxRate = breakDownFields[1];                    }                    if (breakDownFields[0].equals("Volume")) {                        rebateVolume = breakDownFields[1];                    }                    if (breakDownFields[0].equals("Product")) {                        product = breakDownFields[1];                    }                }                testDataProp = PropUtils.getProps(baseUtils.testDataFile);                basePage.assertTwoStrings(logger, product, PropUtils.getPropValue(testDataProp, "trans-Product"));                basePage.assertTwoStrings(logger, rebateType, PropUtils.getPropValue(testDataProp, "trans-Transrebatetype"));                basePage.assertTwoStrings(logger, getCurrencySymbolBasedOnCurrencyCodeChar(queryResults.get("CUSTOMER_CURRENCY_CODE_CHAR")) + " " + truncateDecimal(Double.valueOf(rebateVolume), 2), PropUtils.getPropValue(testDataProp, "trans-Value"));                basePage.assertTwoStrings(logger, getCurrencySymbolBasedOnCurrencyCodeChar(queryResults.get("CUSTOMER_CURRENCY_CODE_CHAR")) + " " + truncateDecimal(Double.valueOf(rebateAmount), 2), PropUtils.getPropValue(testDataProp, "trans-Rebateamount"));                basePage.assertTwoStrings(logger, truncateDecimal(Double.valueOf(taxRate), 2), PropUtils.getPropValue(testDataProp, "trans-Rate"));            } else {                logger.log("Break down field data is not sufficient to read");            }        } else {            logger.log("Break down values are not available for this transaction");        }    }    /*    Method to get DetailedNote of Transaction     */    public String getDetailedNoteOfTransactionUsingTranscationOid(String transactionOid) {        String fieldValue = "";        String query = "select DETAILED_NOTE from transaction_notes where transaction_oid = " + transactionOid;        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        try {            fieldValue = queryResults.get("DETAILED_NOTE");        } catch (NullPointerException e) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get specific value from Map Object     */    public String getSpecificValueFromMapObject(Map<String, String> queryResults, String fieldName) {        String fieldValue = queryResults.get(fieldName);        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to truncate decimals     */    private String truncateDecimal(double x, int numberofDecimals) {        if (x > 0) {            return new BigDecimal(String.valueOf(x)).setScale(numberofDecimals, BigDecimal.ROUND_FLOOR).toString();        } else {            return new BigDecimal(String.valueOf(x)).setScale(numberofDecimals, BigDecimal.ROUND_CEILING).toString();        }    }    /*    Method to get product description from Product table based on product oid from transaction line items table for a transaction_oid     */    public String getAnyFieldValueFromProductTranslationTableForATransactionLineItem(String fieldName, int numberOFLine) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select " + fieldName + " from product_translations pt\n" +                "inner join transaction_line_items tli on tli.PRODUCT_TRANSLATION_OID = pt.PRODUCT_TRANSLATION_OID\n" +                "inner join transactions t on t.transaction_oid = tli.transaction_oid\n" +                "where t.transaction_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID") + " " +                "and tli.LINE_NUMBER = " + numberOFLine;        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = queryResults.get(fieldName);        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to click on Transaction breakdown     */    public void clickOnTransactionBreakDown(Scenario logger) {//        basePage.userClickJSExecutor(logger, sectionTransactionBreakDown);        Actions actions = new Actions(driver);        actions.moveToElement(driver.findElement(sectionTransactionBreakDown)).click().perform();    }    /*    Method to get Transaction type description from transaction types table based on transaction type oid     */    public String getTransactionTypeDescriptionBasedOnTransactionTypeOid(String transactionTypeOid) {        String query = "select description from transaction_types where transaction_type_oid = " + transactionTypeOid;        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get GL Account description for a transaction based on Transaction_oid     */    public String getGLAccountDescriptionBaseOnTransactionOid() {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select description from gl_acct_no_enquiry gl\n" +                "inner join trans_adjustment_items tai on tai.GL_ACCOUNT_CODE_OID = gl.GL_ACCOUNT_CODE_OID\n" +                "inner join transactions t on t.transaction_oid = tai.transaction_oid\n" +                "where t.transaction_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get desired value from trans_adjustment_items     */    public String getDesiredValueFromTransAdjustmentItemsBasedOnTransactionOid(String fieldName) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select " + fieldName + " from trans_adjustment_items where transaction_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = queryResults.get(fieldName);        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get value of Note from Transaction Note table     */    public String getNoteValueFromTransactionNoteTableBasedOnTransactionOid() {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "select SHORT_NOTE from transaction_notes tn\n" +                "inner join transactions t on t.transaction_oid = tn.transaction_oid\n" +                "where t.transaction_oid = " + PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String fieldValue = getSpecificValueFromMapObject(queryResults, "SHORT_NOTE");        if (fieldValue == null) {            fieldValue = "";        }        return fieldValue;    }    /*    Method to get contact types in comma separated available for an account from database     */    public String getAvailableClientProductsForAnAccount(String accountNumber) {// Get user statuses based on account which selected at the top right corner        String contactTypesQuery = "select description from client_products_view cpv\n" +                "inner join m_clients mc on mc.client_mid = cpv.client_mid\n" +                "inner join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                "where mc.short_name = '" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "' and mcust.customer_no = '" + accountNumber + "' and Is_used_by_card_remote ='Y'";        List<Map<String, String>> contactTypes = commonUtils.getAllRowsOfQueryResultsOnListMap(contactTypesQuery);        String dbClientProductsForAnAccount = "";        for (int i = 0; i <= contactTypes.size() - 1; i++) {            if (i == contactTypes.size() - 1) {                dbClientProductsForAnAccount = dbClientProductsForAnAccount + contactTypes.get(i).get("DESCRIPTION");            } else {                dbClientProductsForAnAccount = dbClientProductsForAnAccount + contactTypes.get(i).get("DESCRIPTION") + ",";            }        }        return dbClientProductsForAnAccount;    }    /*   Method to click value from filter    */    public void clickValueFromFilter(Scenario logger, String filterName, String filterValue) {        By locator = By.xpath("//div[contains(text(),'" + filterName + "')]");        basePage.userClick(logger, locator);        commonPage.clickButtonUsingSpan(logger, filterValue);    }    /*    Method to get transaction level product     */    public String getTransactionLevelProduct(String transactionOID) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        if (transactionOID.equals("")) {            transactionOID = PropUtils.getPropValue(testDataProp, "trans-currentScenarioTransID");        }        String query = "select TRANSACTION_CATEGORY_CID from transactions where transaction_oid = " + transactionOID;        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String transCategoryOid = getSpecificValueFromMapObject(queryResults, "TRANSACTION_CATEGORY_CID");        query = "select description from product_translations pt\n" +                "inner join transactions t on t.PRODUCT_TRANSLATION_OID = pt.PRODUCT_TRANSLATION_OID\n" +                "where t.transaction_oid = " + transactionOID;        queryResults = commonUtils.getQueryResultsOnMap(query);        String productDescription = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");        if (productDescription.equals("")) {            query = "select description from products p\n" +                    "inner join transaction_line_items tli on tli.product_oid = p.product_oid\n" +                    "inner join transactions t on t.transaction_oid = tli.transaction_oid\n" +                    "where t.transaction_oid = " + transactionOID                    + " and tli.line_number = 1";            queryResults = commonUtils.getQueryResultsOnMap(query);            productDescription = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");            if (productDescription.equals("")) {                query = "select description from products p \n" +                        "inner join transactions t on t.product_oid = p.product_oid\n" +                        "where t.transaction_oid = " + transactionOID;                queryResults = commonUtils.getQueryResultsOnMap(query);                productDescription = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");                if (productDescription.equals("")) {                    query = "select description from constants where constant_oid = " +                            transCategoryOid;                    queryResults = commonUtils.getQueryResultsOnMap(query);                    productDescription = getSpecificValueFromMapObject(queryResults, "DESCRIPTION");                }            }        }        return productDescription;    }}