package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.interactions.Actions;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import java.util.List;import java.util.Map;public class ContactsPage {    private WebDriver driver;    private BasePage basePage;    CommonDBUtils commonUtils;    private BaseUtils baseUtils;    private CommonPage commonPage;    public Scenario logger;    /* Constructor to get the driver object */    public ContactsPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);    }    private static final By chkBoxMailingAddress = By.cssSelector("div[class='mailing-address ng-star-inserted']>mat-checkbox>label>div>input");    private static final By chkBoxSetAsPrimaryContact = By.cssSelector("div[class='mat-checkbox-mixedmark']");    private static final By chkBoxSelectSetAsPrimaryContact = By.cssSelector("div[class='mat-checkbox-background']>div");    private static final By btnApplyOnFilters = By.xpath("//span[contains(text(),'Apply')]");    private static final By lblDeleteContactPopUp = By.cssSelector("mat-dialog-content[class='mat-dialog-content']");    private static final By nextButtonStatus= By.cssSelector("button[class='submit-button mav-primary-enable']");    private static final By stateDropDownValues = By.xpath("//mat-option[contains(@class,'mat-option mat-focus-indicator ng-star-inserted')]/span");    /*    Method to verify mailing check box is selected by default or not     */    public void verifyStatusOfCheckBox(Scenario logger, String nameOfCheckBox, String formType) {        Boolean isSelected = false;        if (nameOfCheckBox.equalsIgnoreCase("Use same as Contact Address")) {            if(formType.equalsIgnoreCase("add")){                isSelected = basePage.isCheckBoxSelected(logger, By.xpath("(//div[@class='mat-checkbox-mixedmark'])[2]"));            }else {                isSelected = basePage.isCheckBoxSelected(logger, By.xpath("(//div[@class='mat-checkbox-mixedmark'])[1]"));            }        }else if(nameOfCheckBox.equalsIgnoreCase("Set as primary contact")){            isSelected = basePage.isCheckBoxSelected(logger, By.xpath("(//div[@class='mat-checkbox-mixedmark'])[1]"));        }        if (isSelected) {            logger.log(nameOfCheckBox + " is already selected");        } else {            logger.log(nameOfCheckBox + " is not selected");        }    }    /*    Method to select the check box of set as primary contact     */    public void selectCheckBoxOfSetAsPrimaryContact(Scenario logger, String nameOfCheckBox) {        if (nameOfCheckBox.equalsIgnoreCase("Use same as Contact Address")) {            commonPage.clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger,By.xpath("(//div[@class='mat-checkbox-mixedmark'])[2]")));        }else if(nameOfCheckBox.equalsIgnoreCase("Set as primary contact")){            commonPage.clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger,By.xpath("(//div[@class='mat-checkbox-mixedmark'])[1]")));        }        WebElement element = driver.findElement(chkBoxSelectSetAsPrimaryContact);        Actions actions = new Actions(driver);        actions.moveToElement(element).click().build().perform();    }    /*    Method to get contact types in comma separated available for an account from database     */    public String getAvailableContactTypesForAnAccount(String accountNumber) {// Get user statuses based on account which selected at the top right corner        String contactTypesQuery = "select distinct description from contact_types\n" +                "inner join contacts on contacts.CONTACT_TYPE_OID = contact_types.CONTACT_TYPE_OID\n" +                "inner join m_customers on m_customers.customer_mid = contacts.member_oid\n" +                "where m_customers.customer_No = '" + accountNumber + "'";        List<Map<String, String>> contactTypes = commonUtils.getAllRowsOfQueryResultsOnListMap(contactTypesQuery);        String dbUserStatusesForAnAccount = "";        for (int i = 0; i <= contactTypes.size() - 1; i++) {            if (i == contactTypes.size() - 1) {                dbUserStatusesForAnAccount = dbUserStatusesForAnAccount + contactTypes.get(i).get("DESCRIPTION");            } else {                dbUserStatusesForAnAccount = dbUserStatusesForAnAccount + contactTypes.get(i).get("DESCRIPTION") + ",";            }        }        return dbUserStatusesForAnAccount;    }    /*    Method to get contact levels in comma seperated available for an account from database     */    public String getAvailableContactLevelsForAnAccount(String accountNumber) {        // Get user roles based on account which selected at the top right corner        String contactLevelsQuery = "select distinct is_default from contacts\n" +                "inner join m_customers on m_customers.customer_mid = contacts.member_oid\n" +                "where m_customers.customer_no = '" + accountNumber + "'";        List<Map<String, String>> contactLevels = commonUtils.getAllRowsOfQueryResultsOnListMap(contactLevelsQuery);        String dbUserRolesForAnAccount = "";        for (int i = 0; i <= contactLevels.size() - 1; i++) {            if (i == contactLevels.size() - 1) {                dbUserRolesForAnAccount = dbUserRolesForAnAccount + contactLevels.get(i).get("IS_DEFAULT");            } else {                dbUserRolesForAnAccount = dbUserRolesForAnAccount + contactLevels.get(i).get("IS_DEFAULT") + ",";            }        }        return dbUserRolesForAnAccount;    }    /*    Method to get contact Types with comma separated with single quotes     */    public String getContactFilterValuesInCommaSeparatedWithSingleQuotes(String contactFilter) {        String contactFilterValues = "";        String arrDbContactTypesForAnAccount[] = {contactFilter};        if (contactFilter.contains(",")) {            arrDbContactTypesForAnAccount = contactFilter.split(",");        }        for (int j = 0; j <= arrDbContactTypesForAnAccount.length - 1; j++) {            if (j == arrDbContactTypesForAnAccount.length - 1) {                contactFilterValues = contactFilterValues + "'" + arrDbContactTypesForAnAccount[j] + "'";            } else {                contactFilterValues = contactFilterValues + "'" + arrDbContactTypesForAnAccount[j] + "'" + ",";            }        }        return contactFilterValues;    }    /*    Method to select values from contact level filter     */    public void selectValuesFromContactLevelFilter(Scenario logger, String filterName, String filterValues) {        String filterValuesArray[] = {filterValues};        if (filterValues.contains(",")) {            filterValuesArray = filterValues.split(",");        }        By locator = By.xpath("//div[contains(text(),'" + filterName + "')]");        basePage.userClick(logger, locator);        basePage.userClick(logger,By.xpath("(//mat-option/mat-pseudo-checkbox[@class='mat-option-pseudo-checkbox mat-pseudo-checkbox ng-star-inserted mat-pseudo-checkbox-checked'])[1]"));        By filterValuesLocator = By.cssSelector("mat-option>mat-pseudo-checkbox[class='mat-option-pseudo-checkbox mat-pseudo-checkbox ng-star-inserted']");        List<WebElement> filterCheckBoxes = basePage.getListOfElements(logger, filterValuesLocator);        By checkBoxNameLocator = By.cssSelector("mat-option>span");        List<WebElement> checkBoxNameList = basePage.getListOfElements(logger, checkBoxNameLocator);        int j = 1;        Boolean isFilterValueNPresent = false;        Boolean isFilterValueYPresent = false;        for (String filterValue : filterValuesArray) {            if (filterValue.equalsIgnoreCase("N")) {                isFilterValueNPresent = true;            }            if (filterValue.equalsIgnoreCase("Y")) {                isFilterValueYPresent = true;            }        }        if(!isFilterValueNPresent || !isFilterValueYPresent) {            outerloop:            for (int i = 0; i <= filterValuesArray.length - 1; i++) {                for (int k = 0; k <= checkBoxNameList.size() - 1; k++) {                    String filterValue = "";                    if (filterValuesArray[i].equals("Y")) {                        filterValue = "Primary";                        if (filterValue.equals(checkBoxNameList.get(k).getText())) {                            filterCheckBoxes.get(k).click();                            logger.log(checkBoxNameList.get(k).getText() + " value is checked");                            basePage.userClick(logger, btnApplyOnFilters);                            break outerloop;                        }                    }                    if (filterValuesArray[i].equals("N")) {                        filterValue = "Additional";                        if (filterValue.equals(checkBoxNameList.get(k).getText())) {                            filterCheckBoxes.get(k).click();                            logger.log(checkBoxNameList.get(k).getText() + " value is checked");                            basePage.userClick(logger, btnApplyOnFilters);                            break outerloop;                        }                    }                }            }        }else{            commonPage.clickButtonUsingSpan(logger,"All");            commonPage.clickButtonUsingSpan(logger,"Apply");        }        commonPage.sleepForFewSeconds(2);    }    /*    Method to vlaidate the text present in Delete contact pop up or not     */    public void verifyTextOfDeleteContactPopUp(Scenario logger, String expText){        String actText = basePage.userGetTextFromWebElement(logger, lblDeleteContactPopUp);        basePage.assertTwoStrings(logger, expText, actText);    }    /*   Method to select random value from drop down    */    public void selectRandomValueFromStateDropDown(Scenario logger){        basePage.userClick(logger, By.cssSelector("mav-select[name='state']"));        basePage.selectRandomValueFromDropDown(logger,stateDropDownValues);        PropUtils.setProps("state",basePage.userGetTextFromWebElement(logger,By.cssSelector("mav-select[name='state']>mat-select>div>div>span>span")),baseUtils.testDataFilePath);        logger.log("selected random value of state drop down");    }    /*     Method to click on Next or submit on the form      */    public void verifyNextButton(Scenario logger){        if(basePage.whetherElementPresent(logger, nextButtonStatus)){            logger.log("The Next button is Enabled");        }else{            logger.log("The Next button is disabled");        }    }}