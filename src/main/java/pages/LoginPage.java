package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;//import listeners.ExtentReportListener;import org.junit.Assert;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.DataBaseUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import utilities.ui.PasswordGenerator;import utilities.ui.WebDriverInitialization;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.regex.Matcher;import java.util.regex.Pattern;public class LoginPage {    private WebDriver driver;    private BasePage basePage;    CommonDBUtils commonUtils;    private BaseUtils baseUtils;    public Scenario logger;    /* Constructor to get the driver object */    public LoginPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();    }    //Locators    private static final By txtUserName = By.cssSelector("mav-input[name='username']>input");    private static final By txtPassWord = By.cssSelector("mav-input[name='password']>input");    private static final By btnLogin = By.id("login-button");    private static final By liForgotPassword = By.linkText("Forgot your password?");    private static final By btnForgotPassword = By.cssSelector("button[id='forgot-password-button']");    private static final By btnSendResetEmail = By.xpath("//span[contains(text(),'Send reset email')]");    private static final By lblPageHeader = By.cssSelector("div[class='ng-star-inserted']>h1");    private static final By lblPageHeaderDetail = By.cssSelector("div[class='instruction ng-star-inserted']");    private static final By lblErrorMessageHeader = By.cssSelector("div[class='content']>div:nth-child(1)>div");    private static final By lblErrorMessageDetail = By.cssSelector("div[class='body']");    private static final By liWexHomePageTitle = By.cssSelector("div[id='wex-logo-text']");    private static final By liEyeIconOfPassWordField = By.cssSelector("fa-icon[class='ng-fa-icon ng-star-inserted']>svg");    private static final By lblPasswordExpireMessageHeader = By.cssSelector("div[class='message-header']");    private static final By lblPasswordExpireMessageDetail = By.cssSelector("div[class='message-detail']");    private static final By newPasswordSpecificationRadioButton = By.cssSelector("div[class='mat-radio-container']");    private static final By newPasswordSpecificationText = By.className("mat-radio-label-content");    private static final By txtNewPassword = By.cssSelector("mav-input[name='newPassword']>input");    private static final By txtConfirmNewPassword = By.cssSelector("mav-input[name='confirmPassword']>input");    private static final By btnSubmit = By.cssSelector("mav-button[id='submit-button']>button");    private static final By liReturnToLogin = By.linkText("Return to log in");    private static final By lblLoginHeader = By.cssSelector("div[id='content-wrapper']>h1");    private static final By lblWexLogo = By.cssSelector("div[id='wex-logo-text']");    /*    Method to validate the text present in application     */    public void verifyPresenceOfText(Scenario logger, String text){        By locator = By.xpath("//*[contains(text(),'"+text+"')]");        basePage.whetherElementPresent(logger,locator,5);    }    /*    Method to get text of Wex Logo     */    public String getWexLogoText(Scenario logger){        return basePage.userGetTextFromWebElement(logger,lblWexLogo);    }    /*    Method to enter username     */    public void enterUserName(Scenario logger, String userName) {        basePage.userTypeIntoTextField(logger, txtUserName, userName);    }    /*    Method to enter password     */    public void enterPassWord(Scenario logger, String passWord) {        basePage.userTypeIntoTextField(logger, txtPassWord, passWord);    }    /*    Method to validate the eye icon status     */    public void validateStatusOfEyeIcon(Scenario logger) {        basePage.userClick(logger, liEyeIconOfPassWordField);    }    /*    Method to click on login button     */    public void clickLogin(Scenario logger) {        basePage.userClick(logger, btnLogin);        String currentDateAndTime = basePage.getCurrentUTCDateAndTime(logger, "yyyy-MM-dd");        PropUtils.setProps("Logged_In_Time", currentDateAndTime, baseUtils.inputDataFilePath);    }    /*    Method to verify user logged in time stored in database is correct or not     */    public void verifyUserLoggedInTime(Scenario logger, String logonID) {        commonUtils.initializeDBEnvironment();        Map<String, String> userDetailsRow = commonUtils.getUserDetailsFromDB(logonID);        String loggedInDateTime[] = userDetailsRow.get("LAST_LOGGEDON_AT").split(" ");        String actLoggedDate = loggedInDateTime[0];        String expLoggedInDateTime = PropUtils.getPropValue(baseUtils.inputProp, "Logged_In_Time");        basePage.assertTwoStrings(logger, expLoggedInDateTime, actLoggedDate);    }    /*    Method to verify login button status     */    public void verifyLoginButtonStatus(Scenario logger) {        Boolean loginButtonStatus = false;        String enteredUserName = basePage.userGetTextUsingGetAttribute(logger, txtUserName);        String enteredPassWord = basePage.userGetTextUsingGetAttribute(logger, txtPassWord);        if ((enteredUserName.length() >= 3) && (enteredPassWord.length() >= 3)) {            loginButtonStatus = basePage.checkIsEnabledOrDisabled(logger, btnLogin);        } else {            loginButtonStatus = basePage.checkIsEnabledOrDisabled(logger, btnLogin);        }        if (loginButtonStatus) {            logger.log("Login button is enabled because the username and password are entered 3 characters or more than 3 characters ");            logger.log("Entered username is : " + enteredUserName);            logger.log("Entered password is : " + enteredPassWord);        } else {            logger.log("Login button is disable because the username and password are entered below 3 characters");            logger.log("Entered username is : " + enteredUserName);            logger.log("Entered password is : " + enteredPassWord);        }    }    /*    Method to verify Send Reset Email button status     */    public void verifySendResetEmailButtonStatus(Scenario logger) {        Boolean sendResetEmailButtonStatus = false;        String enteredUserName = basePage.userGetTextUsingGetAttribute(logger, txtUserName);        if ((enteredUserName.length() >= 3)) {            sendResetEmailButtonStatus = basePage.checkIsEnabledOrDisabled(logger, btnSendResetEmail);        } else {            sendResetEmailButtonStatus = basePage.checkIsEnabledOrDisabled(logger, btnSendResetEmail);        }        if (sendResetEmailButtonStatus) {            logger.log("Send Reset Email button is enabled because the username and password are entered 3 characters or more than 3 characters ");            logger.log("Entered username is : " + enteredUserName);        } else {            logger.log("Send Reset Email button is disable because the username and password are entered below 3 characters");            logger.log("Entered username is : " + enteredUserName);        }    }    /*    Method to click on Forgot password link     */    public void clickForgotPassWordLink(Scenario logger) {        basePage.userClick(logger, liForgotPassword);    }    /*    Method to click SendResetEmail button     */    public void clickSendResetEmailButton(Scenario logger) {        basePage.userClickJSExecutor(logger, btnSendResetEmail);        String currentDateAndTime = basePage.getCurrentDateAndTime("MM-dd-yyyy");        PropUtils.setProps("Password_Reset_Email_Generated_Time", currentDateAndTime, baseUtils.inputDataFilePath);    }    public void verifyErrorMessageInvalidPassword(Scenario logger, String msgHeader, String msgDetail) {        String actMsgHeader = basePage.userGetTextFromWebElement(logger, lblErrorMessageHeader);        String actMsgDetail = basePage.userGetTextFromWebElement(logger, lblErrorMessageDetail);        basePage.assertTwoStrings(logger, msgHeader, actMsgHeader);        basePage.assertTwoStrings(logger, msgDetail, actMsgDetail);    }    public void verifyErrorPageHeaderAndMessageHeader(Scenario logger, String pageHeader, String msgHeader) {        String actPageHeader = basePage.userGetTextFromWebElement(logger, lblPageHeader);        String actMsgHeader = basePage.userGetTextFromWebElement(logger, lblErrorMessageHeader);        basePage.assertTwoStrings(logger, pageHeader, actPageHeader);        basePage.assertTwoStrings(logger, msgHeader, actMsgHeader);    }    /*    Method to verify presence of home page title     */    public void verifyUserHomePageTitlePresence(Scenario logger) {        Boolean presenceOfHomePageTitle = false;        presenceOfHomePageTitle = basePage.checkIsEnabledOrDisabled(logger, liWexHomePageTitle);        if (presenceOfHomePageTitle) {            logger.log("User successfully navigated to home page");        } else {            logger.log("User Failed to navigate home page");            Assert.fail("User Failed to navigate home page - Home page title is not displayed");            throw new AssertionError();        }    }    /*    Method to verify page title     */    public void verifyPageHeader(Scenario logger, String expHeader) {        String actHeader = basePage.userGetTextFromWebElement(logger, lblPageHeader);        basePage.assertTwoStrings(logger, expHeader, actHeader);    }    /*    Method to verify page header in detail     */    public void verifyPageHeaderInDetail(Scenario logger, String expHeaderDetail) {        String actHeader = basePage.userGetTextFromWebElement(logger, lblPageHeaderDetail);        basePage.assertTwoStrings(logger, expHeaderDetail, actHeader);    }    /*    Method to set the password expire date     */    public void setPasswordExpireDate(Scenario logger, String noOfExpiry, String userName) {        commonUtils.initializeDBEnvironment();        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        Map<String, String> userDetails = commonUtils.getUserDetailsFromDB(userName);        String passwordCreatedDateTime[] = userDetails.get("PASSWORD_CREATED_AT").split(" ");        String passwordCreatedDate = passwordCreatedDateTime[0];        String currentDate = basePage.getCurrentUTCDateAndTime(logger, "yyyy-MM-dd");        String query = "select ar.PASSWORD_EXPIRY_DAYS from access_roles ar \n" +                "left join access_role_clients arc on arc.access_role_oid = ar.access_role_oid\n" +                "left join user_roles ur on ur.access_role_oid = ar.access_role_oid\n" +                "left join users u on u.user_oid = ur.user_oid\n" +                "where u.logon_id = '"+userName+"' and arc.client_mid = "+PropUtils.getPropValue(properties,"ClientMID");        commonUtils.setPasswordExpiryDate(commonUtils.getQueryResultsOnMap(query).get("PASSWORD_EXPIRY_DAYS"),userName);//        if (basePage.differnceOfTwoDates(logger, passwordCreatedDate, currentDate, "yyyy-MM-dd") <= 90) {//            commonUtils.setPasswordExpiryDate(noOfExpiry, userName);//        }    }    /*    Method to validate password expire message header and detail     */    public void validatePasswordExpireMessageHeaderAndDetail(Scenario logger, String messageHeader, String messageDetail) {        String actMessageHeader = basePage.userGetTextFromWebElement(logger, lblErrorMessageHeader);        String actMessageDetail = basePage.userGetTextFromWebElement(logger, lblErrorMessageDetail);        basePage.assertTwoStrings(logger, messageHeader, actMessageHeader);        basePage.assertTwoStrings(logger, messageDetail, actMessageDetail);    }    /*    Method to validate message header     */    public void validateMessageHeader(Scenario logger, String messageHeader){        String actMessageHeader = basePage.userGetTextFromWebElement(logger, lblErrorMessageHeader);        basePage.assertTwoStrings(logger, messageHeader, actMessageHeader);    }    /*    Method to validate new password specifications     */    public void validateNewPasswordSpecifications(Scenario logger, Boolean radioButtonStatus, String[] specifications) {        List<WebElement> radioButtons = basePage.getListOfElements(logger, newPasswordSpecificationRadioButton);        List<WebElement> specificationText = basePage.getListOfElements(logger, newPasswordSpecificationText);        for (int i = 0; i <= specifications.length - 1; i++) {            System.out.println(specificationText.get(i).getText());            System.out.println(specifications[i]);            if (specifications[i].equalsIgnoreCase(specificationText.get(i).getText())) {                logger.log("'" + specificationText.get(i).getText() + "'" + " specification is displayed");                try {                    Assert.assertEquals(radioButtonStatus, radioButtons.get(i).isSelected());                    logger.log("Radio button is " + radioButtonStatus + " for " + specificationText.get(i).getText());                } catch (AssertionError e) {                    //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);                    throw new AssertionError();                }            } else {                logger.log("Expected specification " + specifications[i] + " is not same as actual specification " + specificationText.get(i).getText());                basePage.assertTwoStrings(logger, specifications[i], specificationText.get(i).getText());            }        }    }    /*    Method to validate New password satisfied all the mentioned specifications or not     */    public void validateNewPassword(Scenario logger, String password, String[] specifications, Boolean radioButtonStatus) {        if (password.length() >= 8) {            basePage.userTypeIntoTextField(logger, txtNewPassword, password);            Pattern upperCaseLetter = Pattern.compile("[A-z]");            Pattern lowerCaseLetter = Pattern.compile("[a-z]");            Pattern digit = Pattern.compile("[0-9]");            Pattern special = Pattern.compile("[!@#$%&*()_+=|<>?{}\\[\\]~-]");            Matcher hasUpperCaseLetter = upperCaseLetter.matcher(password);            Matcher hasLowerCaseLetter = lowerCaseLetter.matcher(password);            Matcher hasDigit = digit.matcher(password);            Matcher hasSpecial = special.matcher(password);            List<WebElement> radioButtons = basePage.getListOfElements(logger, newPasswordSpecificationRadioButton);            for (int i = 0; i <= specifications.length - 1; i++) {                if (specifications[i].equalsIgnoreCase("8 or more characters") && radioButtons.get(i).isSelected()) {                    logger.log("New Password satisfies the specification '8 or more characters'");                } else if (specifications[i].equalsIgnoreCase("One uppercase") && hasUpperCaseLetter.find() && (radioButtons.get(i).isSelected() == radioButtonStatus)) {                    logger.log("New Password satisfies the specification 'One uppercase' and corresponding radio button is selected");                } else if (specifications[i].equalsIgnoreCase("One lowercase") && hasLowerCaseLetter.find()) {                    logger.log("New Password satisfies the specification 'One lowercase' and corresponding radio button is selected");                } else if (specifications[i].equalsIgnoreCase("One number") && hasDigit.find()) {                    logger.log("New Password satisfies the specification 'One number' and corresponding radio button is selected");                } else if (specifications[i].equalsIgnoreCase("One special character") && hasSpecial.find()) {                    logger.log("New Password satisfies the specification 'One special character' and corresponding radio button is selected");                }            }        } else {            logger.log("The entered password does not contain 8 or more characters");        }    }    /*    Method to enter Confirm new password     */    public void enterConfirmNewPassword(Scenario logger, String confirmNewPassword) {        basePage.userTypeIntoTextField(logger, txtConfirmNewPassword, confirmNewPassword);    }    /*    Method to validate Submit button enabled if newPassword and confirmNewPassword are same then click on it     */    public void validateAndClickSubmitButton(Scenario logger) {        try {            Assert.assertEquals(basePage.userGetTextFromWebElement(logger, txtNewPassword), basePage.userGetTextFromWebElement(logger, txtConfirmNewPassword));            if (basePage.checkIsEnabledOrDisabled(logger, btnSubmit)) {                basePage.userClick(logger, btnSubmit);            } else {                logger.log("Submit button is not enabled");            }        } catch (AssertionError e) {            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);            throw new AssertionError();        }    }    /*    Method to verify new password has been updated in database for corresponding field     */    public void verifyNewPasswordUpdatedInDB(Scenario logger, String newPassword, String logonID) {        commonUtils.initializeDBEnvironment();        Map<String, String> userDetails = commonUtils.getUserDetailsFromDB(logonID);        basePage.assertTwoStrings(logger, basePage.encryptPasswordSHA1(logger, newPassword), userDetails.get("PASSWORD"));//        PropUtils.setProps(basePage.uiInputProp,"PassWord",PropUtils.getPropValue(basePage.uiInputProp,newPassword),basePage.uiInputDataFile);    }    /*    Method to get message header value from Web application     */    public String getMessageHeader(Scenario logger) {        return basePage.userGetTextFromWebElement(logger, lblErrorMessageDetail);    }    /*    Method to get message Header element     */    public By getMessageHeaderElement() {        return lblErrorMessageHeader;    }    /*    Method to get failed logon count     */    public int getFailedLogOnCount(String logonID) {        commonUtils.initializeDBEnvironment();        Map<String, String> userDetails = commonUtils.getUserDetailsFromDB(logonID);        int failedLogonCount = Integer.parseInt(userDetails.get("FAILED_LOGON_COUNT"));        return failedLogonCount;    }    /*    Method to click Return to login link     */    public void clickReturnToLogin(Scenario logger) {        basePage.userClick(logger, liReturnToLogin);    }    /*    Method to validate login page header     */    public void validateLoginPageHeader(Scenario logger, String expectedHeader) {        String actHeader = basePage.userGetTextFromWebElement(logger, lblLoginHeader);        basePage.assertTwoStrings(logger, expectedHeader, actHeader);    }    /*    Method to unlock account if it is locked     */    public int unlockAccountIfItIsLocked(String userName) {        commonUtils.updateLogonStatusCID(PropUtils.getPropValue(baseUtils.inputProp, userName), 2501);        int failedLogonCount = getFailedLogOnCount(PropUtils.getPropValue(baseUtils.inputProp, userName));        return failedLogonCount;    }    /*    Method to validate entered password matched last used 6 passwords or not     */    public Boolean verifyPasswordMatchesOld6Passwords(Scenario logger) {        Boolean matches = false;        String passwordNeedChange = PropUtils.getPropValue(baseUtils.inputProp, "New_PassWord");        String oldPassword = PropUtils.getPropValue(baseUtils.inputProp, "Old_Passwords");        if (oldPassword.contains(",")) {            String[] oldPasswords = oldPassword.split(",");            for (String pwd : oldPasswords) {                if (passwordNeedChange.equals(pwd)) {                    matches = true;                    break;                }            }            /*if (oldPasswords.length <= 6) {                oldPassword = oldPassword + "," + passwordNeedChange;                PropUtils.setProps("Old_Passwords", oldPassword, baseUtils.inputDataFilePath);            }*/        } else if (passwordNeedChange.equals(oldPassword)) {            matches = true;        }        return matches;    }    /*    Method to get one password from old password field     */    public String getSpecificPasswordFromOldUsedPwds(int noOfOldPassword){        String requiredPwd = "";        Properties inputProperties = PropUtils.getProps(baseUtils.inputDataFile);        String oldPassword = PropUtils.getPropValue(inputProperties, "Old_Passwords");        String[] oldPasswords = oldPassword.split(",");        requiredPwd = oldPasswords[noOfOldPassword];        return requiredPwd;    }    /*   Method to enter new password in New Password field    */    public void enterNewPassword(Scenario logger, String newPassword){        basePage.userTypeIntoTextField(logger, txtNewPassword,newPassword);    }    /*    Method to update the new password to current password and old passwords fields in property file     */    public void updateTheNewPasswordInPropertyFile(Boolean isMatched, String newPassword){        if(isMatched){//                throw new CustomException("The new password matches with last 6 passwords user have used");        }else {            Properties inputProperties = PropUtils.getProps(baseUtils.inputDataFile);            String oldPasswords = PropUtils.getPropValue(inputProperties, "Old_Passwords");            if (oldPasswords.isEmpty()){                oldPasswords = newPassword;            } else if(oldPasswords.contains(",")){                String[] oldPwds = oldPasswords.split(",");                if(oldPwds.length==6) {                    oldPasswords = oldPasswords.substring(oldPasswords.indexOf(",")+1);                    // converting String to StringBuilder                    StringBuilder builder = new StringBuilder(oldPasswords); // removing first character                    builder.deleteCharAt(0);                }                oldPasswords = oldPasswords + "," + newPassword;            } else{                oldPasswords = oldPasswords + "," +newPassword;            }            PropUtils.setProps("Old_Passwords", oldPasswords, baseUtils.inputDataFilePath);        }        PropUtils.setProps("ChangePassWord", newPassword, baseUtils.inputDataFilePath);    }    /*    Method to change the password     */    public void changeThePassWord(){        commonUtils.updateLogonStatusCID(PropUtils.getPropValue(baseUtils.inputProp, "ChangeUserName"), 2501);        commonUtils.updateCurrentPasswordToNull(PropUtils.getPropValue(baseUtils.inputProp, "ChangeUserName"));        PropUtils.setProps("New_PassWord", "null", baseUtils.inputDataFilePath);        //Changing the password created date if it is about expire or expired        commonUtils.setPasswordExpiryDate("90", PropUtils.getPropValue(baseUtils.inputProp, "ChangeUserName"));        enterUserName(logger, PropUtils.getPropValue(baseUtils.inputProp, "ChangeUserName"));        enterPassWord(logger, "null");        clickLogin(logger);        PropUtils.setProps("New_PassWord", PasswordGenerator.generateRandomPassword(logger, 10), baseUtils.inputDataFilePath);        Properties inputProp = PropUtils.getProps(baseUtils.inputDataFile);        enterNewPassword(logger, PropUtils.getPropValue(inputProp, "New_PassWord"));        enterConfirmNewPassword(logger, PropUtils.getPropValue(inputProp, "New_PassWord"));        String newPassword = PropUtils.getPropValue(inputProp, "New_PassWord");        Boolean isMatched = verifyPasswordMatchesOld6Passwords(logger);        validateAndClickSubmitButton(logger);        updateTheNewPasswordInPropertyFile(isMatched, newPassword);    }}