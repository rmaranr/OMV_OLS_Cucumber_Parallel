package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.testng.Assert;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import java.util.*;public class ReportSetupPage {    private WebDriver driver;    private BasePage basePage;    private CommonDBUtils commonDBUtils;    private BaseUtils baseUtils;    private CommonPage commonPage;    private CostCentresPage costCentresPage;    private UsersPage usersPage;    Map<String, String> queryResultsOfVelocityAssignments = null;    private Map<String, String> queryResults = null;    public Scenario logger;    public ReportSetupPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonDBUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);        costCentresPage = new CostCentresPage(driver);        usersPage = new UsersPage(driver);    }    //Locators    private static final By threeDots = By.xpath("//div/button/div/mav-svg-icon/fa-icon");    private static final By reportDetails = By.xpath("//span/div/div/mat-grid-list/div/mat-grid-tile/figure/div/div");    private static final By expendedReportDetails = By.xpath("//div[@class='panel-expanded-field-text']");    private static final By actions = By.xpath("//div[@class ='mat-menu-content']/div/button");    private static final By editReportSetupDetails = By.xpath("//div/div[1]/span/span");    public String customerAssociatedReportsFromDB(Scenario logger, String customerNo) {        String count = null;        try {            String query = "select count(report_assignment_oid) from report_assignments where \n" +                    "member_oid =(Select customer_mid from m_customers where customer_no ='" + customerNo + "')";            queryResults = commonDBUtils.getQueryResultsOnMap(query);            count = queryResults.get("COUNT(REPORT_ASSIGNMENT_OID)");        } catch (Exception e) {            logger.log("unable to get the value from DB");        }        return count;    }    public String customerAssociatedReportsFromUI(Scenario logger) {        String countFromUI = null;        try {            List<WebElement> elements = driver.findElements(threeDots);            int count = elements.size();            countFromUI = Integer.toString(count);            logger.log("No of reports from UI" + countFromUI);        } catch (Exception e) {            logger.log("Unable to get the reports count from UI ");        }        return countFromUI;    }    public void getReportSetupDetailsFromDB(Scenario logger, String customerNo) {        try {            String query = "select ra.description as Report_Type,f.description as Frequency ,c.description as Delivery_Type,ra.created_on,\n" +                    "ra.last_reported_on,ra.previous_reported_on,c1.description as Sort_Option,c2.description as Recipient from report_assignments ra\n" +                    "left join frequencies f on ra.frequency_oid = f.frequency_oid\n" +                    "left join report_types rt on ra.report_type_oid = rt.report_type_oid\n" +                    "left join report_sort_options rso on ra.report_sort_option_oid = rso.report_sort_option_oid\n" +                    "left join constants c2 on c2.constant_oid = ra.contact_hierarchy_cid\n" +                    "left join constants c1 on c1.constant_oid = rso.sort_option_cid\n" +                    "left join constants c on ra.delivery_type_cid = c.constant_oid where \n" +                    "ra.member_oid =(Select customer_mid from m_customers where customer_no ='" + customerNo + "')";            queryResults = commonDBUtils.getQueryResultsOnMap(query);            String reportType = queryResults.get("REPORT_TYPE");            String frequency = queryResults.get("FREQUENCY");            String deliveryType = queryResults.get("DELIVERY_TYPE");            String createdOn = queryResults.get("CREATED_ON");            String lastReportOn = queryResults.get("LAST_REPORTED_ON");            String previousReportedOn = queryResults.get("PREVIOUS_REPORTED_ON");            String sortOption = queryResults.get("SORT_OPTION");            String recipient = queryResults.get("RECIPIENT");            String getDesiredCreatedOn = " ", getDesiredLastReportOn = " ", getDesiredPreviousReportedOn = " ";            logger.log("creared on date " + createdOn);            logger.log("last report on "+lastReportOn);            logger.log("previous report on "+previousReportedOn);            if (createdOn != null) {                String yearLastReport = createdOn.substring(0, 4);                String monthLastReport = createdOn.substring(5, 7);                String dayLastReport = createdOn.substring(8, 10);                getDesiredCreatedOn = dayLastReport + "/" + monthLastReport + "/" + yearLastReport;            }            if (lastReportOn != null) {                String year = lastReportOn.substring(0, 4);                String month = lastReportOn.substring(5, 7);                String day = lastReportOn.substring(8, 10);                getDesiredLastReportOn = day + "/" + month + "/" + year;                logger.log("last report on " + getDesiredLastReportOn);            }            if (previousReportedOn != null) {                String year = previousReportedOn.substring(0, 4);                String month = previousReportedOn.substring(5, 7);                String day = previousReportedOn.substring(8, 10);                getDesiredPreviousReportedOn = day + "/" + month + "/" + year;                logger.log("previous report  on " + getDesiredPreviousReportedOn);            }            logger.log("Details on Report setup page report type::" + reportType +                    "createdOn:::" + getDesiredCreatedOn +                    "lastReportOn::" + getDesiredLastReportOn +                    "previousReportedOn:::" + getDesiredPreviousReportedOn);            PropUtils.setProps("ReportTypeDB", reportType, baseUtils.testDataFilePath);            PropUtils.setProps("FrequencyDB", frequency, baseUtils.testDataFilePath);            PropUtils.setProps("DeliveryTypeDB", deliveryType, baseUtils.testDataFilePath);            PropUtils.setProps("SortOptionDB", sortOption, baseUtils.testDataFilePath);            PropUtils.setProps("CreatedOnDB", getDesiredCreatedOn, baseUtils.testDataFilePath);            PropUtils.setProps("LastReportOnDB", getDesiredLastReportOn, baseUtils.testDataFilePath);            PropUtils.setProps("PreviousReportedOnDB", getDesiredPreviousReportedOn, baseUtils.testDataFilePath);            PropUtils.setProps("RecipientDB", recipient, baseUtils.testDataFilePath);        } catch (Exception e) {            System.out.println("entered into catch");            e.printStackTrace();            logger.log("unable to get the value from DB");        }    }    public void getFieldValuesBasedOnReportType(Scenario logger, String reportType) {        List<Map<String, String>> queryResults = new ArrayList<>();        try {            String query = "select distinct c.description as Delivery_Type from report_delivery_types rdt\n" +                    "left join constants c on rdt.delivery_type_cid = c.constant_oid\n" +                    "left join report_types rt on rt.report_type_oid = rdt.report_type_oid\n" +                    "where rt.description = '" + reportType + "'";            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            logger.log("Details on Report setup page delivery type::" + queryResults.get(0).get("DELIVERY_TYPE"));            PropUtils.setProps("DeliveryTypeForReportSetup", commonPage.getSpecificValueFromMapObject(queryResults.get(0), "DELIVERY_TYPE"), baseUtils.testDataFilePath);            PropUtils.setProps("CountOFDeliveryTypeForReportSetup", String.valueOf(queryResults.size()), baseUtils.testDataFilePath);            query = "select distinct f.description as Frequency from REPORT_FREQUENCIES rf\n" +                    "left join frequencies f on f.frequency_oid = rf.frequency_oid\n" +                    "left join report_types rt on rt.report_type_oid = rf.report_type_oid\n" +                    "where rt.description = '" + reportType + "'";            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            if(queryResults.size()>0){                logger.log("Details on Report setup frequency::" + queryResults.get(0).get("FREQUENCY"));                PropUtils.setProps("FrequencyForReportSetup", commonPage.getSpecificValueFromMapObject(queryResults.get(0), "FREQUENCY"), baseUtils.testDataFilePath);                PropUtils.setProps("CountOFFrequencyForReportSetup", String.valueOf(queryResults.size()), baseUtils.testDataFilePath);            }else{                logger.log("Frequency are not available");                PropUtils.setProps("FrequencyForReportSetup", "", baseUtils.testDataFilePath);                PropUtils.setProps("CountOFFrequencyForReportSetup", "0", baseUtils.testDataFilePath);            }            query = "select description as recipient from constants where constant_type_oid = 105";            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            logger.log("Details on Report setup page recipient type::" + queryResults.get(0).get("RECIPIENT"));            PropUtils.setProps("RecipientForReportSetup", commonPage.getSpecificValueFromMapObject(queryResults.get(0), "RECIPIENT"), baseUtils.testDataFilePath);            PropUtils.setProps("RecipientForReportSetup1", commonPage.getSpecificValueFromMapObject(queryResults.get(1), "RECIPIENT"), baseUtils.testDataFilePath);            PropUtils.setProps("CountOFRecipientForReportSetup", String.valueOf(queryResults.size()),  baseUtils.testDataFilePath);            query = "select distinct c.description as Sort_options from report_sort_options rsp\n" +                    "left join constants c on rsp.sort_option_cid = c.constant_oid\n" +                    "left join report_types rt on rt.report_type_oid = rsp.report_type_oid\n" +                    "where rt.description = '" + reportType + "'";            logger.log("Query" + query);            queryResults = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);            if(queryResults.size()>0){                logger.log("Details on Report setup page sort option::" + queryResults.get(0).get("SORT_OPTIONS"));                PropUtils.setProps("SortOptionForReportSetup", commonPage.getSpecificValueFromMapObject(queryResults.get(0), "SORT_OPTIONS"), baseUtils.testDataFilePath);                PropUtils.setProps("CountOFSortOptionForReportSetup", String.valueOf(queryResults.size()), baseUtils.testDataFilePath);            }else{                logger.log("Sort options are not available");                PropUtils.setProps("SortOptionForReportSetup", "", baseUtils.testDataFilePath);                PropUtils.setProps("CountOFSortOptionForReportSetup", "0", baseUtils.testDataFilePath);            }        } catch (Exception e) {            e.printStackTrace();            logger.log("unable to get the value from DB");        }    }    public void validatereportSetupDetails(Scenario logger) {        try {            commonPage.sleepForFewSeconds(8);            List<WebElement> elements = driver.findElements(reportDetails);            commonPage.sleepForFewSeconds(8);            logger.log("Element side ::" + elements.size());            if (elements.size() != 0) {                String reportType = elements.get(0).getText();                String deliveryType = elements.get(1).getText();                String frequency = elements.get(2).getText();                String status = elements.get(3).getText();                logger.log("elements found in the report setup page");                Properties properties = PropUtils.getProps(baseUtils.testDataFile);                String reportTypeDB = PropUtils.getPropValue(properties, "ReportTypeDB");                String deliveryTypeDB = PropUtils.getPropValue(properties, "DeliveryTypeDB");                String frequencyDB = PropUtils.getPropValue(properties, "FrequencyDB");                String createdOnDB = PropUtils.getPropValue(properties, "CreatedOnDB");                String lastReportedOnDB = PropUtils.getPropValue(properties, "LastReportOnDB");                String previousDB = PropUtils.getPropValue(properties, "PreviousReportedOnDB");                commonPage.assertTwoStrings(logger, reportType, reportTypeDB, "report type");                commonPage.assertTwoStrings(logger, frequency, frequencyDB, "frequency");                commonPage.assertTwoStrings(logger, deliveryType, deliveryTypeDB, "delivery type");            }        } catch (Exception e) {            logger.log("Report details are not found");        }    }    public void expandReportSetup(Scenario logger) {        try {            Properties properties = PropUtils.getProps(baseUtils.testDataFile);            String reportTypeDB = PropUtils.getPropValue(properties, "ReportTypeDB");            By element = By.xpath("//div[contains(text(),'" + reportTypeDB + "')]");            basePage.userClick(logger, element);            logger.log("clicked on report setup");        } catch (Exception e) {            logger.log("not clicked on report setup");        }    }    public void validateReportSetupDetailsFromExpandedUI(Scenario logger) {        try {            commonPage.sleepForFewSeconds(8);            List<WebElement> elements = driver.findElements(expendedReportDetails);            commonPage.sleepForFewSeconds(8);            logger.log("Element side ::" + elements.size());            if (elements.size() != 0) {                String frequency = elements.get(0).getText();                String deliveryType = elements.get(1).getText();                String createdOn = elements.get(2).getText();                String lastReportedOn = elements.get(3).getText();                String previousReportedOn = elements.get(4).getText();                logger.log("elements found in the report setup page");                Properties properties = PropUtils.getProps(baseUtils.testDataFile);                String reportTypeDB = PropUtils.getPropValue(properties, "ReportTypeDB");                String deliveryTypeDB = PropUtils.getPropValue(properties, "DeliveryTypeDB");                String frequencyDB = PropUtils.getPropValue(properties, "FrequencyDB");                String createdOnDB = PropUtils.getPropValue(properties, "CreatedOnDB");                String lastReportedOnDB = PropUtils.getPropValue(properties, "LastReportOnDB");                String previousDB = PropUtils.getPropValue(properties, "PreviousReportedOnDB");                commonPage.assertTwoStrings(logger, frequency, frequencyDB, "frequency");                commonPage.assertTwoStrings(logger, deliveryType, deliveryTypeDB, "delivery type");                commonPage.assertTwoStrings(logger, createdOn, createdOnDB, "created on");                commonPage.assertTwoStrings(logger, lastReportedOn, lastReportedOnDB, "last reported on");                commonPage.assertTwoStrings(logger, previousReportedOn, previousDB, "previous reported on");            }        } catch (Exception e) {            logger.log("elements not found in the report setup page");        }    }    public void verifyReportSetupActions(Scenario logger) {        String edit = null, approve = null, decline = null;        try {            List<WebElement> elements = driver.findElements(actions);            if (elements.size() != 0) {                logger.log("Elements found in actions dropdown");                edit = elements.get(0).getText();                approve = elements.get(1).getText();                decline = elements.get(2).getText();                commonPage.assertTwoStrings(logger,"Edit",edit,"Edit action");                commonPage.assertTwoStrings(logger,"Approve",approve,"Approve action");                commonPage.assertTwoStrings(logger,"Declined",decline,"Declined action");            }        } catch (Exception e) {            logger.log("unable to get the report setup actions");        }    }    public String clickOnThreeDotsOfFirstReportSetup(Scenario logger) {        String countFromUI = null;        try {            List<WebElement> elements = driver.findElements(threeDots);            int count = elements.size();            logger.log("No of reports from UI" + count);            elements.get(0).click();            commonPage.sleepForFewSeconds(8);        } catch (Exception e) {            logger.log("Unable to get the reports count from UI ");        }        return countFromUI;    }    public void getAccountNumberForReportSetup(Scenario logger, String accountType, String userType, String accountStatus) {        String query = null, accountNo = "";        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        List<Map<String, String>> queryResults = commonPage.getAccountNumberBasedOnStatusAndUserType(logger, accountStatus, userType);        try {            if (accountType.equalsIgnoreCase("not having")) {                StringBuilder customerNo = new StringBuilder();                List<Map<String, String>> reportType = new ArrayList<>();                query = "select count(*)\n" +                        "from REPORT_TYPE_TEMPLATE_VIEW where IS_ADHOC='N' and IS_SUB_REPORT = 'N' and client_mid="+PropUtils.getPropValue(properties,"ClientMID")+" and \n" +                        "MEMBER_TYPE_CID=103";                Map <String,String> countOfReports =commonDBUtils.getQueryResultsOnMap(query);                int reportCount = Integer.parseInt(countOfReports.get("COUNT(*)"));                for (int i = 0; i <= queryResults.size() - 1; i++) {                    customerNo.delete(0, customerNo.length());                    customerNo.append(queryResults.get(i).get("CUSTOMER_NO"));                    query = "select rt.description as reportType from m_customers mcust\n" +                            "inner join report_assignments ra on ra.member_oid = mcust.customer_mid\n" +                            "inner join report_types rt on rt.report_type_oid = ra.report_type_oid\n"+                            "where mcust.customer_no = '" + customerNo.toString() + "'";                    reportType = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);                    int reportSize = reportType.size();                    if(reportType.size()==1){                        if(reportType.get(0).get("REPORTTYPE")==null){                            reportSize = 0;                        }                    }                    if(reportSize< reportCount) {                        if (reportSize>0) {                            query = "select description as reportType\n" +                                    "from REPORT_TYPE_TEMPLATE_VIEW where IS_ADHOC='N' and IS_SUB_REPORT = 'N' and client_mid="+PropUtils.getPropValue(properties,"ClientMID")+" and \n" +                                    "MEMBER_TYPE_CID=103 and description not in (select rt.description as reportType from m_customers mcust\n" +                                    "left join report_assignments ra on ra.member_oid = mcust.customer_mid\n" +                                    "inner join report_types rt on rt.report_type_oid = ra.report_type_oid\n"+                                    "where mcust.customer_no = '" + customerNo.toString() + "')";                            logger.log("Query" + query);                        }else{                            query = "select description as reportType\n" +                                    "from REPORT_TYPE_TEMPLATE_VIEW where IS_ADHOC='N' and IS_SUB_REPORT = 'N' and client_mid="+PropUtils.getPropValue(properties,"ClientMID")+" and \n" +                                    "MEMBER_TYPE_CID=103";                        }                        reportType = commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);                        if (reportType.size() > 0) {                            PropUtils.setProps("ReportTypeNotInUse", reportType.get(0).get("REPORTTYPE"), baseUtils.testDataFilePath);                            accountNo = customerNo.toString();                            break;                        }                    }                }            } else if (accountType.equalsIgnoreCase("having")) {                List <Map <String, String>> customerOfReportAssignments = commonDBUtils.getAllRowsOfQueryResultsOnListMap("select member_oid from report_assignments");                outerloop:                for (int i = 0; i <= queryResults.size() - 1; i++) {                    for(int j=0; j<=customerOfReportAssignments.size()-1; j++){                        if(queryResults.get(i).get("CUSTOMER_MID").equalsIgnoreCase(customerOfReportAssignments.get(j).get("MEMBER_OID"))){                            accountNo =   queryResults.get(i).get("CUSTOMER_NO");                            break outerloop;                        }                    }                }            }            logger.log("Details on Report setup page delivery type::" + accountNo);            PropUtils.setProps(accountType + "ReportSetup", accountNo, baseUtils.testDataFilePath);        } catch (Exception e) {            logger.log("unable to get the value from DB");        }    }    public void validateEditReportSetupDetailsAndUpdate(Scenario logger) {    List<WebElement> elements = driver.findElements(editReportSetupDetails);        logger.log("Element side ::" + elements.size());        try {            commonPage.sleepForFewSeconds(8);            commonPage.sleepForFewSeconds(8);            Properties properties = PropUtils.getProps(baseUtils.testDataFile);            if (elements.size() != 0) {                String deliveryTypeUI = elements.get(0).getText();                String frequencyUI = elements.get(1).getText();                String recipientUI = elements.get(2).getText();                String sortByUI = elements.get(3).getText();                logger.log("elements found in the report setup page");                String deliveryTypeDB = PropUtils.getPropValue(properties, "DeliveryTypeDB");                String frequencyDB = PropUtils.getPropValue(properties, "FrequencyDB");                String recipientDB = PropUtils.getPropValue(properties, "RecipientDB");                String sortByDB = PropUtils.getPropValue(properties, "SortOptionDB");                commonPage.assertTwoStrings(logger, deliveryTypeDB, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='deliveryType']>mat-select"),"ng-reflect-model"), "Delivery type");                commonPage.assertTwoStrings(logger, frequencyDB, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='frequency']>mat-select"),"ng-reflect-model"), "Frequency");                commonPage.assertTwoStrings(logger, recipientDB, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='recipient']>mat-select"),"ng-reflect-model"), "Recipient");//                commonPage.assertTwoStrings(logger, sortByDB, sortByUI, "Sort by option");            }        } catch (Exception e) {            logger.log("Report details are not found");        }    }    public void validateBDEntryForReportSetup(Scenario logger, String customerNo, String reportType) {        String query = null;        try {            query = "select description from report_assignments where member_oid = (select customer_mid from M_customers where customer_no ='" + customerNo + "') and description = '"+reportType+"'";            queryResults = commonDBUtils.getQueryResultsOnMap(query);            logger.log("Qyert: "+query);            if (queryResults.size() != 0) {                logger.log("Report Assignment setup entry happened with report type " + queryResults.get("DESCRIPTION"));            } else {                logger.log("Report Assignment setup entry not happened");            }        } catch (Exception e) {            logger.log("Report Assignment setup entry not happened");        }    }}