package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.Random;public class CostCentresPage {    private WebDriver driver;    private BasePage basePage;    CommonDBUtils commonUtils;    private BaseUtils baseUtils;    private CommonPage commonPage;    public Scenario logger;    /* Constructor to get the driver object */    public CostCentresPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);    }    private static final By dropDownSearchBar = By.xpath("(//div[@class='mat-form-field-infix'])[1]");    private static final By txtSearchTextBox = By.cssSelector("div[class='mat-form-field-infix']>span>mav-input>input");    private static final By iconSearch = By.cssSelector("mav-svg-icon[value='fal search']");    private static final By liRecords = By.xpath("(//div[@class='margin-content'])[2]/div/mat-accordion/div");    private static final By msgSearchResultsSection = By.xpath("//div[contains(@class,'copy-text')]");    private static final By iconClearSearch = By.cssSelector("fa-icon[class='ng-fa-icon ng-star-inserted']>svg[data-icon='times']");    private static final By eleOutsideOfUsermoduleFields = By.cssSelector("mav-input[name='account']");    private static final By attributeValue = By.xpath("//div[@class='mat-form-field-infix']//div[@class='mat-select-value']//span[@ng-reflect-ng-switch='false']");    /*        Method to enter a value in corresponding text field         */    public void enterValueInCorrespodingTextFieldCostCentre(Scenario logger, String fieldName, String fieldValue, String formType, String moduleName) {        By fieldLocator = By.cssSelector("div[class='mat-form-field-infix']>input[name='" + fieldName + "']");        if (fieldName.equalsIgnoreCase("description")) {            fieldLocator = By.cssSelector("div[class='mat-form-field-infix']>textarea[ng-reflect-name='description']");        }        if (formType.equalsIgnoreCase("Add")) {            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        } else if (formType.equalsIgnoreCase("Edit")) {            Properties inputProperties = PropUtils.getProps(baseUtils.testDataFile);            basePage.assertTwoStrings(logger, PropUtils.getPropValue(inputProperties, moduleName + "-" + fieldName), getValueFromCorrespondingTextField(logger, fieldName));            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        } else if (formType.equalsIgnoreCase("Edit Contact")) {            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        } else if (formType.equalsIgnoreCase("Edit Address")) {            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        }        logger.log(fieldValue + " has been entered in the corresponding field ");    }    /*        Method to get value from corresponding text field         */    public String getValueFromCorrespondingTextField(Scenario logger, String fieldName) {        By fieldLocator = By.cssSelector("div[class='mat-form-field-infix']>input[name='" + fieldName + "']");        if (fieldName.equalsIgnoreCase("description")) {            fieldLocator = By.cssSelector("div[class='mat-form-field-infix']>textarea[ng-reflect-name='description']");        }        return basePage.userGetTextUsingGetAttribute(logger, fieldLocator);    }    /*    Method to select attribute value in search bar     */    public void selectSearchAttribute(Scenario logger, String attributeName) {        basePage.userClick(logger, dropDownSearchBar);        By fieldLocator = By.xpath("//span[@class='mat-option-text' and contains(text(),'" + attributeName + "')]");        basePage.userClick(logger, fieldLocator);    }    /*    Method to enter search eky words in search text box     */    public void enterSearchKeyWords(Scenario logger, String searchKeywords) {        basePage.userTypeIntoTextField(logger, txtSearchTextBox, searchKeywords);    }    /*    Method to verify search icon is disblaed when we enter below three characters     */    public void verifySearchIconStatusWhenBelowThreeCharactersEntered(Scenario logger, String searchText) {        basePage.userTypeIntoTextField(logger, txtSearchTextBox, searchText);        if (basePage.checkIsEnabledOrDisabled(logger, iconSearch)) {            logger.log("search icon is not disabled when we enter below three characters in search text box");        } else {            logger.log("Search icon is disabled when we enter below three characters in search text box");        }    }    /*    Method to click on search icon     */    public void clickOnSearchIcon(Scenario logger) {        basePage.userClick(logger, iconSearch);    }    /*    Method to click on Cleanr Search icon     */    public void clickOnClearSearchIcon(Scenario logger) {        commonPage.clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger,iconClearSearch));//        basePage.userClick(logger, iconClearSearch,30);    }    /*    Method to get cost centre value     */    public void clickThreeDotIconBasedOnSearchKeywords(Scenario logger, String searchKeywords, String moduleName) {        List<WebElement> listOfRecords = null;        if(moduleName.equalsIgnoreCase("cards") || (moduleName.equalsIgnoreCase("invoices"))){            listOfRecords = basePage.getListOfElements(logger,By.xpath("(//div[@class='margin-content'])[2]/div/div/mat-accordion/div"));        }else if(moduleName.equalsIgnoreCase("reportTemplates")){            listOfRecords = basePage.getListOfElements(logger,By.xpath("(//div[@class='margin-content'])/reports-templates/div[3]/mav-card/mat-card/div/div/div/div"));        }else if(moduleName.equalsIgnoreCase("reports")){            listOfRecords = basePage.getListOfElements(logger,By.xpath("(//div[@class='margin-content'])/reports/div[3]/mav-card/mat-card/div/div/div/div"));        }else{            listOfRecords = basePage.getListOfElements(logger, liRecords);        }        Properties testDataProperties = PropUtils.getProps(baseUtils.testDataFile);        int sizeOfRecords = listOfRecords.size();        By fieldLocator = null;        int count = 0;        String headerValue = "";        int incrementForEachLoop = 0;        if(moduleName.equalsIgnoreCase("invoices")){            incrementForEachLoop = 1;        }else{            incrementForEachLoop = 4;        }        for (int i = 1; i <= sizeOfRecords; i = i + incrementForEachLoop) {            fieldLocator = By.xpath("(//div[@class='panel-header-field header-field-primary'])[" + i + "]");            headerValue = basePage.userGetTextFromWebElement(logger, fieldLocator);            Boolean isHeaderValueEquals = false;            if(moduleName.equalsIgnoreCase("cards")){                isHeaderValueEquals = headerValue.contains(PropUtils.getPropValue(testDataProperties, searchKeywords));            }else{                isHeaderValueEquals = headerValue.equalsIgnoreCase(PropUtils.getPropValue(testDataProperties, searchKeywords));            }            count = count + 1;            if (isHeaderValueEquals) {                basePage.userClick(logger, fieldLocator);                if(!moduleName.equalsIgnoreCase("invoices")) {                    By summaryValuesLocator = By.cssSelector("div[class='mat-expansion-panel-body']>mat-grid-list>div>mat-grid-tile>figure>div>div");                    List<WebElement> summaryValues = basePage.getListOfElements(logger, summaryValuesLocator);                    for (int j = 0; j <= summaryValues.size() - 1; j = j + 2) {                        String field[] = summaryValues.get(j).getText().split(" ");                        String fieldValue = "";                        String value = "";                        for (int k = 0; k <= field.length - 1; k++) {                            if (k == 0) {                                char c[] = field[k].toCharArray();                                c[0] = Character.toLowerCase(c[0]);                                value = new String(c);                            } else {                                char c[] = field[k].toCharArray();                                c[0] = Character.toUpperCase(c[0]);                                value = new String(c);                            }                            fieldValue = fieldValue + value;                        }                        PropUtils.setProps(moduleName + "-" + fieldValue, summaryValues.get(j + 1).getText(), baseUtils.testDataFilePath);                    }                }                if(moduleName.equalsIgnoreCase("cards")) {                    basePage.userClick(logger, By.xpath("(//div[@class='grid-header']/div/button/div/mav-svg-icon)[" + i + "]"));                }else if(moduleName.equalsIgnoreCase("reportTemplates")){                    basePage.userClick(logger, By.xpath("(//div[@class='report-template-grid-header']/div/button/div/mav-svg-icon)[" + i + "]"));                }else if(moduleName.equalsIgnoreCase("reports")){                    basePage.userClick(logger, By.xpath("(//div[@class='grid-header']/div/button/div/mav-svg-icon)[" + i + "]"));                }else if(moduleName.equalsIgnoreCase("invoices")){                    basePage.userClick(logger, By.xpath("(//div[@class='header-menu ng-star-inserted']/button/div/mav-svg-icon)[" + i + "]"));                }else{                    basePage.userClick(logger, By.xpath("(//div[@class='grid-header']/div/div/button/div/mav-svg-icon)[" + i + "]"));                }                logger.log("Searched record is displayed in search results and click on three dot icon");                break;            }        }    }    /*    Method to validate searched record with the database     */    public void validateSearchedRecordWithDatabase(Scenario logger, String searchKeywords, String moduleName) {        List<WebElement> listOfRecords = basePage.getListOfElements(logger, liRecords);        int sizeOfRecords = listOfRecords.size();        By fieldLocator = null;        int count = 0;        String headerValue = "";        String fieldValues = "";        for (int i = 1; i <= sizeOfRecords; i = i + 4) {            fieldLocator = By.xpath("(//div[@class='panel-header-field header-field-primary'])[" + i + "]");            headerValue = basePage.userGetTextFromWebElement(logger, fieldLocator);            count = count + 1;            Properties testDataProperties = PropUtils.getProps(baseUtils.testDataFile);            if (headerValue.equals(PropUtils.getPropValue(testDataProperties, searchKeywords))) {                basePage.userClick(logger, fieldLocator);                By summaryValuesLocator = By.cssSelector("div[class='mat-expansion-panel-body']>mat-grid-list>div>mat-grid-tile>figure>div>div");                List<WebElement> summaryValues = basePage.getListOfElements(logger, summaryValuesLocator);                for (int j = 0; j <= summaryValues.size() - 1; j = j + 2) {                    if (j == summaryValues.size() - 2) {                        fieldValues = fieldValues + summaryValues.get(j + 1).getText();                    } else {                        fieldValues = fieldValues + summaryValues.get(j + 1).getText() + ",";                    }                }                break;            }        }        String query = "";        Properties testDataProperties = PropUtils.getProps(baseUtils.testDataFile);        int accountNumber = Integer.parseInt(PropUtils.getPropValue(testDataProperties, "accountNumber"));        if (moduleName.equalsIgnoreCase("users")) {            String userName = PropUtils.getPropValue(testDataProperties, "u" +                    "sers-userName");//            query = "select * from (select name as name, logon_id as userId, email_address as email_address,mobile_phone as mobile_phone, other_phone as other_phone, (select description from constants where constant_oid=(select logon_status_cid from users where user_oid=u.user_oid)) as user_status, (select description from access_groups where access_group_oid=(select access_group_oid from users where user_oid=u.user_oid)) as user_role from users u, user_members um, accounts ac where logon_id = '" + userName + "' and u.user_oid = um.user_oid and um.member_oid = ac.customer_mid and ac.account_no=" + accountNumber + ")";            query = "select ar.description as user_role,c.description as user_status, u.name, u.email_address,u.logon_id as userId,\n" +                    "u.mobile_phone, u.other_phone from users u\n" +                    "left join constants c on c.constant_oid = u.logon_status_cid \n" +                    "left join user_roles ur on ur.user_oid = u.user_oid\n" +                    "left join access_roles ar on ar.access_role_oid = ur.access_role_oid\n" +                    "where logon_id = '" + userName + "' ";        }        if (moduleName.equalsIgnoreCase("contacts")) {            String contactName = PropUtils.getPropValue(testDataProperties, "contacts-contactName");            query = "select con.contact_oid,con.update_count,con.last_updated_at,con.last_updated_by,con.member_oid,con.member_type_cid\n" +                    " ,con.contact_type_oid ,con.is_default,con.contact_name ,con.postal_address_oid,con.street_address_oid,con.contact_title\n" +                    " ,con.email_address ,con.phone_business ,con.phone_fax ,con.phone_mobile_1 ,con.phone_mobile_2 ,ct.description as contact_type_description\n" +                    " ,cr.contact_hierarchy_cid ,cr.sequence_no ,ad.ADDRESS_LINE, ad.SUBURB ,ad.POSTAL_CODE ,st.description as state\n" +                    " FROM\n" +                    " contacts con\n" +                    " INNER JOIN contact_types ct ON ct.contact_type_oid = con.contact_type_oid\n" +                    " LEFT JOIN contact_rankings cr ON ct.contact_type_oid = cr.contact_type_oid\n" +                    " RIGHT JOIN addresses ad ON con.STREET_ADDRESS_OID = ad.ADDRESS_OID\n" +                    " RIGHT JOIN states st ON ad.STATE_OID = st.state_oid\n" +                    " WHERE con.member_oid=(select customer_mid from m_customers where customer_no='" + accountNumber + "') and con.member_type_cid=103 and con.contact_name = '" + contactName + "'\n" +                    " ORDER BY con.member_oid, cr.sequence_no";        }        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String arrFieldValues[] = fieldValues.split(",");        for (int j = 0; j <= arrFieldValues.length - 1; j++) {            if (moduleName.equalsIgnoreCase("users")) {                basePage.assertTwoStrings(logger, queryResults.get("USERID"), arrFieldValues[1]);                basePage.assertTwoStrings(logger, queryResults.get("EMAIL_ADDRESS"), arrFieldValues[0]);                basePage.assertTwoStrings(logger, queryResults.get("MOBILE_PHONE"), arrFieldValues[4]);                basePage.assertTwoStrings(logger, queryResults.get("OTHER_PHONE"), arrFieldValues[5]);                basePage.assertTwoStrings(logger, queryResults.get("USER_ROLE"), arrFieldValues[2]);                basePage.assertTwoStrings(logger, queryResults.get("USER_STATUS"), arrFieldValues[3]);                break;            }            if (moduleName.equalsIgnoreCase("contacts")) {                basePage.assertTwoStrings(logger, queryResults.get("CONTACT_TITLE"), arrFieldValues[6]);                basePage.assertTwoStrings(logger, queryResults.get("PHONE_BUSINESS"), arrFieldValues[4]);                basePage.assertTwoStrings(logger, queryResults.get("PHONE_MOBILE_1"), arrFieldValues[3]);                basePage.assertTwoStrings(logger, queryResults.get("PHONE_FAX"), arrFieldValues[5]);                basePage.assertTwoStrings(logger, queryResults.get("EMAIL_ADDRESS"), arrFieldValues[0]);//                basePage.assertTwoStrings(logger,queryResults.get("ADDRESS_LINE"),arrFieldValues[7]+arrFieldValues[8]);            }        }    }    /*    Method to validate search results message     */    public void validateSearchResultsMsg(Scenario logger, String expMessage) {        String actMessages[] = basePage.userGetTextFromWebElement(logger, msgSearchResultsSection).split(",");        String expMessages[] = expMessage.split(",");        basePage.assertTwoStrings(logger, actMessages[0], expMessages[0]);        if (actMessages[1].contains(expMessages[1])) {            logger.log("Message is displayed as expected");        }    }    /*    Method to click on Edit cost centre     */    public void clickButtonUsingItsText(Scenario logger, String button) {        By optionEditCostCentre = By.xpath("//button[contains(text(),'" + button + "')]");        basePage.userClick(logger, optionEditCostCentre);    }    /*    Method to validate non editable text field value     */    public void validateNonEditableTextFieldValuePresence(Scenario logger, String fieldValue) {        By fieldLocator = By.cssSelector("mav-input[name='" + fieldValue + "']>input");        if (basePage.whetherElementPresent(logger, fieldLocator)) {            logger.log("Field value is present");        } else {            logger.log("Field Value is not present");        }    }    /*    Method to validate error message in add cost centre form     */    public void enterValueInCostCentreFiledAndValidateErrorMessage(Scenario logger, String fieldName, String fieldValue, String errorMessage) {        By fieldLocator = By.cssSelector("div[class='mat-form-field-infix']>input[name='" + fieldName + "']");        if (fieldName.equalsIgnoreCase("description")) {            fieldLocator = By.cssSelector("div[class='mat-form-field-infix']>textarea[ng-reflect-name='description']");        }        basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        basePage.userClick(logger, By.cssSelector("input[name='name']"));        if (fieldValue.equals(basePage.userGetTextFromWebElement(logger, fieldLocator))) {            By errorLocator = By.xpath("//span[contains(text(),'" + errorMessage + "')]");            if (basePage.whetherElementPresent(logger, errorLocator)) {                logger.log("Error message is displayed as expected");            } else {                logger.log("Error message is not displayed");            }        }    }    /*Method to select attribute value in search bar */    public void selectRandomSearchAttribute(Scenario logger) {        basePage.userClick(logger, dropDownSearchBar);        By fieldLocator = By.cssSelector("span[class='mat-option-text']");        List<WebElement> attList = basePage.getListOfElements(logger, fieldLocator);        Random r = new Random();        int randomValue = r.nextInt(attList.size());        attList.get(randomValue).click();        String attribute= basePage.userGetTextFromWebElement(logger, attributeValue);        //logger.log("The selected attribute is" +attribute);        basePage.userClick(logger, dropDownSearchBar);        By locator = By.xpath("//mat-option[@aria-selected='true']//span[@class='mat-option-text' and contains(text(),'" + attribute + "')]");        String selectedAttribute= basePage.userGetTextFromWebElement(logger, locator);        basePage.assertTwoStrings(logger,attribute,selectedAttribute);        commonPage.handleActionsClassForKeyboardActions("tab");    }}