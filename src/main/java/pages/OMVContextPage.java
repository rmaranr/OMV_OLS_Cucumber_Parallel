package pages;import com.aventstack.extentreports.ExtentTest;import com.aventstack.extentreports.GherkinKeyword;import io.cucumber.java.Scenario;//import listeners.ExtentReportListener;import org.openqa.selenium.*;import org.openqa.selenium.interactions.Actions;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import utilities.ui.TransactionNotFoundException;import java.math.RoundingMode;import java.text.DecimalFormat;import java.util.*;public class OMVContextPage {    private WebDriver driver;    private BasePage basePage;    CommonDBUtils commonUtils;    private BaseUtils baseUtils;    private UsersPage usersPage;    private CommonPage commonPage;    private ReportsPage reportsPage;    private Map<String, String> queryResults = null;    private List<Map<String, String>> allRowsOfQueryResults = null;    private String query = "";    private CostCentresPage costCentresPage;    private Map<String, String> mapObject = new HashMap<>();    public Scenario logger;    /* Constructor to get the driver object */    public OMVContextPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        usersPage = new UsersPage(driver);        commonPage = new CommonPage(driver);        costCentresPage = new CostCentresPage(driver);        mapObject = new HashMap<>();        reportsPage = new ReportsPage(driver);    }    /* Method to get all customers based on logged in user  */    public List<Map<String, String>> getAllCustomersBasedOnLoggedInUser(String userName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String descriptionOfLoggedInUser = PropUtils.getPropValue(properties, "userName");        query = "";        if (descriptionOfLoggedInUser.equalsIgnoreCase("AllCountries")) {            query = "select * from m_customers mcust \n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where rownum<=10";        } else if (descriptionOfLoggedInUser.split(" ")[0].equalsIgnoreCase("CHV")) {            descriptionOfLoggedInUser = "Chevron " + descriptionOfLoggedInUser.split(" ")[1];            query = "select * from m_customers mcust \n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.short_name like '%" + descriptionOfLoggedInUser + "%'" +                    "  and rownum<=10";            PropUtils.setProps("clientShortName", descriptionOfLoggedInUser, baseUtils.testDataFilePath);            PropUtils.setProps("ClientOrCountryBasedUser", commonUtils.getQueryResultsOnMap("select name from m_clients where short_name = '" + descriptionOfLoggedInUser + "'").get("NAME"), baseUtils.testDataFilePath);            PropUtils.setProps("Country", commonUtils.getQueryResultsOnMap("select name from m_clients where short_name = '" + descriptionOfLoggedInUser + "'").get("NAME"), baseUtils.testDataFilePath);        } else {            query = "select * from m_customers mcust \n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.name like '%" + descriptionOfLoggedInUser + "%'" +                    "  and rownum<=10";            PropUtils.setProps("ClientOrCountryBasedUser", descriptionOfLoggedInUser, baseUtils.testDataFilePath);            PropUtils.setProps("Country", descriptionOfLoggedInUser, baseUtils.testDataFilePath);        }        System.out.println(query);        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        return allRowsOfQueryResults;    }    /*    Method to get country names based on logged in user     */    public List<Map<String, String>> getCountryNamesForLoggedInUser(String userName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = query = "select mc.name from access_groups ag\n" +                "inner join access_role_clients arc on arc.access_group_oid = ag.access_group_oid\n" +                "inner join user_roles ur on ur.access_role_oid = arc.access_role_oid\n" +                "inner join users u on u.user_oid = ur.user_oid\n" +                "left join m_clients mc on mc.client_mid = arc.client_mid\n" +                "where mc.short_name = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile), PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile), "clientCountry")) + "'\n" +                "and u.logon_id = '" + userName + "' and rownum<=10";        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        return allRowsOfQueryResults;    }    /*    Method to get accountNumber and AccountName based on the selected country     */    public List<Map<String, String>> getAccountDetailsBasedOnLoggedInUser() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "";        query = "select mc.name as country,mcust.name as accountName, mc.client_mid,mcust.customer_no as accountNumber, c.card_no as cardNumber from m_customers mcust\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "inner join cards c on c.customer_mid = mcust.customer_mid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and rownum<=10  order by mcust.name desc";        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        PropUtils.setProps("Country", allRowsOfQueryResults.get(0).get("COUNTRY"), baseUtils.testDataFilePath);        return allRowsOfQueryResults;    }    /*    Method to get card number based on logged in user     */    public List<Map<String, String>> getCardNumberBasedOnLoggedInUser() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select mcust.name, mcust.customer_no as accountNumber, c.card_No as cardNumber from m_customers mcust \n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "inner join cards c on c.customer_mid = mcust.customer_mid\n" +                "order by mcust.name desc";        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        return allRowsOfQueryResults;    }    /*    Method to validate count of records based on search criteria     */    public void validateCountOfRecordsBasedOnSearchCriteria(Scenario logger, String moduleName, String fieldName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String country = PropUtils.getPropValue(properties, "Country");        String condition = "mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")";        if (moduleName.equalsIgnoreCase("accounts")) {            if (fieldName.equalsIgnoreCase("accountNumber")) {                condition = condition + " and mcust.customer_no like '%" + PropUtils.getPropValue(properties, "accounts-accountNumberEnteredInField") + "%'";            }            if (fieldName.equalsIgnoreCase("accountName")) {                condition = condition + " and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accounts-accountNumberEnteredInField") + "'" + " and mcust.name = '" + PropUtils.getPropValue(properties, "accounts-accountNameEnteredInField") + "'";            }            if (fieldName.equalsIgnoreCase("cardNumber")) {                condition = condition + " and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accounts-accountNumberEnteredInField") + "'" + " and c.card_no = " + PropUtils.getPropValue(properties, "accounts-cardNumber");            }            if (fieldName.equalsIgnoreCase("country")) {                condition = condition + " and mc.name = '" + PropUtils.getPropValue(properties, "Country").replaceAll(",", ", ") + "'";            }            query = "select distinct mcust.customer_no from m_customers mcust\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "inner join cards c on c.customer_mid = mcust.customer_mid\n" +                    "where " + condition;            if (fieldName.equalsIgnoreCase("country")) {                query = "select distinct mcust.customer_no from m_customers mcust\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where " + condition;            }            logger.log(query);            allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);            if (allRowsOfQueryResults.size() == 0) {                costCentresPage.validateSearchResultsMsg(logger, "No results found,Please update your search keywords.");            } else {                if (allRowsOfQueryResults.size() >= 100) {                    commonPage.assertTwoStrings(logger, "100", usersPage.getCountOfRecords(logger), "Count of records in module '" + moduleName + "'");                } else {                    commonPage.assertTwoStrings(logger, String.valueOf(allRowsOfQueryResults.size()), usersPage.getCountOfRecords(logger), "Count of records in module '" + moduleName + "'");                }                if (allRowsOfQueryResults.size() == 1) {                    commonPage.assertTwoStrings(logger, usersPage.getCountOfRecords(logger) + " " + moduleName.substring(0, moduleName.length() - 1), basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='view-page-list']")), "Record count label");                    logger.log("The label of record count is " + usersPage.getCountOfRecords(logger) + " " + moduleName.substring(0, moduleName.length() - 1));                } else {                    commonPage.assertTwoStrings(logger, usersPage.getCountOfRecords(logger) + " " + moduleName, basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='view-page-list']")), "Record count label");                    logger.log("The label of record count is " + usersPage.getCountOfRecords(logger) + " " + moduleName);                }            }        }    }    /*       Method to enter value in corresponding field based on their behavior of field        */    public void enterValueInCorrespondingFieldBasedOnItsType(Scenario logger, String fieldBehavior, String fieldName, String moduleName, String userName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (fieldBehavior.equalsIgnoreCase("text") && moduleName.equalsIgnoreCase("accounts")) {            if (fieldName.equalsIgnoreCase("accountName") || fieldName.equalsIgnoreCase("accountNumber") || fieldName.equalsIgnoreCase("cardNumber") || fieldName.equalsIgnoreCase("Country")) {                allRowsOfQueryResults = getAccountDetailsBasedOnLoggedInUser();            }            if (allRowsOfQueryResults.size() == 0) {                PropUtils.setProps("testStatus", "skipped", baseUtils.testDataFilePath);            }            if (!PropUtils.getPropValue(properties, "moduleBasedAccountNumber").equals("")) {                PropUtils.setProps("ClientMID", allRowsOfQueryResults.get(0).get("CLIENT_MID"), baseUtils.testDataFilePath);                if (fieldName.equalsIgnoreCase("accountNumber")) {                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), PropUtils.getPropValue(properties, "moduleBasedAccountNumber"));                }                if (fieldName.equalsIgnoreCase("accountName")) {                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), PropUtils.getPropValue(properties, "accounts-accountName"));                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='accountNumber']>input"), PropUtils.getPropValue(properties, "moduleBasedAccountNumber"));                }                if (fieldName.equalsIgnoreCase("cardNumber")) {                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), PropUtils.getPropValue(properties, "accounts-cardNumber"));                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='accountNumber']>input"), PropUtils.getPropValue(properties, "moduleBasedAccountNumber"));                }                PropUtils.setProps(moduleName + "-" + "accountNameEnteredInField", PropUtils.getPropValue(properties, "accounts-accountName"), baseUtils.testDataFilePath);                PropUtils.setProps(moduleName + "-" + "accountNumberEnteredInField", PropUtils.getPropValue(properties, "moduleBasedAccountNumber"), baseUtils.testDataFilePath);                PropUtils.setProps("accountNumberEnteredInField", PropUtils.getPropValue(properties, "moduleBasedAccountNumber"), baseUtils.testDataFilePath);//                PropUtils.setProps("accountNumberInTransactionsModule", " = " + PropUtils.getPropValue(properties, "moduleBasedAccountNumber"), baseUtils.testDataFilePath);            } else {                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='accountNumber']>input"), allRowsOfQueryResults.get(0).get("ACCOUNTNUMBER"));                if (!fieldName.equalsIgnoreCase("accountNumber")) {                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), allRowsOfQueryResults.get(0).get(fieldName.toUpperCase()));                }                PropUtils.setProps(moduleName + "-" + "accountNameEnteredInField", allRowsOfQueryResults.get(0).get("ACCOUNTNAME"), baseUtils.testDataFilePath);                PropUtils.setProps(moduleName + "-" + "accountNumberEnteredInField", allRowsOfQueryResults.get(0).get("ACCOUNTNUMBER"), baseUtils.testDataFilePath);//                PropUtils.setProps("accountNumberInTransactionsModule", allRowsOfQueryResults.get(0).get("ACCOUNTNUMBER"), baseUtils.testDataFilePath);            }            PropUtils.setProps(moduleName + "-" + fieldName, allRowsOfQueryResults.get(0).get(fieldName.toUpperCase()), baseUtils.testDataFilePath);            PropUtils.setProps(moduleName + "-" + "accountNameEnteredInField", allRowsOfQueryResults.get(0).get("ACCOUNTNAME"), baseUtils.testDataFilePath);            logger.log("Value '" + allRowsOfQueryResults.get(0).get(fieldName.toUpperCase()) + "' is entered or selected for field " + fieldName);        } else if (fieldBehavior.equalsIgnoreCase("dropDown")) {            if (fieldName.equalsIgnoreCase("country")) {                allRowsOfQueryResults = getAccountDetailsBasedOnLoggedInUser();                properties = PropUtils.getProps(baseUtils.testDataFile);                if (!PropUtils.getPropValue(properties, "Country").equalsIgnoreCase(commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), "ng-reflect-model"))) {                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"));                    commonPage.clickButtonUsingSpan(logger, PropUtils.getPropValue(properties, "Country"));                }                PropUtils.setProps(moduleName + "-" + fieldName, PropUtils.getPropValue(properties, "Country"), baseUtils.testDataFilePath);            }        }        if (moduleName.equalsIgnoreCase("Transactions")) {            if (fieldName.contains("date")) {                getTransactionOrAuthorisationRecordsCountBasedOnDate(logger, fieldBehavior, "Transactions");                properties = PropUtils.getProps(baseUtils.testDataFile);                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='transRef']>input"), PropUtils.getPropValue(properties, "LatestTransactionReference"));                if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                    basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='cAccountNo']/mat-form-field/div/div/div[3]/input"), PropUtils.getPropValue(properties, "accountNumberInTransactionsModule"));                    commonPage.clickButtonUsingSpan(logger, "Apply");                    commonPage.sleepForFewSeconds(2);                }            } else {                String fieldValue = getTransactionDetailsBasedOnReference(PropUtils.getPropValue(properties, "TransactionOID"), fieldName);                properties = PropUtils.getProps(baseUtils.testDataFile);                PropUtils.setProps(fieldName, fieldValue, baseUtils.testDataFilePath);                if (fieldValue.equalsIgnoreCase("")) {                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                } else {                    if (fieldName.equalsIgnoreCase("cAccountNo") || fieldName.equalsIgnoreCase("siteLocationId") || fieldName.equalsIgnoreCase("costCentre")) {                        properties = PropUtils.getProps(baseUtils.testDataFile);                        if (fieldValue.length() < 3) {                            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                            PropUtils.setProps("skipReason", "This scenario will be skipped because field value contain less than 3 characters " + fieldName, baseUtils.testDataFilePath);                        } else {                            if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                                basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='" + fieldName + "']/mat-form-field/div/div/div[3]/input"), fieldValue);                                commonPage.clickButtonUsingSpan(logger, "Apply");                                commonPage.sleepForFewSeconds(2);                            }                            basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='transRef']>input"), PropUtils.getPropValue(properties, "LatestTransactionReference"));                        }                    } else if (fieldName.equalsIgnoreCase("transRef")) {                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), fieldValue);                        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                            basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='cAccountNo']/mat-form-field/div/div/div[3]/input"), PropUtils.getPropValue(properties, "accountNumberInTransactionsModule"));                            commonPage.clickButtonUsingSpan(logger, "Apply");                            commonPage.sleepForFewSeconds(2);                        }                    } else {                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='transRef']>input"), PropUtils.getPropValue(properties, "LatestTransactionReference"));                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), fieldValue);                        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {//                            basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='cAccountNo']/mat-form-field/div/div/div[3]/input"), PropUtils.getPropValue(properties, "accountNumberInTransactionsModule"));//                            commonPage.clickButtonUsingSpan(logger, "Apply");//                            commonPage.sleepForFewSeconds(2);                        }                    }                    logger.log("Field " + fieldName + " value has been entered as " + fieldValue);                }            }        }        if (moduleName.equalsIgnoreCase("Cards")) {            queryResults = getCardDetailsInMapBasedOnLoggedInUser(logger, PropUtils.getPropValue(properties, "Cards-cardNumber"));            String fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, fieldName.toUpperCase());            PropUtils.setProps("Cards-" + fieldName, fieldValue, baseUtils.testDataFilePath);            if (fieldValue.equalsIgnoreCase("")) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            } else {                if (fieldName.equalsIgnoreCase("customerNumber") || fieldName.equalsIgnoreCase("costCentreCode")) {                    properties = PropUtils.getProps(baseUtils.testDataFile);                    if (fieldValue.length() < 3) {                        PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                        PropUtils.setProps("skipReason", "This scenario will be skipped because field value contain less than 3 characters " + fieldName, baseUtils.testDataFilePath);                    } else {                        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                            basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='" + fieldName + "']/mat-form-field/div/div/div[3]/input"), fieldValue);                            commonPage.sleepForFewSeconds(4);                            commonPage.clickButtonUsingSpan(logger, "Apply");                            commonPage.sleepForFewSeconds(2);                        }                    }                } else if (fieldName.equalsIgnoreCase("status")) {                    basePage.userClick(logger, By.cssSelector("mat-select[ng-reflect-name='status']"));                    basePage.userClick(logger, By.xpath("//span[@class='mat-option-text'][contains(text(),'" + queryResults.get(fieldName.toUpperCase()) + "')]"));                    commonPage.clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger, By.xpath("//body")));                } else if (!fieldName.equalsIgnoreCase("issuingCountry") && !fieldName.equalsIgnoreCase("cardNumber")) {                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), fieldValue);                }                if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                    basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='customerNumber']/mat-form-field/div/div/div[3]/input"), queryResults.get("CUSTOMERNUMBER"));                    commonPage.clickButtonUsingSpan(logger, "Apply");                    commonPage.sleepForFewSeconds(2);                }                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='cardNumber']>input"), queryResults.get("CARDNUMBER"));                PropUtils.setProps("Cards-cardNumber", queryResults.get("CARDNUMBER"), baseUtils.testDataFilePath);                logger.log("Field " + fieldName + " value has been entered as " + fieldValue);            }        }        if (moduleName.equalsIgnoreCase("Authorisations")) {            if (fieldName.contains("date")) {                getTransactionOrAuthorisationRecordsCountBasedOnDate(logger, fieldBehavior, "Authorisations");                properties = PropUtils.getProps(baseUtils.testDataFile);                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='traceNumber']>input"), PropUtils.getPropValue(properties, "LatestTraceNo"));            } else {                String fieldValue = getAuthorizationRecordBasedOnFieldName(logger, PropUtils.getPropValue(properties, "AuthOID"), fieldName);                PropUtils.setProps(fieldName, fieldValue, baseUtils.testDataFilePath);                if (fieldValue.equalsIgnoreCase("")) {                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                } else {                    properties = PropUtils.getProps(baseUtils.testDataFile);                    if (fieldName.equalsIgnoreCase("locationId") || fieldName.equalsIgnoreCase("costCentre")) {                        basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='" + fieldName + "']/mat-form-field/div/div/div[3]/input"), fieldValue);                        commonPage.clickButtonUsingSpan(logger, "Apply");                        commonPage.sleepForFewSeconds(2);                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='traceNumber']>input"), PropUtils.getPropValue(properties, "LatestTraceNo"));                    } else if (fieldName.equalsIgnoreCase("customerNumber")) {                        if (!basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                            basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='traceNumber']>input"), PropUtils.getPropValue(properties, "LatestTraceNo"));                        } else {                            basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='" + fieldName + "']/mat-form-field/div/div/div[3]/input"), fieldValue);                            commonPage.clickButtonUsingSpan(logger, "Apply");                            commonPage.sleepForFewSeconds(2);                            basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='traceNumber']>input"), PropUtils.getPropValue(properties, "LatestTraceNo"));                        }                    } else if (fieldName.equalsIgnoreCase("transRef")) {                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), fieldValue);                    } else if (fieldName.equalsIgnoreCase("accountNumber")) {                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), fieldValue);                    } else {                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='traceNumber']>input"), PropUtils.getPropValue(properties, "LatestTraceNo"));                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), fieldValue);                    }                    logger.log("Field " + fieldName + " value has been entered as " + fieldValue);                }            }        }        if (moduleName.equalsIgnoreCase("CardControlProfile")) {            queryResults = getCardControlsInMapBasedOnLoggedInUser(logger);            String fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, fieldName.toUpperCase());            PropUtils.setProps("CardControlProfile-" + fieldName, fieldValue, baseUtils.testDataFilePath);            if (fieldValue.equalsIgnoreCase("")) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            } else {                if (fieldName.equalsIgnoreCase("cardControl")) {                    properties = PropUtils.getProps(baseUtils.testDataFile);                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"), fieldValue);                }                logger.log("Field " + fieldName + " value has been entered as " + fieldValue);            }        }        if (moduleName.equalsIgnoreCase("accounts")) {            if (!PropUtils.getPropValue(properties, "moduleBasedAccountNumber").equals("")) {                PropUtils.setProps(moduleName + "-" + "accountName", allRowsOfQueryResults.get(0).get("ACCOUNTNAME"), baseUtils.testDataFilePath);            }        }    }    /*    Method to get card control details based on logged in User     */    public Map<String, String> getCardControlsInMapBasedOnLoggedInUser(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select ccp.description as cardControl from card_control_profiles ccp\n" +                "left join m_customers mcust on mcust.customer_mid = ccp.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                " and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'";        queryResults = commonUtils.getQueryResultsOnMap(query);        return queryResults;    }    /*    Method to get transaction count based on date     */    public void getTransactionOrAuthorisationRecordsCountBasedOnDate(Scenario logger, String selectFilter, String moduleName) {//        ((JavascriptExecutor)driver).executeScript("chrome.settingsPrivate.setDefaultZoom(0.9);");//        for (int i = 0; i < 2; i++) {//            driver.findElement(By.tagName("html")).sendKeys(Keys.chord(Keys.CONTROL, Keys.ADD));//        }//        commonPage.sleepForFewSeconds(2);        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        JavascriptExecutor js = ((JavascriptExecutor) driver);        js.executeScript("arguments[0].scrollIntoView(true);", basePage.getWebElementUsingLocator(logger, By.cssSelector("input[id='daterange']")));        commonPage.sleepForFewSeconds(2);        basePage.userClick(logger, By.cssSelector("input[id='daterange']"));        basePage.userClick(logger, By.xpath("(//div[@class='dropdown-button-content'])"));        if (selectFilter.equalsIgnoreCase("custom")) {            String getCurrentDate  = commonPage.getDesiredDateInSpecificFormat(logger,commonPage.getClientProcessingDate().split(" ")[0],Integer.parseInt("0"),"future","yyyy-MM-dd","dd, MMMM YYYY");            basePage.userClick(logger, By.xpath("//div[@class='cdk-overlay-pane']/div/div/mat-option/span/span/div[contains(text(),'Custom')]"));            commonPage.sleepForFewSeconds(2);            String getDayNumber = "";            String getDesiredDate = commonPage.getDesiredDateInSpecificFormat(logger, getCurrentDate, 110, "Past", "dd, MMMM YYYY", "dd, MMMM YYYY");            if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month drp-animate']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {                getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[contains(@class,'active start-date active end-date available')]/span"));            } else if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {                getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[contains(@class,'active start-date active end-date available')]/span"));            }            commonPage.clickAndPerformUsingActions(driver.findElement(By.xpath("//td[contains(@class,'active start-date active end-date available')]/span[text()='" + getDayNumber + "']")));            reportsPage.handleDatePickerForPastOrFutureDateSelection(logger, getDesiredDate);        } else {            commonPage.clickUsingDiv(logger, selectFilter);            commonPage.sleepForFewSeconds(2);            commonPage.clickApplyButtonOnDatePicker(logger);        }        String days = "";        if (selectFilter.equalsIgnoreCase("1 day")) {            days = "1";        } else if (selectFilter.equalsIgnoreCase("Last 7 days")) {            days = "7";        } else if (selectFilter.equalsIgnoreCase("Last 14 days")) {            days = "14";        } else if (selectFilter.equalsIgnoreCase("Last 30 days")) {            days = "30";        } else if (selectFilter.equalsIgnoreCase("Last 90 days")) {            days = "90";        } else {            days = "150";        }//        query = "select * from transaction_enquiry te\n" +//                "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +//                "where te.effective_at < sysdate and te.effective_at > sysdate-" + days + " order by te.effective_at desc";        if (moduleName.equalsIgnoreCase("Transactions")) {            getTransactionRecordBasedOnTransactionType(logger, PropUtils.getPropValue(properties, "TransactionTypeInDB"), "date", days);            PropUtils.setProps("trans-date", days, baseUtils.testDataFilePath);            PropUtils.setProps("searchTransFieldValue", selectFilter, baseUtils.testDataFilePath);        } else if (moduleName.equalsIgnoreCase("Authorisations")) {            getAuthorizationRecordsBasedOnLoggedInUser(logger, "date", days);            PropUtils.setProps("auth-date", days, baseUtils.testDataFilePath);            PropUtils.setProps("searchAuthFieldValue", selectFilter, baseUtils.testDataFilePath);        }//        return commonUtils.getAllRowsOfQueryResultsOnListMap(query);    }    /*    Method to select custom date for authorisation module     */    public void selectCustomDateForAuthorisationModule(String getCurrentDate) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        JavascriptExecutor js = ((JavascriptExecutor) driver);        js.executeScript("arguments[0].scrollIntoView(true);", basePage.getWebElementUsingLocator(logger, By.cssSelector("input[id='daterange']")));        commonPage.sleepForFewSeconds(2);        basePage.userClick(logger, By.cssSelector("input[id='daterange']"));        basePage.userClick(logger, By.xpath("(//div[@class='dropdown-button-content'])"));        basePage.userClick(logger, By.xpath("//div[@class='cdk-overlay-pane']/div/div/mat-option/span/span/div[contains(text(),'Custom')]"));        commonPage.sleepForFewSeconds(2);        String getDayNumber = "";//        String getCurrentDate = commonPage.getDesiredDateInSpecificFormat(logger, "today", 0, "Past", "dd, MMMM YYYY", "dd, MMMM YYYY");        String getDesiredDate = commonPage.getDesiredDateInSpecificFormat(logger, getCurrentDate, 600, "Past", "dd, MMMM YYYY", "dd, MMMM YYYY");        if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month drp-animate']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {            getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[@class='active start-date active end-date available']/span"));        } else if (basePage.userGetTextFromWebElement(logger, By.cssSelector("th[class='month']")).equalsIgnoreCase(getCurrentDate.substring(3).trim())) {            getDayNumber = basePage.userGetTextFromWebElement(logger, By.xpath("//td[contains(@class,'active start-date end-date in-range available ng-star-inserted')]/span"));        }        commonPage.clickAndPerformUsingActions(driver.findElement(By.xpath("//td[@class='active start-date active end-date available']/span[text()='" + getDayNumber + "']")));        reportsPage.handleDatePickerForPastOrFutureDateSelection(logger, getDesiredDate);//        query = "select * from transaction_enquiry te\n" +//                "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +//                "where te.effective_at < sysdate and te.effective_at > sysdate-" + days + " order by te.effective_at desc";        getAuthorizationRecordsBasedOnLoggedInUser(logger, "date", "600");        PropUtils.setProps("auth-date", "600", baseUtils.testDataFilePath);        PropUtils.setProps("searchAuthFieldValue", "Custom", baseUtils.testDataFilePath);    }    /*    Method to select drop down value in search module     */    public void selectDropDownValueInSearchModule(Scenario logger, String fieldName, String moduleName) {        if (allRowsOfQueryResults.size() > 1) {            basePage.userClickJSExecutor(logger, By.cssSelector("mav-select[ng-reflect-name='" + fieldName + "']"));            commonPage.clickButtonUsingSpan(logger, allRowsOfQueryResults.get(0).get(fieldName.toUpperCase()));            PropUtils.setProps(moduleName + "-" + fieldName, allRowsOfQueryResults.get(0).get(fieldName.toUpperCase()), baseUtils.testDataFilePath);            logger.log("Value '" + allRowsOfQueryResults.get(0).get(fieldName.toUpperCase()) + "' is entered or selected for field " + fieldName);        } else if (allRowsOfQueryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);        }    }    /*    Method to get db field name for corresponding UI field     */    public String getDBTransactionFieldNameForCorrespondingUIField(String fieldName) {        String exactFieldName = "";        if (fieldName.equalsIgnoreCase("cardNO")) {            exactFieldName = "CARD_NO";        } else if (fieldName.equalsIgnoreCase("transRef")) {            exactFieldName = "REFERENCE";        } else if (fieldName.equalsIgnoreCase("date")) {            exactFieldName = "REFERENCE";        } else if (fieldName.equalsIgnoreCase("Dname")) {            exactFieldName = "DRIVER_OID";        } else if (fieldName.equalsIgnoreCase("vlPlate")) {            exactFieldName = "VEHICLE_OID";        } else if (fieldName.equalsIgnoreCase("cAccountNo")) {            exactFieldName = "CUSTOMER_NO";        } else if (fieldName.equalsIgnoreCase("siteLocationId")) {            exactFieldName = "LOCATION_NO";        } else if (fieldName.equalsIgnoreCase("costCentre")) {            exactFieldName = "CUSTOMER_COST_CENTRE_OID";        } else if (fieldName.equalsIgnoreCase("status")) {            exactFieldName = "POS_TRANSACTION_STATUS_CID";        }        return exactFieldName;    }    /*    Method to get db field name for corresponding UI field in Authorisations module     */    public String getDBAuthorizationFieldNameForCorrespondingUIField(String fieldName) {//        List<String> dbFieldNames = new ArrayList<>();        if (fieldName.equalsIgnoreCase("cardNumber")) {            fieldName = "CARD_NO";        }        if (fieldName.equalsIgnoreCase("traceNumber")) {            fieldName = "REFERENCE";        }        if (fieldName.equalsIgnoreCase("date")) {            fieldName = "REFERENCE";        }        if (fieldName.equalsIgnoreCase("driverName")) {            fieldName = "CARD_NO";        }        if (fieldName.equalsIgnoreCase("licencePlate")) {            fieldName = "CARD_NO";        }        if (fieldName.equalsIgnoreCase("customerNumber")) {            fieldName = "CUSTOMER_MID";        }        if (fieldName.equalsIgnoreCase("locationId")) {            fieldName = "LOCATION_CODE";        }        if (fieldName.equalsIgnoreCase("costCentre")) {            fieldName = "CARD_NO";        }        if (fieldName.equalsIgnoreCase("status")) {            fieldName = "POS_TRANSACTION_STATUS_CID";        }        return fieldName;    }    /*   Method to get transaction record based on transaction type    */    public void getTransactionRecordBasedOnTransactionType(Scenario logger, String transactionTypeInDB, String fieldName, String days) {        PropUtils.setProps("searchFieldName", fieldName, baseUtils.testDataFilePath);        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String exactFieldName = getDBTransactionFieldNameForCorrespondingUIField(fieldName);        String dbContainTransactionTypes = "";        if (!transactionTypeInDB.equals("")) {            dbContainTransactionTypes = " and tt.description like " + transactionTypeInDB;        }        String dbNotContainTransactionTypes = "";        if (!PropUtils.getPropValue(properties, "notContainsTransactionTypes").equals("")) {            dbNotContainTransactionTypes = " and tt.description not in (" + PropUtils.getPropValue(properties, "notContainsTransactionTypes") + ")";        }        String customerNoForTransaction = "";        if (!PropUtils.getPropValue(properties, "accountNumberInTransactionsModule").equalsIgnoreCase("")) {            customerNoForTransaction = " and te.customer_no = " + PropUtils.getPropValue(properties, "accountNumberInTransactionsModule");        }        if (PropUtils.getPropValue(properties, "Country").trim().equalsIgnoreCase("AllCountries")) {            if (days.isEmpty()) {                if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                    query = "select mcust.customer_no,c.description as status,mc.client_mid, te.transaction_oid, te.reference, te.CUSTOMER_CURRENCY_CODE_CHAR from transaction_enquiry te\n" +                            "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                            "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                            "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "left join constants c on c.constant_oid = te.POS_TRANSACTION_STATUS_CID\n" +                            "where mc.client_mid in ( " + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                            ") and te." + exactFieldName + " is not null " + dbContainTransactionTypes + " \n" +                            "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 and ROWNUM <= 10 order by te.effective_at desc";                } else {                    query = "select mcust.customer_no,c.description as status,mc.client_mid, te.transaction_oid, te.reference, te.CUSTOMER_CURRENCY_CODE_CHAR from transaction_enquiry te\n" +                            "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                            "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                            "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "left join constants c on c.constant_oid = te.POS_TRANSACTION_STATUS_CID\n" +                            "where mc.client_mid in ( " + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                            ") and te." + exactFieldName + " is not null " + dbContainTransactionTypes + " \n" +                            " and te.customer_no = " + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) +                            "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 and ROWNUM <= 10 order by te.effective_at desc";                }            } else {                if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                    query = "select mcust.customer_no,c.description as status,mc.client_mid, te.transaction_oid, te.reference, te.CUSTOMER_CURRENCY_CODE_CHAR from transaction_enquiry te\n" +                            "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                            "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                            "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "left join constants c on c.constant_oid = te.POS_TRANSACTION_STATUS_CID\n" +                            "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                            ") and te." + exactFieldName + " is not null " + dbContainTransactionTypes + " \n" +                            "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-" + days + " and ROWNUM <= 10 order by te.effective_at desc";                } else {                    query = "select mcust.customer_no,c.description as status,mc.client_mid, te.transaction_oid, te.reference, te.CUSTOMER_CURRENCY_CODE_CHAR from transaction_enquiry te\n" +                            "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                            "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                            "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "left join constants c on c.constant_oid = te.POS_TRANSACTION_STATUS_CID\n" +                            "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                            ") and te." + exactFieldName + " is not null " + dbContainTransactionTypes + " \n" +                            " and te.customer_no = " + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) +                            "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-" + days + " and ROWNUM <= 10 order by te.effective_at desc";                }            }        } else {            String shortName = "";            if (PropUtils.getPropValue(properties, "Country").split(" ")[0].equalsIgnoreCase("CHV")) {                shortName = "Chevron " + PropUtils.getPropValue(properties, "Country").split(" ")[1];                PropUtils.setProps("countryShortName", shortName, baseUtils.testDataFilePath);            }            if (days.isEmpty()) {                query = "select mcust.customer_no,c.description as status,mc.client_mid, te.transaction_oid, te.reference, te.CUSTOMER_CURRENCY_CODE_CHAR from transaction_enquiry te\n" +                        "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join constants c on c.constant_oid = te.POS_TRANSACTION_STATUS_CID\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + " \n" +                        ") and te." + exactFieldName + " is not null " + dbContainTransactionTypes + " \n" + customerNoForTransaction +                        "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 and ROWNUM <= 10 order by te.effective_at desc";            } else {                query = "select mcust.customer_no,c.description as status,mc.client_mid, te.transaction_oid, te.reference, te.CUSTOMER_CURRENCY_CODE_CHAR from transaction_enquiry te\n" +                        "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join constants c on c.constant_oid = te.POS_TRANSACTION_STATUS_CID\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + " \n" +                        ") and te." + exactFieldName + " is not null " + dbContainTransactionTypes + customerNoForTransaction +                        "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-" + days + " and ROWNUM <= 10 order by te.effective_at desc";            }        }        logger.log(query);        allRowsOfQueryResults = commonPage.commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if (allRowsOfQueryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + exactFieldName + " value", baseUtils.testDataFilePath);            logger.log("This scenario will be skipped because no record is available with the field " + exactFieldName + " value");        } else {            int i = 0;            if (PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile), "Scenario_Name").contains("dispute") || PropUtils.getPropValue(PropUtils.getProps(baseUtils.inputDataFile), "Scenario_Name").contains("Dispute")) {                for (int j = 0; j <= allRowsOfQueryResults.size() - 1; j++) {                    if (j == allRowsOfQueryResults.size() - 1) {                        PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                    }                    if (allRowsOfQueryResults.get(j).get("STATUS").equalsIgnoreCase("Posted")) {                        i = j;                        break;                    }                }            }            logger.log(query);            PropUtils.setProps("LatestTransactionReference", allRowsOfQueryResults.get(i).get("REFERENCE"), baseUtils.testDataFilePath);            PropUtils.setProps("CurrencyCode", allRowsOfQueryResults.get(i).get("CUSTOMER_CURRENCY_CODE_CHAR"), baseUtils.testDataFilePath);            PropUtils.setProps("TransactionOID", allRowsOfQueryResults.get(i).get("TRANSACTION_OID"), baseUtils.testDataFilePath);            PropUtils.setProps("ClientMID", allRowsOfQueryResults.get(i).get("CLIENT_MID"), baseUtils.testDataFilePath);            logger.log("Transaction reference : " + allRowsOfQueryResults.get(i).get("REFERENCE"));            logger.log("CurrencyCode : " + allRowsOfQueryResults.get(i).get("CUSTOMER_CURRENCY_CODE_CHAR"));            logger.log("TransactionOID : " + allRowsOfQueryResults.get(i).get("TRANSACTION_OID"));            PropUtils.setProps("accountNumberInTransactionsModule", allRowsOfQueryResults.get(i).get("CUSTOMER_NO"), baseUtils.testDataFilePath);        }    }    /*    Method to get card search bar field values based on card number     */    public Map<String, String> getCardDetailsInMapBasedOnLoggedInUser(Scenario logger, String cardNumber) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String cardNo = "";        if (!cardNumber.equalsIgnoreCase("")) {            cardNo = "and c.card_no like '%" + cardNumber + "'";        }        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {            query = "select SUBSTR(c.CARD_NO, LENGTH(c.CARD_NO) - 5, 6) as cardNumber,mcust.customer_no as customerNumber,mc.name as country,\n" +                    "d.driver_name as driverName, v.license_plate as licensePlate, \n" +                    "ccc.customer_cost_centre_code as costCentreCode,\n" +                    "cs.description as status, mc.name as issuingCountry from cards c\n" +                    "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join drivers d on d.driver_oid = c.driver_oid\n" +                    "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                    "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                    "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                    "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                    ")  " +                    " " + cardNo;        } else {            query = "select SUBSTR(c.CARD_NO, LENGTH(c.CARD_NO) - 5, 6) as cardNumber,mcust.customer_no as customerNumber,mc.name as country,\n" +                    "d.driver_name as driverName, v.license_plate as licensePlate, \n" +                    "ccc.customer_cost_centre_code as costCentre,\n" +                    "cs.description as status, mc.name as issuingCountry from cards c\n" +                    "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join drivers d on d.card_oid = c.card_oid\n" +                    "left join vehicles v on v.card_oid = c.card_oid\n" +                    "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                    "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                    "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                    ")  " +                    " " + cardNo + " and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'";        }        queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        PropUtils.setProps("Cards-accountNumber", queryResults.get("CUSTOMERNUMBER"), baseUtils.testDataFilePath);        PropUtils.setProps("Cards-countryName", queryResults.get("COUNTRY"), baseUtils.testDataFilePath);        return queryResults;    }    /*    Method to get default section field values based on searched field name     */    public void validateDefaultSectionFieldValuesOfCardModule(Scenario logger, String fields, String condition, String userName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsToBeValidated = fields.split(",");        query = "select CARDNUMBER, CARD_OID, LAST_UPDATED_AT, CUSTOMERNUMBER, DRIVERNAME, LICENSEPLATE, COSTCENTRE, STATUS, EXPIRYDATE, CARDPRODUCT from\n" +                "(select SUBSTR(c.card_no, LENGTH(c.card_no) - 5, 6) as cardNumber,c.card_oid,cc.LAST_UPDATED_AT,mcust.customer_no as customerNumber,\n" +                "d.driver_name as driverName, v.license_plate as licensePlate, \n" +                "ccc.customer_cost_centre_code as costCentre,RANK()over( ORDER BY cc.LAST_UPDATED_AT desc) AS rank,\n" +                "cs.description as status,c.EXPIRES_ON as expiryDate,cp.description as cardProduct from cards c\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                "left join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID")                + ")  \n" +                " and " + condition + " order by c.card_no asc)A where A.rank=1";        queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> defaultSectionFields = basePage.getListOfElements(logger, By.xpath("(//table[contains(@class,'mat-table')]/tbody/tr)[1]/td"));        for (int i = 1; i < defaultSectionFields.size() - 2; i++) {            if (i == defaultSectionFields.size() - 2) {                break;            }            if (fieldsToBeValidated[i - 1].equalsIgnoreCase("cardNumber")) {                commonPage.assertTwoStrings(logger, "****" + queryResults.get(fieldsToBeValidated[i - 1].toUpperCase()), defaultSectionFields.get(i).getText(), fieldsToBeValidated[i - 1]);            } else if (!fieldsToBeValidated[i - 1].equalsIgnoreCase("ExpiryDate")) {                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, fieldsToBeValidated[i - 1].toUpperCase()), defaultSectionFields.get(i).getText(), fieldsToBeValidated[i - 1]);            }        }        Actions actions = new Actions(driver);        actions.moveToElement(defaultSectionFields.get(2)).click().perform();        commonPage.sleepForFewSeconds(2);    }    /*    Method to validate Card Details,Additional Details,Embossing,CardCControlProfile expanded sections of field values     */    public void validateCardDetailsExpandedSectionFieldValuesBasedOnSearchedCard(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        query = "select co.description as cardOffer, cp.description as cardProduct,const.description as cardType,c.expires_on from cards c\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                "left join card_offers co on co.card_offer_oid = cp.card_offer_oid\n" +                "left join constants const on const.constant_oid = c.card_type_cid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")  and " + condition;        queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][1]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("//div[@class='details'][1]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));        for (int i = 0; i < fieldNames.size() - 1; i++) {            if (!fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("identificationMethod") && !fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("onlinePurchasesPassword") && !fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("expiryDate") && !fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Cardlanguage")) {                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, fieldNames.get(i).getText().trim().replaceAll(" ", "").toUpperCase()), fieldValues.get(i).getText(), fieldNames.get(i).getText());            }        }    }    /*    Method to validate Additional details section field values     */    public void validateAdditionalDetailsSectionFieldValues(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        query = "select v.vehicle_id as Vehicledescription,ccc.customer_cost_centre_code as costCentre,c.external_ref as additionalCode,\n" +                "v.vehicle_id as vehicleID, v.license_plate as licensePlate,\n" +                "d.driver_name as driverName, d.driver_id as driverID from cards c\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join constants const on const.constant_oid = c.card_type_cid\n" +                "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")   and " + condition;        queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][2]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][2]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));        for (int i = 0; i < fieldNames.size() - 1; i++) {            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, fieldNames.get(i).getText().trim().replaceAll(" ", "").toUpperCase()), fieldValues.get(i).getText(), fieldNames.get(i).getText());        }    }    /*    Method to validate Embossing section field values     */    public void validateEmbossingSectionFieldValues(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        query = "select CASE WHEN (c.EMBOSSING_NAME is null or c.EMBOSSING_NAME = 'N/A') THEN mcust.EMBOSSING_NAME\n" +                "   ELSE c.EMBOSSING_NAME END as companyName from m_customers mcust\n" +                "left join cards c on c.customer_mid = mcust.customer_mid\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")   and " + condition;        queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][3]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][3]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, fieldNames.get(i).getText().trim().replaceAll(" ", "").toUpperCase()).trim(), fieldValues.get(i).getText().trim(), fieldNames.get(i).getText());        }    }    /*        Method to validate Card Control Profile section field values         */    public void validateCardControlProfileSectionFieldValues(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        query = "select ccp.description as cardControlProfile from cards c\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join card_control_profiles ccp on ccp.CARD_CONTROL_PROFILE_OID = c.CARD_CONTROL_PROFILE_OID\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")   and " + condition;        queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][4]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][4]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, fieldNames.get(i).getText().trim().replaceAll(" ", "").toUpperCase()).trim(), fieldValues.get(i).getText().trim(), fieldNames.get(i).getText());        }    }    /*        Method to validate POSPrompts section field values         */    public void validatePOSPromptsSectionFieldValues(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        query = "select ccontrols.IS_ODOMETER_REQ,ccontrols.IS_ODOMETER_VALIDATION," +                "ccontrols.IS_VEHICLE_ID_REQ,ccontrols.IS_DRIVER_ID_REQ,ccontrols.IS_ORDER_NUMBER_REQ,\n" +                "ccontrols.IS_FLEET_ID_REQ,ccontrols.IS_CUSTOMER_SELECTION_REQ from cards c\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join card_controls ccontrols on ccontrols.CARD_CONTROL_PROFILE_OID = c.CARD_CONTROL_PROFILE_OID\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")   and " + condition;        logger.log(query);        queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][5]/div/mat-list/div/mat-list-item/div/div/div[1]"));        List<WebElement> fieldValues = null;        for (int i = 0; i <= fieldNames.size() - 1; i++) {            String posPrompts = "";            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_VEHICLE_ID_REQ").equalsIgnoreCase("Y")) {                posPrompts = "VehicleId" + ",";            }            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_DRIVER_ID_REQ").equalsIgnoreCase("Y")) {                posPrompts = posPrompts + "DriverId" + ",";            }            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_ORDER_NUMBER_REQ").equalsIgnoreCase("Y")) {                posPrompts = posPrompts + "OrderNumber" + ",";            }            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_FLEET_ID_REQ").equalsIgnoreCase("Y")) {                posPrompts = posPrompts + "FleetId" + ",";            }            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_CUSTOMER_SELECTION_REQ").equalsIgnoreCase("Y")) {                posPrompts = posPrompts + "AdditionalInformation" + ",";            }            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_ODOMETER_REQ").equalsIgnoreCase("Y")) {                posPrompts = posPrompts + "Odometer" + ",";            }            if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_ODOMETER_VALIDATION").equalsIgnoreCase("Y")) {                posPrompts = posPrompts + "OdometerValidation,";            }            if (!posPrompts.equalsIgnoreCase("")) {                posPrompts = posPrompts.substring(0, posPrompts.length() - 1);                String[] arrPosPrompts = {posPrompts};                String expPosPrompts = "";                if (posPrompts.contains(",")) {                    arrPosPrompts = posPrompts.split(",");                    for (int j = 0; j <= arrPosPrompts.length - 1; j++) {                        if (j == 0) {                            if (arrPosPrompts.length == 1) {                                expPosPrompts = arrPosPrompts[j];                            } else if (arrPosPrompts.length == 2) {                                expPosPrompts = arrPosPrompts[j];                            } else {                                expPosPrompts = arrPosPrompts[j] + ",";                            }                        } else if (j == arrPosPrompts.length - 1) {                            expPosPrompts = expPosPrompts + " & " + arrPosPrompts[j];                        } else if (j > 0 && j == arrPosPrompts.length - 2) {                            expPosPrompts = expPosPrompts + arrPosPrompts[j];                        } else {                            expPosPrompts = expPosPrompts + arrPosPrompts[j] + ",";                        }                    }                }                if (!expPosPrompts.equalsIgnoreCase("")) {                    fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][5]/div/mat-list/div/mat-list-item/div/div/div[2]"));                    commonPage.assertTwoStrings(logger, expPosPrompts.trim().replaceAll(" ", ""), fieldValues.get(i).getText().trim().replaceAll(" ", ""), fieldNames.get(i).getText());                }            } else {                logger.log("There is no pos prompts allocated to this card");            }        }    }    /*            Method to validate Purchase control section field values             */    public void validatePurchaseControlsSectionFieldValues(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        query = "select VELOCITY_TYPE_VALUE_1_OID,VELOCITY_TYPE_VALUE_2_OID,\n" +                "VELOCITY_TYPE_VALUE_3_OID,VELOCITY_TYPE_VALUE_4_OID,VELOCITY_TYPE_VALUE_5_OID from velocity_assignments va\n" +                "left join card_controls cc on cc.velocity_assignment_oid = va.velocity_assignment_oid\n" +                "left join card_control_profiles ccp on ccp.card_control_profile_oid = cc.card_control_profile_oid\n" +                "left join cards c on c.CARD_CONTROL_PROFILE_OID = ccp.CARD_CONTROL_PROFILE_OID\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join m_customers mcust on mcust.customer_mid =c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join card_offers cfo on cfo.card_offer_oid = ccp.card_offer_oid\n" +                "left join card_program_offers cpo on cpo.card_offer_oid = cfo.card_offer_oid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")  and " + condition;        queryResults = commonUtils.getQueryResultsOnMap(query);        String velocityIds = commonPage.getSpecificValueFromMapObject(queryResults, "VELOCITY_TYPE_VALUE_1_OID") +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResults, "VELOCITY_TYPE_VALUE_2_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResults, "VELOCITY_TYPE_VALUE_3_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResults, "VELOCITY_TYPE_VALUE_4_OID")) +                commonPage.addCommaIfValuePresent(commonPage.getSpecificValueFromMapObject(queryResults, "VELOCITY_TYPE_VALUE_5_OID"));        query = "select vtv.VELOCITY_TYPE_VALUE_OID,vtv.VELOCITY_TYPE_OID,vtv.description,vt.description as fieldname from velocity_type_values vtv\n" +                "inner join velocity_types vt on vt.VELOCITY_TYPE_OID = vtv.VELOCITY_TYPE_OID\n" +                "where vtv.VELOCITY_TYPE_VALUE_OID in (" + velocityIds + ")";        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][8]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][8]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            for (int j = 0; j <= allRowsOfQueryResults.size() - 1; j++) {                if (commonPage.getSpecificValueFromMapObject(allRowsOfQueryResults.get(j), "FIELDNAME").equalsIgnoreCase(fieldNames.get(i).getText().trim())) {                    commonPage.assertTwoStrings(logger, allRowsOfQueryResults.get(j).get("DESCRIPTION").trim(), fieldValues.get(i).getText().trim(), fieldNames.get(i).getText());                }            }        }    }    /*        Method to validate Subscription section field values         */    public void validateSubscriptionSectionFieldValues(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        query = "select sf.description as subscription from subscription_offers sf\n" +                "left join subscriptions s on s.subscription_offer_oid = sf.subscription_offer_oid\n" +                "left join cards c on c.card_oid = s.card_oid\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join accounts a on a.account_oid = s.account_oid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                ")  and " + condition;        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        logger.log(query);        StringBuffer sb = new StringBuffer();        for (int i = 0; i <= allRowsOfQueryResults.size() - 1; i++) {            if (i == allRowsOfQueryResults.size() - 1) {                sb.append(allRowsOfQueryResults.get(i).get("SUBSCRIPTION"));            } else {                sb.append(allRowsOfQueryResults.get(i).get("SUBSCRIPTION")).append(", ");            }        }        commonPage.assertTwoStrings(logger, sb.toString().trim(), basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][9]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[2]")).trim(), "Subscriptions in card expanded view section");    }    /*        Method to validate Delivery address section field values         */    public void validateDeliveryAddressSectionFieldValues(Scenario logger, String fields, String cardNumber) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String[] fieldsArr = fields.split(",");        queryResults = getCardAddressBasedOnCardNumber(logger, cardNumber);        String cardAddress = queryResults.get("NAME") + "\n" + commonPage.getAddressLineSeparated(queryResults);        query = "select distinct mi.description as mailIndicator from cards c\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "left join mail_indicators mi on mi.mail_indicator_oid = c.mail_indicator_oid\n" +                "left join m_clients mc on mc.client_mid = mi.client_mid\n" +                "left join m_customers mcust on mcust.client_mid = mc.client_mid\n" +                "left join cards c on c.customer_mid = mcust.customer_mid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "where mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'" +                " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") " +                "and c.card_no like '%" + cardNumber + "'";        queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][10]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'])[1]/div[@class='details'][10]/div/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            if (fieldNames.get(i).getText().equalsIgnoreCase("Card address")) {                commonPage.assertTwoStrings(logger, cardAddress.trim(), fieldValues.get(i).getText().trim(), fieldNames.get(i).getText());            }            if (fieldNames.get(i).getText().equalsIgnoreCase("Mail indicator")) {                commonPage.assertTwoStrings(logger, queryResults.get("MAILINDICATOR").trim(), fieldValues.get(i).getText().trim(), fieldNames.get(i).getText());            }        }    }    /*    Method to get card address     */    public Map<String, String> getCardAddressBasedOnCardNumber(Scenario logger, String cardNumber) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select a.address_oid,cc.card_contact_oid,cc.CONTACT_NAME as name,a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code from cards c\n" +                "left join card_contacts cc on cc.card_contact_oid = c.card_contact_oid\n" +                "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join addresses a on a.address_oid = (case WHEN cc.postal_address_oid is not null THEN cc.postal_address_oid ELSE cc.street_address_oid END)\n" +                "left join states s on s.state_oid = a.state_oid\n" +                "where  mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'" +                " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and c.card_no like '%" + cardNumber + "'";        queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        if (commonPage.getSpecificValueFromMapObject(queryResults, "CARD_CONTACT_OID").equalsIgnoreCase("")) {            query = "select a.address_oid,con.contact_oid,con.CONTACT_NAME as name,a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code from cards c\n" +                    "left join m_customers mcust on mcust.customer_mid = c.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join contact_types ct on ct.client_mid = mc.client_mid\n" +                    "left join contacts con on con.contact_type_oid = ct.contact_type_oid and con.member_oid = mcust.customer_mid\n" +                    "left join contacts cnts on cnts.contact_oid = case when c.card_contact_oid is not null THEN c.card_contact_oid ELSE con.contact_oid END\n" +                    "left join addresses a on a.address_oid = (case WHEN con.postal_address_oid is not null THEN con.postal_address_oid\n" +                    "ELSE con.street_address_oid END)\n" +                    "left join states s on s.state_oid = a.state_oid\n" +                    "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                    "where ct.description = 'Card Delivery' and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'\n" +                    " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";            logger.log(query);            queryResults = commonUtils.getQueryResultsOnMap(query);            if (commonPage.getSpecificValueFromMapObject(queryResults, "CONTACT_OID").equalsIgnoreCase("")) {                query = "select mcust.name as name,a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code from m_customers mcust\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join addresses a on a.address_oid = (case WHEN mcust.postal_address_oid is not null THEN mcust.postal_address_oid\n" +                        "ELSE mcust.street_address_oid END)\n" +                        "left join states s on s.state_oid = a.state_oid\n" +                        "left join cards c on c.customer_mid = mcust.customer_mid\n" +                        "where   mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'\n" +                        " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";                queryResults = commonUtils.getQueryResultsOnMap(query);            }            logger.log(query);        }        return queryResults;    }    /*    Method to validate card section of field values based on section name     */    public void validateCardSectionFieldValuesBasedOnSection(Scenario logger, String searchedFieldName, String sectionName, String fieldNames, String userName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String condition = "";        String cardNo = PropUtils.getPropValue(properties, "Cards-cardNumber").substring(PropUtils.getPropValue(properties, "Cards-cardNumber").length() - 6);        if (searchedFieldName.equalsIgnoreCase("customerNumber")) {            condition = "c.card_no like '%" + cardNo + "' and mcust.customer_no = '" + PropUtils.getPropValue(properties, "Cards-accountNumber") + "'";        } else if (searchedFieldName.equalsIgnoreCase("issuingCountry")) {            condition = "c.card_no like '%" + cardNo + "'  and mcust.customer_no = '" + PropUtils.getPropValue(properties, "Cards-accountNumber") + "'";        } else if (searchedFieldName.equalsIgnoreCase("driverName")) {            condition = "c.card_no like '%" + cardNo + "' and d.driver_name = '" + PropUtils.getPropValue(properties, "Cards-driverName") + "' and mcust.customer_no = '" + PropUtils.getPropValue(properties, "Cards-accountNumber") + "'";        } else if (searchedFieldName.equalsIgnoreCase("licensePlate")) {            condition = "c.card_no like '%" + cardNo + "' and v.license_plate = '" + PropUtils.getPropValue(properties, "Cards-licensePlate") + "' and mcust.customer_no = '" + PropUtils.getPropValue(properties, "Cards-accountNumber") + "'";        } else if (searchedFieldName.equalsIgnoreCase("costCentre")) {            condition = "c.card_no like '%" + cardNo + "' and ccc.customer_cost_centre_code = '" + PropUtils.getPropValue(properties, "Cards-costCentre") + "' and mcust.customer_no = '" + PropUtils.getPropValue(properties, "Cards-accountNumber") + "'";        } else if (searchedFieldName.equalsIgnoreCase("status")) {            condition = "c.card_no like '%" + cardNo + "' and cs.description = '" + PropUtils.getPropValue(properties, "Cards-status") + "' and mcust.customer_no = '" + PropUtils.getPropValue(properties, "Cards-accountNumber") + "'";        } else if (searchedFieldName.equalsIgnoreCase("cardNumber")) {            condition = "c.card_no like '%" + cardNo + "' and mcust.customer_no = '" + PropUtils.getPropValue(properties, "Cards-accountNumber") + "'";        }//        if (!basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {//            condition = condition + " and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'";//        }        if (sectionName.equalsIgnoreCase("Default")) {            validateDefaultSectionFieldValuesOfCardModule(logger, fieldNames, condition, userName);        } else if (sectionName.equalsIgnoreCase("Card Details")) {            validateCardDetailsExpandedSectionFieldValuesBasedOnSearchedCard(logger, fieldNames, condition);        } else if (sectionName.equalsIgnoreCase("Additional Details")) {            validateAdditionalDetailsSectionFieldValues(logger, fieldNames, condition);        } else if (sectionName.equalsIgnoreCase("Embossing")) {            validateEmbossingSectionFieldValues(logger, fieldNames, condition);        } else if (sectionName.equalsIgnoreCase("CardCControlProfile")) {            validateCardControlProfileSectionFieldValues(logger, fieldNames, condition);        } else if (sectionName.equalsIgnoreCase("PurchaseControls")) {            validatePurchaseControlsSectionFieldValues(logger, fieldNames, condition);        } else if (sectionName.equalsIgnoreCase("POSPrompts")) {            validatePOSPromptsSectionFieldValues(logger, fieldNames, condition);        } else if (sectionName.equalsIgnoreCase("Subscriptions")) {            validateSubscriptionSectionFieldValues(logger, fieldNames, condition);        } else if (sectionName.equalsIgnoreCase("DeliveryAddress")) {            validateDeliveryAddressSectionFieldValues(logger, fieldNames, PropUtils.getPropValue(properties, "Cards-cardNumber"));        }    }    /*    Method to validate card control profiles section field values     */    public void validateCardControlProfileModuleFieldValuesBasedOnSection(Scenario logger, String searchedField, String sectionName, String fields) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String condition = "";        if (searchedField.equalsIgnoreCase("cardControl")) {            condition = "ccp.description = '" + PropUtils.getPropValue(properties, "CardControlProfile-cardControl") + "' and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'";        }        if (sectionName.equalsIgnoreCase("Default")) {        }    }    /*    Method to validate card control default section field valisation     */    public void validateCardControlProfileDefaultViewSectionFieldValues(Scenario logger, String fields, String condition) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        queryResults = getCardAddressBasedOnCardNumber(logger, condition);        String cardAddress = queryResults.get("NAME") + "\n" + commonPage.getAddressLineSeparated(queryResults);        query = "select ccp.description as profileName, co.description as cardOffer,\n" +                "pr.description as products, c.description as type from card_control_profiles ccp\n" +                "left join card_offers co on co.card_offer_oid = ccp.card_offer_oid\n" +                "left join card_controls cc on cc.CARD_CONTROL_PROFILE_OID = ccp.CARD_CONTROL_PROFILE_OID\n" +                "left join product_restrictions pr on pr.PRODUCT_RESTRICTION_OID = cc.PRODUCT_RESTRICTION_OID\n" +                "left join constants c on c.constant_oid = ccp.PROFILE_CATEGORY_CID\n" +                "left join m_customers mcust on mcust.customer_mid = ccp.customer_mid\n" +                "where " + condition;        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("//thead[@role='rowgroup']/tr/th"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//tbody[@role='rowgroup']/tr)[1]/td"));        for (int i = 0; i <= fieldNames.size() - 1; i++) {            if (!fieldNames.get(i).getText().equalsIgnoreCase("Acqiuring country") && !fieldNames.get(i).getText().equalsIgnoreCase("Neworks") && !fieldNames.get(i).getText().equalsIgnoreCase("Sites")) {                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, fieldNames.get(i).getText().trim().replaceAll(" ", "").toUpperCase()), fieldValues.get(i).getText(), fieldNames.get(i).getText());            }        }    }    /*    Method to get transaction details based on reference     */    public String getTransactionDetailsBasedOnReference(String transactionOID, String fieldName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String fieldValue = "";        String dbContainTransactionTypes = "";        if (!PropUtils.getPropValue(properties, "transactionTypeInDB").equals("")) {            dbContainTransactionTypes = " and tt.description like " + PropUtils.getPropValue(properties, "transactionTypeInDB");        }        String dbNotContainTransactionTypes = "";        if (!PropUtils.getPropValue(properties, "notContainsTransactionTypes").equals("")) {            dbNotContainTransactionTypes = " and tt.description not in (" + PropUtils.getPropValue(properties, "notContainsTransactionTypes") + ")";        }        query = "select te.reference,mcust.customer_no as customerAccountNumber, te.location_no as locationID, \n" +                "te.customer_cost_centre_oid as CustomerCostCentreOid, te.driver_oid as driverOid,\n" +                "te.vehicle_oid as vehicleOid, te.card_no as cardNO from transaction_enquiry te\n" +                "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                "where te.transaction_oid = " + transactionOID;//        + "" +//                " and te.customer_no " + PropUtils.getPropValue(properties, "accountNumberInTransactionsModule");        queryResults = commonUtils.getQueryResultsOnMap(query);        if (fieldName.equalsIgnoreCase("cardNO")) {            if (PropUtils.getPropValue(properties, "searchFieldName").equalsIgnoreCase("status")) {                fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "CARDNO");                query = "select c.description as status,te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                        "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join constants c on c.constant_oid = te.pos_transaction_status_cid\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                        ") and  te.CARD_No = " + fieldValue + " and te.transaction_oid = " + transactionOID + "\n" +                        "" + dbContainTransactionTypes + "\n" +                        "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 and c.description = 'Posted'\n" +                        "order by te.effective_at desc";            } else {                fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "CARDNO");                query = "select te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                        "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                        ") and  te.CARD_No = " + fieldValue + " and te.transaction_oid = " + transactionOID + "\n" + dbContainTransactionTypes + "\n" +                        "\n" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 \n" +                        "order by te.effective_at desc";            }        } else if (fieldName.equalsIgnoreCase("cAccountNo") || fieldName.equalsIgnoreCase("accountNumber")) {            fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERACCOUNTNUMBER");            query = "select te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                    "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                    "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                    ") and   mcust.customer_no = '" + fieldValue + "' and te.transaction_oid = " + transactionOID + "\n" +                    "" + dbContainTransactionTypes + "\n" +                    "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 \n" +                    "order by te.effective_at desc";        } else if (fieldName.equalsIgnoreCase("transRef")) {            fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "REFERENCE");            query = "select te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                    "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                    "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                    ")  and te.reference = '" + fieldValue + "' and te.transaction_oid = " + transactionOID + "\n" +                    "" + dbContainTransactionTypes + "\n" +                    "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 \n" +                    "order by te.effective_at desc";        } else if (fieldName.equalsIgnoreCase("siteLocationId")) {            fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "LOCATIONID");            query = "select te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                    "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                    "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                    ") and  te.location_no = '" + fieldValue + "' and te.transaction_oid = " + transactionOID + "\n" +                    "" + dbContainTransactionTypes + "\n" +                    "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 \n" +                    "order by te.effective_at desc";        } else if (fieldName.equalsIgnoreCase("costCentre")) {            query = "select CUSTOMER_COST_CENTRE_CODE as costCentre from customer_cost_centres where customer_cost_centre_oid = " + queryResults.get("CUSTOMERCOSTCENTREOID");            queryResults = commonUtils.getQueryResultsOnMap(query);            if (queryResults.size() == 0) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);            } else {                fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "COSTCENTRE");                if (fieldValue.length() < 3) {                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                    PropUtils.setProps("skipReason", "This scenario will be skipped because length of cost centre is less than 3 " + fieldName, baseUtils.testDataFilePath);                } else {                    query = "select te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                            "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                            "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                            "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = te.customer_cost_centre_oid\n" +                            "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                            ") and   ccc.CUSTOMER_COST_CENTRE_CODE = '" + fieldValue + "' and te.transaction_oid = " + transactionOID + "\n" +                            "" + dbContainTransactionTypes + "\n" +                            "" + dbNotContainTransactionTypes +                            "and te.effective_at < sysdate and te.effective_at > sysdate-900 \n" +                            "order by te.effective_at desc";                }            }        } else if (fieldName.equalsIgnoreCase("Dname")) {            query = "select driver_Name as driverName from drivers where driver_oid = " + queryResults.get("DRIVEROID");            queryResults = commonUtils.getQueryResultsOnMap(query);            if (queryResults.size() == 0) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);            } else {                fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "DRIVERNAME");                query = "select te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                        "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join drivers d on d.driver_oid = te.driver_oid\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                        ") and   d.driver_name = '" + fieldValue + "' and te.transaction_oid = " + transactionOID + "\n" +                        "" + dbContainTransactionTypes + "\n" +                        "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 \n" +                        "order by te.effective_at desc";            }        } else if (fieldName.equalsIgnoreCase("vlPlate")) {            query = "select LICENSE_PLATE from vehicles where vehicle_oid = " + queryResults.get("CUSTOMERCOSTCENTREOID");            queryResults = commonUtils.getQueryResultsOnMap(query);            if (queryResults.size() == 0) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);            } else {                fieldValue = queryResults.get("LICENSE_PLATE");                query = "select te.transaction_oid, te.reference, mcust.customer_no from transaction_enquiry te\n" +                        "inner join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "inner join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join vehicles v on v.vehicle_oid = te.vehicle_oid\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                        ") and   v.LICENSE_PLATE = '" + fieldValue + "' and te.transaction_oid = " + transactionOID + "\n" +                        "" + dbContainTransactionTypes + "\n" +                        "" + dbNotContainTransactionTypes + " and te.effective_at < sysdate and te.effective_at > sysdate-900 \n" +                        "order by te.effective_at desc";            }        }        queryResults = commonUtils.getQueryResultsOnMap(query);        if (queryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);        } else {            PropUtils.setProps("TransactionOID", queryResults.get("TRANSACTION_OID"), baseUtils.testDataFilePath);            PropUtils.setProps("LatestTransactionReference", queryResults.get("REFERENCE"), baseUtils.testDataFilePath);            PropUtils.setProps("accountNumberInTransactionsModule", queryResults.get("CUSTOMER_NO"), baseUtils.testDataFilePath);        }        if (fieldValue == null) {            return "";        } else {            return fieldValue;        }    }    /*    Method to get field values of Sundry transaction customer breakdown     */    /*    Method to validate field values based on section and transaction type     */    public void validateFieldValuesBasedOnSection(Scenario logger, String sectionName, String values, String transactionType) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        int recordPosition = 1;        List<WebElement> fieldNames = null;        List<WebElement> fieldValues = null;        List<WebElement> customerOrMerchantLines = null;        Map<String, String> currentSectionDBFieldValues = null;        List<Map<String, String>> currentSectionDBFieldValuesList = null;        if (sectionName.trim().equalsIgnoreCase("AdditionalInformation")) {            fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='detail-grid-section border-bottom'])[" + recordPosition + "]/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));            fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='detail-grid-section border-bottom'])[" + recordPosition + "]/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));            currentSectionDBFieldValues = getAdditionInformationSectionFieldValues(logger);            for (int i = 0; i < fieldNames.size() - 1; i++) {                if (fieldNames.get(i).getText().trim().equalsIgnoreCase("Second Card Number")) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get("Secondcardnumber"), fieldValues.get(i).getText(), "SecondCardNumber");                } else {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());                }            }        }        if (sectionName.trim().equalsIgnoreCase("AdditionalDetails") && transactionType.equalsIgnoreCase("sundry")) {            query = "select detailed_note from transaction_enquiry where\n" +                    "reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'\n" +                    "and transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + "\n" +                    "and customer_no " + PropUtils.getPropValue(properties, "accountNumberInTransactionsModule");            queryResults = commonUtils.getQueryResultsOnMap(query);            commonPage.assertTwoStrings(logger, queryResults.get("DETAILED_NOTE"), basePage.userGetTextFromWebElement(logger, By.cssSelector("mat-dialog-content[class='popup-content mat-dialog-content ng-star-inserted']>div>div")), "Detailed Note");            commonPage.assertTwoStrings(logger, "Additional transaction details", basePage.userGetTextFromWebElement(logger, By.cssSelector("h2[class='mat-dialog-title']")), "Dialog box header");//            commonPage.clickButtonUsingSpan(logger, "Close");        } else if (sectionName.trim().equalsIgnoreCase("CustomerTransactionBreakdown") && transactionType.contains("Purchase")) {            currentSectionDBFieldValuesList = getCustomerOrMerchantBreakDownFieldValues("Customer");            customerOrMerchantLines = basePage.getListOfElements(logger, By.xpath("(//div[@class='trans-expansion-details ng-star-inserted']/div/div/div/div[@class='price-table']/table)[" + recordPosition + "]/tbody[@class='ng-star-inserted']"));            fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='trans-expansion-details ng-star-inserted']/div/div/div/div[@class='price-table']/table)[" + recordPosition + "]/thead/tr[@class='panel-expanded-field-label']/th"));            for (int i = 0; i <= customerOrMerchantLines.size() - 1; i++) {                fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='trans-expansion-details ng-star-inserted']/div/div/div/div[@class='price-table']/table)[" + recordPosition + "]/tbody[@class='ng-star-inserted'][" + (i + 1) + "]/tr/td"));                int j = 0;                for (j = 0; j < fieldNames.size() - 1; j++) {                    if (fieldNames.get(j).getText().equalsIgnoreCase("Product")) {                        commonPage.assertTwoStrings(logger, currentSectionDBFieldValuesList.get(i).get(fieldNames.get(j).getText().trim().replaceAll(" ", "")), basePage.userGetTextFromWebElement(logger, By.xpath("(//div[@class='trans-expansion-details ng-star-inserted']/div/div/div/div[@class='price-table']/table)[" + recordPosition + "]/tbody[@class='ng-star-inserted'][" + (i + 1) + "]/tr/td/span")), fieldNames.get(j).getText());                    } else if (!fieldNames.get(j).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Unitprice") && !fieldNames.get(j).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Product") && !fieldNames.get(j).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Productcode")) {                        commonPage.assertTwoStrings(logger, currentSectionDBFieldValuesList.get(i).get(fieldNames.get(j).getText().trim().replaceAll(" ", "")), fieldValues.get(j).getText(), fieldNames.get(j).getText());                    }                }                basePage.userClick(logger, By.xpath("(//div[@class='trans-expansion-details ng-star-inserted']/div/div/div/div[@class='price-table']/table)[" + recordPosition + "]/tbody[@class='ng-star-inserted'][" + (i + 1) + "]/div/span[contains(text(),'Show details')]"));                List<WebElement> innerFieldNames = basePage.getListOfElements(logger, By.cssSelector("div[class='inner-information']>div>div"));                List<WebElement> innerFieldValues = basePage.getListOfElements(logger, By.cssSelector("div[class='inner-information']>div>span"));                for (int k = 0; k < innerFieldNames.size() - 1; k++) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValuesList.get(i).get(innerFieldNames.get(k).getText().trim().replaceAll(" ", "")), innerFieldValues.get(k).getText(), innerFieldNames.get(k).getText());                }                basePage.userClick(logger, By.xpath("//span[contains(text(),'Hide details')]"));            }        } else if (sectionName.trim().equalsIgnoreCase("CustomerTransactionBreakdown") && transactionType.equalsIgnoreCase("Sundry")) {            currentSectionDBFieldValues = getSundryCustomerBreakDownFieldValues();            fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='price-table'])[" + recordPosition + "]/table/thead/tr/th"));            fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='price-table'])[" + recordPosition + "]/table/tbody/tr/td"));            for (int i = 0; i < fieldNames.size() - 1; i++) {                commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());            }        } else if (sectionName.trim().equalsIgnoreCase("CustomerAmount")) {            fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='table-amount-section'])[" + recordPosition + "]/div/div"));            fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='table-amount-section'])[" + recordPosition + "]/div/span"));            currentSectionDBFieldValues = getCustomerOrMerchantAmountFieldValues("Customer");            for (int i = 0; i < fieldNames.size() - 1; i++) {                commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());            }        } else if (sectionName.trim().equalsIgnoreCase("TransactionDetail")) {            if (transactionType.equalsIgnoreCase("Purchase") || transactionType.equalsIgnoreCase("Purchase Refund") || transactionType.equalsIgnoreCase("Purchase Return")) {                fieldNames = basePage.getListOfElements(logger, By.cssSelector("div[class='popup-section ng-star-inserted']>mat-dialog-content>div>mat-grid-list>div>mat-grid-tile>figure>div>div[class='panel-expanded-field-label']"));                fieldValues = basePage.getListOfElements(logger, By.xpath("//div[@class='popup-section ng-star-inserted']/mat-dialog-content/div/mat-grid-list/div/mat-grid-tile/figure/div/div[contains(@class,'panel-expanded-field-text')]"));            } else {                fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='detail-grid-section'])[" + recordPosition + "]/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));                fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='detail-grid-section'])[" + recordPosition + "]/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));            }            currentSectionDBFieldValues = getTransactionDetailsFieldValues(transactionType);            for (int i = 0; i < fieldNames.size() - 1; i++) {                if (fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Locationaddress")) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")).replaceAll(" ", ""), fieldValues.get(i).getText().replaceAll(" ", ""), fieldNames.get(i).getText());                }                if (!fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Postedtime") && (!fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Locationaddress")) && (!fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("LocationID"))) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());                }            }        } else if (sectionName.trim().equalsIgnoreCase("OriginalValue")) {            fieldNames = basePage.getListOfElements(logger, By.xpath("//div[@class='border-bottom original-value-section']/div[2]/div"));            fieldValues = basePage.getListOfElements(logger, By.xpath("//div[@class='border-bottom original-value-section']/div[2]/span"));            currentSectionDBFieldValues = getTransactionDetailsFieldValues(transactionType);            for (int i = 0; i <= fieldNames.size() - 1; i++) {                commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());            }        } else if (sectionName.trim().equalsIgnoreCase("MerchantTransactionBreakdown")) {//            JavascriptExecutor js = ((JavascriptExecutor) driver);//            js.executeScript("arguments[0].scrollIntoView(true);", basePage.getWebElementUsingLocator(logger, By.cssSelector("div[class='detail-grid']>div")));//            commonPage.sleepForFewSeconds(2);            currentSectionDBFieldValuesList = getCustomerOrMerchantBreakDownFieldValues("Merchant");            fieldNames = basePage.getListOfElements(logger, By.cssSelector("div[class='price-table ng-star-inserted']>table>thead>tr>th"));            customerOrMerchantLines = basePage.getListOfElements(logger, By.cssSelector("div[class='popup-section ng-star-inserted']>mat-dialog-content>div>div>table>tbody[class='ng-star-inserted']"));            for (int i = 0; i <= customerOrMerchantLines.size() - 1; i++) {                fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='price-table ng-star-inserted']/table/tbody)[" + (i + 1) + "]/tr/td"));                for (int j = 0; j < fieldNames.size() - 1; j++) {                    if (!fieldNames.get(j).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Unitprice") && !fieldNames.get(j).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Product") && !fieldNames.get(j).getText().trim().replaceAll(" ", "").equalsIgnoreCase("ProductCode")) {                        commonPage.assertTwoStrings(logger, currentSectionDBFieldValuesList.get(i).get(fieldNames.get(j).getText().trim().replaceAll(" ", "")), fieldValues.get(j).getText(), fieldNames.get(j).getText());                    }                }                basePage.userClick(logger, By.xpath("(//div[@class='popup-section ng-star-inserted']/mat-dialog-content/div/div/table/tbody/div/span[contains(text(),'Show details')])[" + (i + 1) + "]"));                List<WebElement> innerFieldNames = basePage.getListOfElements(logger, By.xpath("//div[@class='popup-section ng-star-inserted']/mat-dialog-content/div/div/table/tbody/div[@class='ng-star-inserted']/div/div[@class='inner-information']/div/div"));                List<WebElement> innerFieldValues = basePage.getListOfElements(logger, By.xpath("//div[@class='popup-section ng-star-inserted']/mat-dialog-content/div/div/table/tbody/div[@class='ng-star-inserted']/div/div[@class='inner-information']/div/span"));                for (int k = 0; k < innerFieldNames.size() - 1; k++) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValuesList.get(i).get(innerFieldNames.get(k).getText().trim().replaceAll(" ", "")), innerFieldValues.get(k).getText(), innerFieldNames.get(k).getText());                }                basePage.userClick(logger, By.xpath("//span[contains(text(),'Hide details')]"));            }        } else if (sectionName.trim().equalsIgnoreCase("MerchantAmount")) {//            fieldNames = basePage.getListOfElements(logger, By.cssSelector("div[class='table-amount-section ng-star-inserted']>div>div"));//            fieldValues = basePage.getListOfElements(logger, By.cssSelector("div[class='table-amount-section ng-star-inserted']>div>span"));            currentSectionDBFieldValues = getCustomerOrMerchantAmountFieldValues("Merchant");//            for (int i = 0; i < fieldNames.size() - 1; i++) {//                commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText().replaceAll(",", ""), fieldNames.get(i).getText());//            }            fieldNames = basePage.getListOfElements(logger, By.xpath("//div[@class='table-amount-section ng-star-inserted']/div/div[contains(@class,'total-left')]"));            fieldValues = basePage.getListOfElements(logger, By.xpath("//div[@class='table-amount-section ng-star-inserted']/div/span"));            for (int i = 0; i <= fieldNames.size() - 1; i++) {                commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());            }            fieldNames = basePage.getListOfElements(logger, By.xpath("//div[@class='table-amount-section ng-star-inserted']/div[3]/div/div[contains(@class,'total-left')]"));            fieldValues = basePage.getListOfElements(logger, By.xpath("//div[@class='table-amount-section ng-star-inserted']/div[3]/div/span"));            for (int i = 0; i <= fieldNames.size() - 1; i++) {                commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());            }        }    }    public Map<String, String> getSundryCustomerBreakDownFieldValues() {        mapObject.clear();        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String currencyCode = PropUtils.getPropValue(properties, "CurrencyCode");        String customerNoForTransaction = "";        if (!PropUtils.getPropValue(properties, "accountNumberInTransactionsModule").equalsIgnoreCase("")) {            customerNoForTransaction = " and te.customer_no = " + PropUtils.getPropValue(properties, "accountNumberInTransactionsModule");        }        query = "select p.description,te.customer_tax_amount,te.customer_amount from products p\n" +                "left join transaction_enquiry te on te.product_oid = p.product_oid\n" +                "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") +                "' and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction;        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.put("Product", queryResults.get("DESCRIPTION"));        mapObject.put("Taxtotal", commonPage.addCommasToNumericString(commonPage.truncateDecimal(Double.parseDouble(queryResults.get("CUSTOMER_TAX_AMOUNT")), 2)) + " " + currencyCode);        mapObject.put("Customertotal", commonPage.addCommasToNumericString(commonPage.truncateDecimal(Double.parseDouble(queryResults.get("CUSTOMER_AMOUNT")), 2)) + " " + currencyCode);        return mapObject;    }    /*    Method to get field values of Additional Information section     */    public Map<String, String> getAdditionInformationSectionFieldValues(Scenario logger) {        if (mapObject != null) {            if (!mapObject.isEmpty()) {                mapObject.clear();            }        }        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String customerNoForTransaction = "";        if (!PropUtils.getPropValue(properties, "accountNumberInTransactionsModule").equalsIgnoreCase("")) {            customerNoForTransaction = " and te.customer_no = " + PropUtils.getPropValue(properties, "accountNumberInTransactionsModule");        }        query = "select ccc.CUSTOMER_COST_CENTRE_CODE as costCentre from customer_cost_centres ccc\n" +                "inner join transaction_enquiry te on te.CUSTOMER_COST_CENTRE_OID = ccc.CUSTOMER_COST_CENTRE_OID\n" +                "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                " and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction;        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.put("Costcentre", commonPage.getSpecificValueFromMapObject(queryResults, "COSTCENTRE"));        query = "select v.LICENSE_PLATE from vehicles v\n" +                "inner join transaction_enquiry te on te.vehicle_oid = v.vehicle_oid\n" +                "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                " and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction;        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.put("Licenseplate", commonPage.getSpecificValueFromMapObject(queryResults, "LICENSE_PLATE"));        query = "select d.driver_id from drivers d\n" +                "inner join transaction_enquiry te on te.driver_oid = d.driver_oid\n" +                "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                " and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction;        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.put("DriverID", commonPage.getSpecificValueFromMapObject(queryResults, "DRIVER_ID"));        query = "select pos_entry_2 as fleet_id from pos_transactions pt\n" +                "inner join transaction_enquiry te on te.pos_transaction_oid = pt.pos_transaction_oid\n" +                "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                " and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction;        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.put("FleetID", commonPage.getSpecificValueFromMapObject(queryResults, "FLEET_ID"));        query = "select SUBSTR(extra_card_no, LENGTH(extra_card_no) - 4, 5) as secondCardNumber,odometer from transaction_enquiry where reference = '" +                PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                " and transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID");        queryResults = commonUtils.getQueryResultsOnMap(query);        if (commonPage.getSpecificValueFromMapObject(queryResults, "SECONDCARDNUMBER").equals("")) {            mapObject.put("Secondcardnumber", commonPage.getSpecificValueFromMapObject(queryResults, "SECONDCARDNUMBER"));        } else {            mapObject.put("Secondcardnumber", "****" + commonPage.getSpecificValueFromMapObject(queryResults, "SECONDCARDNUMBER"));        }        mapObject.put("Odometer", commonPage.getSpecificValueFromMapObject(queryResults, "ODOMETER"));        return mapObject;    }    /*    Method to get field values of Customer or Merchant Transaction breakdown section     */    public List<Map<String, String>> getCustomerOrMerchantBreakDownFieldValues(String typeOfValues) {        mapObject.clear();        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String customerNoForTransaction = "";        if (!PropUtils.getPropValue(properties, "accountNumberInTransactionsModule").equalsIgnoreCase("")) {            customerNoForTransaction = " and te.customer_no = " + PropUtils.getPropValue(properties, "accountNumberInTransactionsModule");        }        String currencyCode = PropUtils.getPropValue(properties, "CurrencyCode");        query = "select distinct tlie.line_number, tlie.PRODUCT_DESCRIPTION as product,tlie.quantity as numberOfUnits,\n" +                "tlie.CUSTOMER_UNIT_PRICE as customerUnitPrice, tlie.customer_value as customerTotal_Incl_tax_and_rebate,\n" +                " tlie.tax_rate as taxRate, tlie.customer_tax_amount as customerTotalTax, te.Fee_Total_amount as fees,\n" +                " te.customer_amount as customerAmount, te.customer_tax_amount as customerTotalTaxes,\n" +                " te.customer_rebate_total as customerTotalRebates,\n" +                " tlie.merchant_UNIT_PRICE as merchatUnitPrice, tlie.merchant_value as merchantTotal_Incl_tax_and_rebate,\n" +                " tlie.merchant_tax_amount as merchantTotalTax,\n" +                " te.merchant_amount as merchantAmount, te.merchant_tax_amount as merChantTotalTaxes,\n" +                " te.merchant_rebate_total as merchantTotalRebates from transaction_line_items_enquiry tlie\n" +                "inner join transaction_enquiry te on te.transaction_oid = tlie.transaction_oid\n" +                "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                " and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction +                " order by tlie.line_number asc";        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        List<Map<String, String>> allLineItems = new ArrayList<>();        for (int i = 0; i <= allRowsOfQueryResults.size() - 1; i++) {            mapObject.put("Product", allRowsOfQueryResults.get(i).get("PRODUCT"));            mapObject.put("Numberofunits", commonPage.addCommasToNumericString(commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("NUMBEROFUNITS")), 2)));            mapObject.put("Fees", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("FEES")), 2) + " " + currencyCode);            mapObject.put("Taxrate", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("TAXRATE")),2));            if (typeOfValues.equalsIgnoreCase("Customer")) {                mapObject.put("Unitprice", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("CUSTOMERUNITPRICE")), 4) + " " + currencyCode);                mapObject.put("Total(Incl.taxandrebate)", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("CUSTOMERTOTAL_INCL_TAX_AND_REBATE")), 2) + " " + currencyCode);                mapObject.put("Totaltax", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("CUSTOMERTOTALTAX")), 2) + " " + currencyCode);                mapObject.put("Customeramount", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("CUSTOMERAMOUNT")), 2) + " " + currencyCode);                mapObject.put("Totaltaxes", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("CUSTOMERTOTALTAXES")), 2) + " " + currencyCode);                mapObject.put("Totalrebates", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("CUSTOMERTOTALREBATES")), 2) + " " + currencyCode);            } else if (typeOfValues.equalsIgnoreCase("Merchant")) {                mapObject.put("Unitprice", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("MERCHATUNITPRICE")), 4) + " " + currencyCode);                mapObject.put("Total(Incl.taxandrebate)", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("MERCHANTTOTAL_INCL_TAX_AND_REBATE")), 2) + " " + currencyCode);                mapObject.put("Totaltax", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("MERCHANTTOTALTAX")), 2) + " " + currencyCode);                mapObject.put("Merchantamount", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("MERCHANTAMOUNT")), 2) + " " + currencyCode);                mapObject.put("Totaltaxes", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("MERCHANTTOTALTAXES")), 2) + " " + currencyCode);                mapObject.put("Totalrebates", commonPage.truncateDecimal(Double.parseDouble(allRowsOfQueryResults.get(i).get("MERCHANTTOTALREBATES")), 2) + " " + currencyCode);            }            allLineItems.add(new HashMap(mapObject));            mapObject.clear();        }        return allLineItems;    }    /*    Method to get CustomerAmount or Merchant Amount field values     */    public Map<String, String> getCustomerOrMerchantAmountFieldValues(String typeOfValues) {        mapObject.clear();        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String currencyCode = PropUtils.getPropValue(properties, "CurrencyCode");        query = "select Fee_Total_amount as fees,\n" +                " customer_amount as customerAmount, customer_tax_amount as customerTotalTaxes,\n" +                " customer_rebate_total as customerTotalRebates,\n" +                " merchant_amount as merchantAmount, merchant_tax_amount as merChantTotalTaxes,\n" +                " merchant_rebate_total as merchantTotalRebates from transaction_enquiry \n" +                "where reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                " and transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID");        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.put("Fees", commonPage.truncateDecimal(Double.parseDouble(queryResults.get("FEES")), 2) + " " + currencyCode);        String customerAmount = "";        if (typeOfValues.equalsIgnoreCase("Customer")) {            customerAmount = queryResults.get("CUSTOMERAMOUNT");            if (customerAmount.contains("-")) {                customerAmount = customerAmount.replace("-", "");            }            mapObject.put("Customeramount", commonPage.addCommasToNumericString(commonPage.truncateDecimal(Double.parseDouble(customerAmount), 2)) + " " + currencyCode);            mapObject.put("Totaltaxes", commonPage.getSpecificValueFromMapObject(queryResults,"CUSTOMERTOTALTAXES") + " " + currencyCode);            mapObject.put("Totalrebates", commonPage.truncateDecimal(Double.parseDouble(queryResults.get("CUSTOMERTOTALREBATES")), 2) + " " + currencyCode);        } else if (typeOfValues.equalsIgnoreCase("Merchant")) {            mapObject.put("Merchantamount", commonPage.addCommasToNumericString(commonPage.truncateDecimal(Double.parseDouble(queryResults.get("MERCHANTAMOUNT")), 2)) + " " + currencyCode);            mapObject.put("Totaltaxes", commonPage.getSpecificValueFromMapObject(queryResults,"MERCHANTTOTALTAXES") + " " + currencyCode);            mapObject.put("Totalrebates", commonPage.truncateDecimal(Double.parseDouble(queryResults.get("MERCHANTTOTALREBATES")), 2) + " " + currencyCode);        }        return mapObject;    }    /*    Method to get field values of Transaction Details section     */    public Map<String, String> getTransactionDetailsFieldValues(String transactionType) {        mapObject.clear();        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String customerNoForTransaction = "";        if (!PropUtils.getPropValue(properties, "accountNumberInTransactionsModule").equalsIgnoreCase("")) {            customerNoForTransaction = " and te.customer_no = " + PropUtils.getPropValue(properties, "accountNumberInTransactionsModule");        }        if (transactionType.equalsIgnoreCase("Purchase") || transactionType.equalsIgnoreCase("Purchase Refund") || transactionType.equalsIgnoreCase("Purchase Return")) {            query = " select tt.description as transactionType,te.merchant_no,te.CUSTOMER_MID,te.POSTED_AT,te.Location_No,te.card_type_description,\n" +                    "ct.description as capturetype,te.account_no,te.Authorisation_no,te.stan,te.batch_number,te.invoice_no,\n" +                    "te.trans_original_amount as totalAmount from transaction_enquiry te\n" +                    "inner join capture_types ct on ct.capture_type_oid = te.capture_type_oid\n" +                    "left join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n"+                    "where reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "' and" +                    " transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID");            queryResults = commonUtils.getQueryResultsOnMap(query);            mapObject.put("postedtime", commonPage.getSpecificValueFromMapObject(queryResults, "POSTED_AT"));            mapObject.put("LocationID", commonPage.getSpecificValueFromMapObject(queryResults, "LOCATION_NO"));            mapObject.put("Cardtype", commonPage.getSpecificValueFromMapObject(queryResults, "CARD_TYPE_DESCRIPTION"));            mapObject.put("Authorizationnumber", commonPage.getSpecificValueFromMapObject(queryResults, "AUTHORISATION_NO"));            mapObject.put("STAN", commonPage.getSpecificValueFromMapObject(queryResults, "STAN"));            mapObject.put("Batchnumber", commonPage.getSpecificValueFromMapObject(queryResults, "BATCH_NUMBER"));            mapObject.put("Capturetype", commonPage.getSpecificValueFromMapObject(queryResults, "CAPTURETYPE"));            mapObject.put("Totalamount", commonPage.addCommasToNumericString(commonPage.truncateDecimal(Double.parseDouble(queryResults.get("TOTALAMOUNT")), 2)) + " " + PropUtils.getPropValue(properties, "CurrencyCode"));            mapObject.put("TransactionType", commonPage.getSpecificValueFromMapObject(queryResults,"TRANSACTIONTYPE"));            mapObject.put("MerchantNumber", commonPage.getSpecificValueFromMapObject(queryResults,"MERCHANT_NO"));            String locationNo = queryResults.get("LOCATION_NO");            query = "select name from m_customers where customer_no = " + queryResults.get("ACCOUNT_NO") + " and customer_mid = " + queryResults.get("CUSTOMER_MID");            queryResults = commonUtils.getQueryResultsOnMap(query);            mapObject.put("Accountname", queryResults.get("NAME"));            query = "select POSTAL_ADDRESS_OID as postalAddress,STREET_ADDRESS_OID as streetAddress\n" +                    "from m_locations where location_no = '" + locationNo + "' and client_mid = " + PropUtils.getPropValue(properties, "ClientMID");            queryResults = commonUtils.getQueryResultsOnMap(query);            query = "select a.suburb,s.description as state,a.postal_code from addresses a\n" +                    "left join states s on s.state_oid = a.state_oid\n" +                    "where address_oid = " + queryResults.get("STREETADDRESS");            queryResults = commonUtils.getQueryResultsOnMap(query);            String locationAddress = "";            if (!commonPage.getSpecificValueFromMapObject(queryResults, "SUBURB").equals("")) {                locationAddress = queryResults.get("SUBURB");            }            if (!commonPage.getSpecificValueFromMapObject(queryResults, "STATE").equals("")) {                if (commonPage.getSpecificValueFromMapObject(queryResults, "SUBURB").equals("")) {                    locationAddress = locationAddress + queryResults.get("STATE");                } else {                    locationAddress = locationAddress + "," + queryResults.get("STATE");                }            }            if (!commonPage.getSpecificValueFromMapObject(queryResults, "POSTAL_CODE").equals("")) {                if (commonPage.getSpecificValueFromMapObject(queryResults, "STATE").equals("")) {                    locationAddress = locationAddress + "," + queryResults.get("POSTAL_CODE");                } else {                    locationAddress = locationAddress + "," + queryResults.get("POSTAL_CODE");                }            }            mapObject.put("Locationaddress", locationAddress);            query = "select remittance_id from detail_groups dg\n" +                    "inner join detail_group_trans dgt on dgt.detail_group_oid = dg.detail_group_oid\n" +                    "inner join transaction_enquiry te on te.transaction_oid = dgt.transaction_oid\n" +                    "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference")                    + "' and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction;            queryResults = commonUtils.getQueryResultsOnMap(query);            mapObject.put("Invoicenumber", commonPage.getSpecificValueFromMapObject(queryResults, "REMITTANCE_ID"));        } else {            query = "select te.APPROVED_BY,dg.remittance_id, at.description as adjType, pt.description as adjProduct,\n" +                    "te.CHEQUE_NO, te.SUPPLIED_REMITTANCE_ID from transaction_enquiry te\n" +                    "left join detail_group_trans dgt on dgt.transaction_oid = te.transaction_oid\n" +                    "left join detail_groups dg on dg.detail_group_oid = dgt.detail_group_oid\n" +                    "left join adjustment_types at on at.ADJUSTMENT_TYPE_OID = te.adjustment_type_oid\n" +                    "left join product_translations pt on pt.product_oid = te.product_oid\n" +                    "where te.reference = '" + PropUtils.getPropValue(properties, "LatestTransactionReference") + "'" +                    " and te.transaction_oid = " + PropUtils.getPropValue(properties, "TransactionOID") + customerNoForTransaction;            queryResults = commonUtils.getQueryResultsOnMap(query);            mapObject.put("Approval", queryResults.get("APPROVED_BY"));            mapObject.put("Invoicenumber", queryResults.get("INVOICE_NO"));            mapObject.put("Adjtype", queryResults.get("ADJTYPE"));            mapObject.put("Adjproduct", queryResults.get("ADJPRODUCT"));            mapObject.put("Chequeno", queryResults.get("CHEQUE_NO"));            mapObject.put("RemittanceID", queryResults.get("SUPPLIED_REMITTANCE_ID"));        }        return mapObject;    }    /*    Authorisations related methods     */    /*    Get Authorization record based on field name     */    public String getAuthorizationRecordBasedOnFieldName(Scenario logger, String authOID, String fieldName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String clientQuery = "select processing_date from m_clients where client_mid = "+PropUtils.getPropValue(properties,"ClientMID");        Map<String, String>clientProcessingQR = commonUtils.getQueryResultsOnMap(clientQuery);        String clientProcessingDate = commonPage.getDesiredDateInSpecificFormat(logger,clientProcessingQR.get("PROCESSING_DATE"),0,"future","yyyy-MM-dd HH:mm:ss","dd, MMMM YYYY");//        selectCustomDateForAuthorisationModule(clientProcessingDate);        String fieldValue = "";        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {            query = "SELECT DISTINCT\n" +                    "    cust.customer_no    AS account_no,\n" +                    "    l.location_no,\n" +                    "    pt.description      AS product_description,\n" +                    "    t.CURRENCY_CODE,t.AUTH_TRANSACTION_LOG_OID as authOID,t.reference,t.CARD_NO as cardNo, cust.customer_no as customerAccountNumber, t.stan as traceNumber,\n" +                    "    t.location_code as locationId, t.driver_ID as driverID, t.vehicle_ID as vehicleID,\n" +                    "    ccc.customer_cost_centre_code,\n" +                    "    tasv.auth_status_cid,\n" +                    "    d.driver_name,\n" +                    "    d.driver_id         AS card_driver_id,\n" +                    "    v.description       AS vehicle_description,\n" +                    "    v.license_plate,\n" +                    "    v.vehicle_id        AS card_vehicle_id,\n" +                    "    c.currency_code     AS original_currency_code_char,\n" +                    "    cust.name           AS customer_name\n" +                    "FROM\n" +                    "         auth_transaction_logs t\n" +                    "    INNER JOIN trans_auth_status_view     tasv ON tasv.auth_transaction_log_oid = t.auth_transaction_log_oid\n" +                    "    LEFT JOIN auth_trans_line_items      atli ON atli.auth_transaction_log_oid = t.auth_transaction_log_oid \n" +                    "    INNER JOIN external_client_ids    eci  ON eci.external_client_id_oid = (select external_client_id_oid from auth_acquiring_inst where acquiring_inst_id = t.forwarding_institution_id || '-' || t.acquir_institution_id)\n" +                    "                                              AND eci.client_mid = t.client_mid \n" +                    "    LEFT JOIN product_translations  pt ON pt.product_oid = atli.product_oid \n" +                    "                                                AND pt.external_code = atli.product_code \n" +                    "                                                and pt.external_client_id_oid = eci.external_client_id_oid \n" +                    "    LEFT JOIN m_customers                cust ON cust.customer_mid = t.customer_mid\n" +                    "    INNER JOIN cards                      c ON c.card_no = t.card_no\n" +                    "    LEFT JOIN drivers                    d ON d.card_oid = c.card_oid\n" +                    "    LEFT JOIN vehicles                   v ON v.card_oid = c.card_oid\n" +                    "    LEFT JOIN cost_centres               cc ON c.card_oid = cc.card_oid\n" +                    "                                 AND to_date(t.date_time_effective, 'yyyymmddhh24miss') >= cc.effective_on\n" +                    "    LEFT JOIN customer_cost_centres      ccc ON ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                    "    LEFT JOIN m_locations                l ON ( nls_lower(l.external_code) = nls_lower(t.location_code)\n" +                    "                                 OR nls_lower(l.location_no) = nls_lower(t.location_code) )\n" +                    "                               AND l.client_mid = t.client_mid\n" +                    "    LEFT JOIN currencies                 c ON t.original_currency_code = c.iso_currency_no\n" +                    "    inner join m_clients mc  on mc.client_mid = cust.client_mid\n" +                    "WHERE nvl(atli.line_number, 1) = 1\n" +                    "    and TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') <= mc.processing_date and \n" +                    "TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') >= mc.processing_date-90\n" +                    "--     and cust.customer_no in ('00300045')";//                    "    order by t.date_time_effective desc";        } else {            query = "SELECT DISTINCT\n" +                    "    cust.customer_no    AS account_no,\n" +                    "    l.location_no,\n" +                    "    pt.description      AS product_description,\n" +                    "    t.CURRENCY_CODE,t.AUTH_TRANSACTION_LOG_OID as authOID,t.reference,t.CARD_NO as cardNo, cust.customer_no as customerAccountNumber, t.stan as traceNumber,\n" +                    "    t.location_code as locationId, t.driver_ID as driverID, t.vehicle_ID as vehicleID,\n" +                    "    ccc.customer_cost_centre_code,\n" +                    "    tasv.auth_status_cid,\n" +                    "    d.driver_name,\n" +                    "    d.driver_id         AS card_driver_id,\n" +                    "    v.description       AS vehicle_description,\n" +                    "    v.license_plate,\n" +                    "    v.vehicle_id        AS card_vehicle_id,\n" +                    "    c.currency_code     AS original_currency_code_char,\n" +                    "    cust.name           AS customer_name\n" +                    "FROM\n" +                    "         auth_transaction_logs t\n" +                    "    INNER JOIN trans_auth_status_view     tasv ON tasv.auth_transaction_log_oid = t.auth_transaction_log_oid\n" +                    "    LEFT JOIN auth_trans_line_items      atli ON atli.auth_transaction_log_oid = t.auth_transaction_log_oid \n" +                    "    INNER JOIN external_client_ids    eci  ON eci.external_client_id_oid = (select external_client_id_oid from auth_acquiring_inst where acquiring_inst_id = t.forwarding_institution_id || '-' || t.acquir_institution_id)\n" +                    "                                              AND eci.client_mid = t.client_mid \n" +                    "    LEFT JOIN product_translations  pt ON pt.product_oid = atli.product_oid \n" +                    "                                                AND pt.external_code = atli.product_code \n" +                    "                                                and pt.external_client_id_oid = eci.external_client_id_oid \n" +                    "    LEFT JOIN m_customers                cust ON cust.customer_mid = t.customer_mid\n" +                    "    INNER JOIN cards                      c ON c.card_no = t.card_no\n" +                    "    LEFT JOIN drivers                    d ON d.card_oid = c.card_oid\n" +                    "    LEFT JOIN vehicles                   v ON v.card_oid = c.card_oid\n" +                    "    LEFT JOIN cost_centres               cc ON c.card_oid = cc.card_oid\n" +                    "                                 AND to_date(t.date_time_effective, 'yyyymmddhh24miss') >= cc.effective_on\n" +                    "    LEFT JOIN customer_cost_centres      ccc ON ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                    "    LEFT JOIN m_locations                l ON ( nls_lower(l.external_code) = nls_lower(t.location_code)\n" +                    "                                 OR nls_lower(l.location_no) = nls_lower(t.location_code) )\n" +                    "                               AND l.client_mid = t.client_mid\n" +                    "    LEFT JOIN currencies                 c ON t.original_currency_code = c.iso_currency_no\n" +                    "    inner join m_clients mc  on mc.client_mid = cust.client_mid\n" +                    "WHERE nvl(atli.line_number, 1) = 1\n" +                    "    and TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') <= mc.processing_date and \n" +                    "TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') >= mc.processing_date-90\n" +                    "    and cust.customer_no in ('"+basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='account-number']"))+"')";//                    "    order by t.date_time_effective desc";        }        queryResults = commonUtils.getQueryResultsOnMap(query);        PropUtils.setProps("AuthCurrencyCode", commonPage.getSpecificValueFromMapObject(queryResults, "CURRENCY_CODE"), baseUtils.testDataFilePath);        if (fieldName.equalsIgnoreCase("cardNumber")) {            fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "CARDNO");        } else if (fieldName.equalsIgnoreCase("customerNumber") || (fieldName.equalsIgnoreCase("accountNumber"))) {            fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERACCOUNTNUMBER");        } else if (fieldName.equalsIgnoreCase("traceNumber")) {            fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "TRACENUMBER");        } else if (fieldName.equalsIgnoreCase("locationId")) {            fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "LOCATIONID");        } else if (fieldName.equalsIgnoreCase("costCentre")) {            query = "select ccc.CUSTOMER_COST_CENTRE_CODE from auth_transaction_logs at\n" +                    "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                    "left join cards c on c.card_no = at.card_no\n" +                    "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                    "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                    "where at.card_no = " + commonPage.getSpecificValueFromMapObject(queryResults, "CARDNO") +                    " and at.AUTH_TRANSACTION_LOG_OID = " + commonPage.getSpecificValueFromMapObject(queryResults, "AUTHOID");            queryResults = commonUtils.getQueryResultsOnMap(query);            if (queryResults.size() == 0) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);            } else {                fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_COST_CENTRE_CODE");                query = "select at.AUTH_TRANSACTION_LOG_OID as authOID, at.reference from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join cards c on c.card_no = at.card_no\n" +                        "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                        "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where ccc.description = '" + fieldValue + "' and mc.client_mid in (" +                        PropUtils.getPropValue(properties, "ClientMID") + ") order by at.DATE_TIME_EFFECTIVE desc";            }        } else if (fieldName.equalsIgnoreCase("Dname")) {            query = "select driver_Name as driverName from drivers where driver_id = " + queryResults.get("DRIVERID");            queryResults = commonUtils.getQueryResultsOnMap(query);            if (queryResults.size() == 0) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);            } else {                fieldValue = commonPage.getSpecificValueFromMapObject(queryResults, "DRIVERNAME");                query = "select at.AUTH_TRANSACTION_LOG_OID as authOID, at.reference from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join drivers d on d.driver_id = at.driver_id\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                        ")   and d.driver_name = '" + fieldName + "' order by at.DATE_TIME_EFFECTIVE desc";            }        } else if (fieldName.equalsIgnoreCase("vlPlate")) {            query = "select LICENSE_PLATE from vehicles where vehicle_id = " + queryResults.get("VEHICLEID");            queryResults = commonUtils.getQueryResultsOnMap(query);            if (queryResults.size() == 0) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);            } else {                fieldValue = queryResults.get("LICENSE_PLATE");                query = "select at.AUTH_TRANSACTION_LOG_OID as authOID, at.reference from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join vehicles v on v.vehicle_id = at.vehicle_id\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") +                        ")   and v.LICENSE_PLATE = '" + fieldName + "'";            }        }        queryResults = commonUtils.getQueryResultsOnMap(query);        if (queryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + fieldName, baseUtils.testDataFilePath);        } else {            PropUtils.setProps("AuthOID", queryResults.get("AUTHOID"), baseUtils.testDataFilePath);            PropUtils.setProps("LatestTraceNo", queryResults.get("REFERENCE"), baseUtils.testDataFilePath);        }        if (fieldValue == null) {            return "";        } else {            return fieldValue;        }    }    /*   Method to get transaction record based on transaction type    */    public List<Map<String, String>> getAuthorizationRecordsBasedOnLoggedInUser(Scenario logger, String fieldName, String days) {        PropUtils.setProps("searchAuthFieldName", fieldName, baseUtils.testDataFilePath);        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String exactFieldName = getDBTransactionFieldNameForCorrespondingUIField(fieldName);        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {            if (days.isEmpty()) {                query = "select * from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where   mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and at." + exactFieldName + " is not null \n" +                        "and TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') <= mc.processing_date and \n" +                        "TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') >= mc.processing_date-150 \n" +                        "order by at.DATE_TIME_EFFECTIVE desc";            } else {                query = "select * from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where  mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and at." + exactFieldName + " is not null \n" +                        "and TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') <= mc.processing_date and \n" +                        "TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') >= mc.processing_date-" + days + " \n" +                        "order by at.DATE_TIME_EFFECTIVE desc";            }        } else {            String shortName = "";            if (PropUtils.getPropValue(properties, "Country").split(" ")[0].equalsIgnoreCase("CHV")) {                shortName = "Chevron " + PropUtils.getPropValue(properties, "Country").split(" ")[1];                PropUtils.setProps("countryShortName", shortName, baseUtils.testDataFilePath);            }            if (days.isEmpty()) {                query = "select * from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and at." + exactFieldName + " is not null \n" +                        "and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'\n" +                        "and TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') <= mc.processing_date and \n" +                        "TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') >= mc.processing_date-150 \n" +                        "order by at.DATE_TIME_EFFECTIVE desc";            } else {                query = "select * from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and at." + exactFieldName + " is not null \n" +                        "and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")) + "'\n" +                        "and TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') <= mc.processing_date and \n" +                        "TO_DATE(date_time_effective, 'YYYY/MM/DD HH:MI:SS') >= mc.processing_date- " + days + " \n" +                        "order by at.DATE_TIME_EFFECTIVE desc";            }        }        logger.log(query);        allRowsOfQueryResults = commonPage.commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        if (allRowsOfQueryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "This scenario will be skipped because no record is available with the field " + exactFieldName + " value", baseUtils.testDataFilePath);            logger.log("This scenario will be skipped because no record is available with the field " + exactFieldName + " value");        } else {            PropUtils.setProps("LatestAuthTraceNumber", allRowsOfQueryResults.get(0).get("REFERENCE"), baseUtils.testDataFilePath);            PropUtils.setProps("LatestTraceNo", allRowsOfQueryResults.get(0).get("REFERENCE"), baseUtils.testDataFilePath);            PropUtils.setProps("CurrencyCode", allRowsOfQueryResults.get(0).get("CURRENCY_CODE"), baseUtils.testDataFilePath);            PropUtils.setProps("AuthorizationOID", allRowsOfQueryResults.get(0).get("AUTH_TRANSACTION_LOG_OID"), baseUtils.testDataFilePath);            PropUtils.setProps("AuthOID", allRowsOfQueryResults.get(0).get("AUTH_TRANSACTION_LOG_OID"), baseUtils.testDataFilePath);            PropUtils.setProps("ClientMID", allRowsOfQueryResults.get(0).get("CLIENT_MID"), baseUtils.testDataFilePath);            logger.log("Authorization trace number : " + allRowsOfQueryResults.get(0).get("REFERENCE"));            logger.log("CurrencyCode : " + allRowsOfQueryResults.get(0).get("CURRENCY_CODE"));            logger.log("TransactionOID : " + allRowsOfQueryResults.get(0).get("AUTH_TRANSACTION_LOG_OID"));        }        return allRowsOfQueryResults;    }    /*       Method to validate field values based on section and transaction type        */    public void validateAuthorisationModuleFieldValuesBasedOnSection(Scenario logger, String sectionName, String values) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        List<WebElement> fieldNames = null;        List<WebElement> fieldValues = null;        List<WebElement> customerOrMerchantLines = null;        Map<String, String> currentSectionDBFieldValues = null;        List<Map<String, String>> currentSectionDBFieldValuesList = null;        if (sectionName.trim().equalsIgnoreCase("default")) {            fieldNames = basePage.getListOfElements(logger, By.cssSelector("thead>tr>th>div>button"));            fieldValues = basePage.getListOfElements(logger, By.xpath("(//tbody[@role='rowgroup']/tr[contains(@class,'table-element-row')])[1]/td"));            currentSectionDBFieldValues = getAuthorisationRecordOfDefaultSectionFieldValues(logger);            for (int i = 0; i < fieldNames.size() - 1; i++) {                if (fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("cardNumber")) {                    commonPage.assertTwoStrings(logger, "****" + currentSectionDBFieldValues.get("Cardnumber"), fieldValues.get(i).getText(), "CardNumber");                } else if (!fieldNames.get(i).getText().equalsIgnoreCase("Trans type")&&!fieldNames.get(i).getText().equalsIgnoreCase("Status") && !fieldNames.get(i).getText().trim().replaceAll(" ", "").equalsIgnoreCase("Date&time") && !fieldNames.get(i).getText().trim().equalsIgnoreCase("Country")) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());                }            }            Actions actions = new Actions(driver);            actions.moveToElement(fieldValues.get(2)).click().perform();        }        if (sectionName.trim().equalsIgnoreCase("Authorisation Details")) {            fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'][1]/div/div[@class='border-bottom'])[1]/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));            fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'][1]/div/div[@class='border-bottom'])[1]/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));            currentSectionDBFieldValues = getFieldValuesOfAuthorisationDetailsSection();            for (int i = 0; i < fieldNames.size() - 1; i++) {                if (!fieldNames.get(i).getText().equalsIgnoreCase("Validation error")) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());                }            }        }        if (sectionName.trim().equalsIgnoreCase("Authorisation Information")) {            fieldNames = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'][1]/div/div[@class='border-bottom'])[2]/mat-grid-list/div/mat-grid-tile/figure/div/div[1]"));            fieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='header-fields'][1]/div/div[@class='border-bottom'])[2]/mat-grid-list/div/mat-grid-tile/figure/div/div[2]"));            currentSectionDBFieldValues = getFieldValuesOfAuthorisationInformationSection();            for (int i = 0; i < fieldNames.size() - 1; i++) {                if (!fieldNames.get(i).getText().equalsIgnoreCase("Cost centre")) {                    commonPage.assertTwoStrings(logger, currentSectionDBFieldValues.get(fieldNames.get(i).getText().trim().replaceAll(" ", "")), fieldValues.get(i).getText(), fieldNames.get(i).getText());                }            }        }        if (sectionName.trim().equalsIgnoreCase("Authorisation BreakDown")) {            fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-grid-list[@class='authbreakdown mat-grid-list'])[1]/div/mat-grid-tile/figure/div/div[1]"));            int noOfLines = basePage.getListOfElements(logger, By.xpath("(//mat-grid-list[@class='authbreakdown mat-grid-list'])[1]/div/mat-grid-tile/figure/div/div")).size() / 4;            currentSectionDBFieldValuesList = getFieldValuesOfAuthorisationBreakDownSection();            for (int i = 2; i < noOfLines; i++) {                fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-grid-list[@class='authbreakdown mat-grid-list'])[1]/div/mat-grid-tile/figure/div/div[" + i + "]"));                for (int j = 0; j < fieldNames.size() - 1; j++) {                    if (!fieldNames.get(j).getText().equalsIgnoreCase("Product")) {                        commonPage.assertTwoStrings(logger, currentSectionDBFieldValuesList.get(i - 2).get(fieldNames.get(j).getText().trim().replaceAll(" ", "")), fieldValues.get(j).getText(), fieldNames.get(j).getText());                    }                }            }        }    }    /*    Method to get Default section of Authorisation record field values     */    public Map<String, String> getAuthorisationRecordOfDefaultSectionFieldValues(Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select at.DATE_TIME_EFFECTIVE as dateAndtime,SUBSTR(at.card_No, LENGTH(at.CARD_NO) - 5, 6) as cardNumber,mcust.customer_no as account#,orig_stan as tracenumber,\n" +                "location_code,c.description as country,const.description as status,at.original_amount from auth_transaction_logs at\n" +                "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join countries c on c.country_oid = mc.country_oid\n" +                "left join constants const on const.constant_oid = at.HOST_AUTH_PROCESS_STATUS_CID\n" +                "where at.AUTH_TRANSACTION_LOG_OID = " + PropUtils.getPropValue(properties, "AuthOID") + " " +                "and at.reference = '" + PropUtils.getPropValue(properties, "LatestTraceNo") + "'";        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.clear();        mapObject.put("Date&time", commonPage.getSpecificValueFromMapObject(queryResults,"DATEANDTIME"));        mapObject.put("Cardnumber", commonPage.getSpecificValueFromMapObject(queryResults,"CARDNUMBER"));        mapObject.put("Account#", commonPage.getSpecificValueFromMapObject(queryResults,"ACCOUNT#"));        mapObject.put("Tracenumber", commonPage.getSpecificValueFromMapObject(queryResults,"TRACENUMBER"));        mapObject.put("Locationcode", commonPage.getSpecificValueFromMapObject(queryResults,"LOCATION_CODE"));        mapObject.put("Country", commonPage.getSpecificValueFromMapObject(queryResults,"COUNTRY"));        mapObject.put("Status", commonPage.getSpecificValueFromMapObject(queryResults,"STATUS"));        mapObject.put("Totalamount", commonPage.getSpecificValueFromMapObject(queryResults,"ORIGINAL_AMOUNT"));        return mapObject;    }    /*    Method to get field values of Authorisation details section     */    public Map<String, String> getFieldValuesOfAuthorisationDetailsSection() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select at.AUTHORISATION_NO,at.RESPONSE_CODE,at.STAN,at.BATCH_NO,mcust.name from auth_transaction_logs at\n" +                "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                "where at.AUTH_TRANSACTION_LOG_OID = " + PropUtils.getPropValue(properties, "AuthOID") + "" +                " and at.reference = '" + PropUtils.getPropValue(properties, "LatestTraceNo") + "'";        mapObject.clear();        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.put("Authno.", commonPage.getSpecificValueFromMapObject(queryResults, "AUTHORISATION_NO"));        mapObject.put("Responsecode", commonPage.getSpecificValueFromMapObject(queryResults, "RESPONSE_CODE"));        mapObject.put("Accountname", commonPage.getSpecificValueFromMapObject(queryResults, "NAME"));        mapObject.put("STAN", commonPage.getSpecificValueFromMapObject(queryResults, "STAN"));        mapObject.put("Batchnumber", commonPage.getSpecificValueFromMapObject(queryResults, "BATCH_NO"));        return mapObject;    }    /*    Method to get field values of Authorisation information section     */    public Map<String, String> getFieldValuesOfAuthorisationInformationSection() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select ccc.CUSTOMER_COST_CENTRE_CODE,d.driver_ID,v.license_plate,at.ODOMETER,at.SECOND_CARD_NO\n" +                "from auth_transaction_logs at\n" +                "left join cards c on c.card_no = at.card_no\n" +                "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                "left join customer_cost_centres ccc on ccc.CUSTOMER_COST_CENTRE_OID = cc.CUSTOMER_COST_CENTRE_OID\n" +                "left join drivers d on d.driver_oid = c.driver_oid\n" +                "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                "where at.AUTH_TRANSACTION_LOG_OID = " + PropUtils.getPropValue(properties, "AuthOID") + "" +                " and at.reference = '" + PropUtils.getPropValue(properties, "LatestTraceNo") + "'";        queryResults = commonUtils.getQueryResultsOnMap(query);        mapObject.clear();        mapObject.put("Costcentre", commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_COST_CENTRE_CODE"));        mapObject.put("DriverID", commonPage.getSpecificValueFromMapObject(queryResults, "DRIVER_ID"));        mapObject.put("Licenseplate", commonPage.getSpecificValueFromMapObject(queryResults, "LICENSE_PLATE"));        mapObject.put("Odometer", commonPage.getSpecificValueFromMapObject(queryResults, "ODOMETER"));        mapObject.put("Secondcardnumber", commonPage.getSpecificValueFromMapObject(queryResults, "SECOND_CARD_NO"));        return mapObject;    }    /*    Method to get all lines of product details in Authorisation Breakdown section     */    public List<Map<String, String>> getFieldValuesOfAuthorisationBreakDownSection() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select p.description, atl.line_number,atl.quantity as NumberOfUnits, atl.unit_price, atl.value from auth_trans_line_items atl\n" +                "inner join product_translations p on p.product_oid = atl.product_oid and atl.product_code = p.external_code\n" +                "inner join auth_transaction_logs at on at.AUTH_TRANSACTION_LOG_OID = atl.AUTH_TRANSACTION_LOG_OID\n" +                "where at.AUTH_TRANSACTION_LOG_OID = " + PropUtils.getPropValue(properties, "AuthOID") + "" +                "  and at.reference = '" + PropUtils.getPropValue(properties, "LatestTraceNo") + "'";        allRowsOfQueryResults = commonPage.commonDBUtils.getAllRowsOfQueryResultsOnListMap(query);        List<Map<String, String>> listMapObject = new ArrayList<>();        for (int i = 0; i < allRowsOfQueryResults.size(); i++) {            mapObject.clear();            if (i == allRowsOfQueryResults.size()) {                break;            }            DecimalFormat df = new DecimalFormat("#.####");            df.setRoundingMode(RoundingMode.CEILING);            mapObject.put("Product", commonPage.getSpecificValueFromMapObject(allRowsOfQueryResults.get(i), "DESCRIPTION"));            mapObject.put("Numberofunits", commonPage.getSpecificValueFromMapObject(allRowsOfQueryResults.get(i), "NUMBEROFUNITS"));            mapObject.put("Unitprice", df.format(Double.parseDouble(commonPage.getSpecificValueFromMapObject(allRowsOfQueryResults.get(i), "UNIT_PRICE")) / 100) + " " + PropUtils.getPropValue(properties, "AuthCurrencyCode"));            mapObject.put("Total", commonPage.getSpecificValueFromMapObject(allRowsOfQueryResults.get(i), "VALUE") + " " + PropUtils.getPropValue(properties, "AuthCurrencyCode"));            listMapObject.add(new HashMap(mapObject));        }        return listMapObject;    }    /*    Method to enter field values in search panel based on module     */    public void enterFieldValuesBasedOnTheirBehaviourInSpecificModule(Scenario logger, String fieldNames, String moduleName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {            query = "select at.AUTH_TRANSACTION_LOG_OID,at.reference,at.location_code as locationId,at.card_no,mcust.customer_no,\n" +                    "ccc.customer_cost_centre_code,d.driver_name,v.license_plate from auth_transaction_logs at\n" +                    "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                    "left join cards c on c.card_no = at.card_no\n" +                    "left join drivers d on d.driver_oid = c.driver_oid\n" +                    "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                    "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                    "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") \n" +                    "  order by at.DATE_TIME_EFFECTIVE desc";        } else {            query = "select at.AUTH_TRANSACTION_LOG_OID,at.reference,at.location_code as locationId,at.card_no,mcust.customer_no,\n" +                    "ccc.customer_cost_centre_code,d.driver_name,v.license_plate from auth_transaction_logs at\n" +                    "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                    "left join cards c on c.card_no = at.card_no\n" +                    "left join drivers d on d.driver_oid = c.driver_oid\n" +                    "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                    "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                    "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") \n" +                    "  and mcust.customer_no = '" + usersPage.getAccountNumberFromUsersPage(logger) + "' " +                    "order by at.DATE_TIME_EFFECTIVE desc";        }        logger.log(query);        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (allRowsOfQueryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);        } else {            String[] fieldNamesArr = {fieldNames};            if (fieldNames.contains(",")) {                fieldNamesArr = fieldNames.split(",");            }            String allConditions = "";            for (int i = 0; i <= fieldNamesArr.length - 1; i++) {                if (fieldNamesArr[i].equalsIgnoreCase("cardNumber") && (allRowsOfQueryResults.get(0).get("CARD_NO") != null)) {                    allConditions = "and " + allConditions + "at.card_no = " + allRowsOfQueryResults.get(0).get("CARD_NO");                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='cardNumber']>input"), allRowsOfQueryResults.get(0).get("CARD_NO"));                    logger.log("Value '" + allRowsOfQueryResults.get(0).get("CARD_NO") + "' has been entered in the field '" + fieldNamesArr[i] + "'");                    PropUtils.setProps("auth-cardNumber", allRowsOfQueryResults.get(0).get("CARD_NO"), baseUtils.testDataFilePath);                }                if (fieldNamesArr[i].equalsIgnoreCase("customerNumber") && (allRowsOfQueryResults.get(0).get("CUSTOMER_NO") != null)) {                    allConditions = allConditions + " and mcust.customer_no = " + allRowsOfQueryResults.get(0).get("CUSTOMER_NO");                    basePage.userTypeIntoTextField(logger, By.cssSelector("//ols-autocomplete[@ng-reflect-name='customerNumber']/mat-form-field/div/div/div[3]/input"), allRowsOfQueryResults.get(0).get("CUSTOMER_NO"));                    commonPage.clickButtonUsingSpan(logger, "Apply");                    logger.log("Value '" + allRowsOfQueryResults.get(0).get("CUSTOMER_NO") + "' has been entered in the field '" + fieldNamesArr[i] + "'");                    PropUtils.setProps("auth-customerNumber", allRowsOfQueryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                }                if (fieldNamesArr[i].equalsIgnoreCase("traceNumber") && (allRowsOfQueryResults.get(0).get("REFERENCE") != null)) {                    allConditions = allConditions + " and at.reference = " + allRowsOfQueryResults.get(0).get("REFERENCE");                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='traceNumber']>input"), allRowsOfQueryResults.get(0).get("REFERENCE"));                    logger.log("Value '" + allRowsOfQueryResults.get(0).get("REFERENCE") + "' has been entered in the field '" + fieldNamesArr[i] + "'");                    PropUtils.setProps("auth-traceNumber", allRowsOfQueryResults.get(0).get("REFERENCE"), baseUtils.testDataFilePath);                }                if (fieldNamesArr[i].equalsIgnoreCase("locationId") && (allRowsOfQueryResults.get(0).get("LOCATIONID") != null)) {                    allConditions = allConditions + " and at.location_code = '" + allRowsOfQueryResults.get(0).get("LOCATIONID")+"'";                    basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='locationId']/mat-form-field/div/div/div[3]/input"), allRowsOfQueryResults.get(0).get("LOCATIONID"));                    commonPage.clickButtonUsingSpan(logger, "Apply");                    logger.log("Value '" + allRowsOfQueryResults.get(0).get("LOCATIONID") + "' has been entered in the field '" + fieldNamesArr[i] + "'");                    PropUtils.setProps("auth-locationId", allRowsOfQueryResults.get(0).get("LOCATIONID"), baseUtils.testDataFilePath);                }                if (fieldNamesArr[i].equalsIgnoreCase("costCentre") && (allRowsOfQueryResults.get(0).get("CUSTOMER_COST_CENTRE_CODE") != null)) {                    allConditions = allConditions + " and ccc.customer_cost_centre_code = '" + allRowsOfQueryResults.get(0).get("CUSTOMER_COST_CENTRE_CODE") + "'";                    basePage.userTypeIntoTextField(logger, By.xpath("//ols-autocomplete[@ng-reflect-name='costCentre']/mat-form-field/div/div/div[3]/input"), allRowsOfQueryResults.get(0).get("CUSTOMER_COST_CENTRE_CODE"));                    commonPage.clickButtonUsingSpan(logger, "Apply");                    logger.log("Value '" + allRowsOfQueryResults.get(0).get("CUSTOMER_COST_CENTRE_CODE") + "' has been entered in the field '" + fieldNamesArr[i] + "'");                    PropUtils.setProps("auth-costCentre", allRowsOfQueryResults.get(0).get("CUSTOMER_COST_CENTRE_CODE"), baseUtils.testDataFilePath);                }                if (fieldNamesArr[i].equalsIgnoreCase("drivername") && (allRowsOfQueryResults.get(0).get("DRIVER_NAME") != null)) {                    allConditions = allConditions + " and d.driver_name = " + allRowsOfQueryResults.get(0).get("DRIVER_NAME");                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='drivername']>input"), allRowsOfQueryResults.get(0).get("DRIVER_NAME"));                    logger.log("Value '" + allRowsOfQueryResults.get(0).get("DRIVER_NAME") + "' has been entered in the field '" + fieldNamesArr[i] + "'");                    PropUtils.setProps("auth-drivername", allRowsOfQueryResults.get(0).get("DRIVER_NAME"), baseUtils.testDataFilePath);                }                if (fieldNamesArr[i].equalsIgnoreCase("vehicleLicencePlate") && (allRowsOfQueryResults.get(0).get("LICENSE_PLATE") != null)) {                    allConditions = allConditions + " and v.license_plate = '" + allRowsOfQueryResults.get(0).get("LICENSE_PLATE") + "'";                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='licencePlate']>input"), allRowsOfQueryResults.get(0).get("LICENSE_PLATE"));                    logger.log("Value '" + allRowsOfQueryResults.get(0).get("LICENSE_PLATE") + "' has been entered in the field '" + fieldNamesArr[i] + "'");                    PropUtils.setProps("auth-vehicleLicencePlate", allRowsOfQueryResults.get(0).get("LICENSE_PLATE"), baseUtils.testDataFilePath);                }            }            if (allConditions.equals("")) {                PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            } else {                query = "select at.AUTH_TRANSACTION_LOG_OID,at.reference,at.location_code as locationId,at.card_no,mcust.customer_no,\n" +                        "ccc.customer_cost_centre_code,d.driver_name,v.license_plate from auth_transaction_logs at\n" +                        "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                        "left join cards c on c.card_no = at.card_no\n" +                        "left join drivers d on d.driver_oid = c.driver_oid\n" +                        "left join vehicles v on v.vehicle_oid = c.vehicle_oid\n" +                        "left join cost_centres cc on cc.card_oid = c.card_oid\n" +                        "left join customer_cost_centres ccc on ccc.customer_cost_centre_oid = cc.customer_cost_centre_oid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where " + allConditions.substring(4, allConditions.length()) + " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";                allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);                PropUtils.setProps("dbRecordCount", String.valueOf(allRowsOfQueryResults.size()), baseUtils.testDataFilePath);            }        }    }    /*    Method to validate field values after expanding search bar based on module    */    public void validateFieldValuesAfterExpandingSearchBarBasedOnModule(String fieldNames, String module, Scenario logger) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (module.equalsIgnoreCase("Authorisations")) {            String[] fieldNamesArr = {fieldNames};            if (fieldNames.contains(",")) {                fieldNamesArr = fieldNames.split(",");            }            for (int i = 0; i <= fieldNamesArr.length - 1; i++) {                if (fieldNamesArr[i].equalsIgnoreCase("cardNumber")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "auth-cardNumber"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='cardNumber']>input"), "ng-reflect-value"), "cardNumber");                }                if (fieldNamesArr[i].equalsIgnoreCase("customerNumber")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "auth-customerNumber"), commonPage.getAttributeValue(By.cssSelector("//ols-autocomplete[@ng-reflect-name='customerNumber']/mat-form-field/div/div/div[3]/input"), "ng-reflect-value"), "CustomerNumber");                }                if (fieldNamesArr[i].equalsIgnoreCase("traceNumber")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "auth-traceNumber"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='traceNumber']>input"), "ng-reflect-value"), "traceNumber");                }                if (fieldNamesArr[i].equalsIgnoreCase("locationId")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "auth-locationId"), commonPage.getAttributeValue(By.xpath("//ols-autocomplete[@ng-reflect-name='locationId']/mat-form-field/div/div/div[3]/input"), "ng-reflect-value"), "LocationID");                }                if (fieldNamesArr[i].equalsIgnoreCase("costCentre")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "auth-costCentre"), commonPage.getAttributeValue(By.xpath("//ols-autocomplete[@ng-reflect-name='costCentre']/mat-form-field/div/div/div[3]/input"), "ng-reflect-value"), "CostCentre");                }                if (fieldNamesArr[i].equalsIgnoreCase("drivername")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "auth-drivername"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='drivername']>input"), "ng-reflect-value"), "DriverName");                }                if (fieldNamesArr[i].equalsIgnoreCase("vehicleLicencePlate")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "auth-vehicleLicencePlate"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='licencePlate']>input"), "ng-reflect-value"), "vehicleLicencePlate");                }            }        }    }    /*    Method to get all statuses of Authorisation module     */    public String allStatusesOfAuthorisationModule(Scenario logger, String filterName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String date = "";        if (PropUtils.getPropValue(properties, "searchAuthFieldValue").contains("days") || (PropUtils.getPropValue(properties, "searchAuthFieldValue").contains("Custom"))) {            date = PropUtils.getPropValue(properties, "auth-date");        }        if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {            query = "select distinct description from auth_transaction_logs at\n" +                    "left join trans_auth_status_view tas on tas.AUTH_TRANSACTION_LOG_OID = at.AUTH_TRANSACTION_LOG_OID\n" +                    "left join constants c on c.constant_oid = auth_status_cid\n" +                    "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where at.DATE_TIME_EFFECTIVE < sysdate and at.DATE_TIME_EFFECTIVE > sysdate - " + date + "\n" +                    " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID");        } else {            query = "select distinct description from auth_transaction_logs at\n" +                    "left join trans_auth_status_view tas on tas.AUTH_TRANSACTION_LOG_OID = at.AUTH_TRANSACTION_LOG_OID\n" +                    "left join constants c on c.constant_oid = auth_status_cid\n" +                    "left join m_customers mcust on mcust.customer_mid = at.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where at.DATE_TIME_EFFECTIVE < sysdate and at.DATE_TIME_EFFECTIVE > sysdate - " + date + "\n" +                    " and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + "" +                    ")   and mcust.customer_no = '" + basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='account-number']")) + "'";        }        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        StringBuilder allStatuses = new StringBuilder();        for (int i = 0; i < allRowsOfQueryResults.size() - 1; i++) {            if (i == allRowsOfQueryResults.size() - 1) {                allStatuses.append(allRowsOfQueryResults.get(i).get("DESCRIPTION"));            } else {                allStatuses.append(allRowsOfQueryResults.get(i).get("DESCRIPTION")).append(",");            }        }        return allStatuses.toString();    }    /*    Method to get all statuses of Authorisation module     */    public String getDBValuesForAFilterBasedOnDateAndClient(Scenario logger, String filterName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String date = "";        if (PropUtils.getPropValue(properties, "searchTransFieldValue").contains("days") || (PropUtils.getPropValue(properties, "searchTransFieldValue").contains("Custom"))) {            date = PropUtils.getPropValue(properties, "trans-date");        }        if (filterName.equalsIgnoreCase("transactionTypes")) {            if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                query = "select distinct tt.description from transaction_enquiry te\n" +                        "left join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where   mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                        "and te.effective_at < sysdate and te.effective_at > sysdate-" + date;            } else {                query = "select distinct tt.description from transaction_enquiry te\n" +                        "left join transaction_types tt on tt.transaction_type_oid = te.transaction_type_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where   mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                        "and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberEnteredInField") + "' \n" +                        "and te.effective_at < sysdate and te.effective_at > sysdate-" + date;            }        } else if (filterName.equalsIgnoreCase("issuerCountries")) {            if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                query = "select distinct c.description from transaction_enquiry te\n" +                        "left join detail_group_trans dgt on dgt.transaction_oid = te.transaction_oid and dgt.line_number = 0\n" +                        "left join detail_groups dg on dg.detail_group_oid = dgt.detail_group_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join countries c on c.country_oid = dg.country_oid\n" +                        "where   te.effective_at < sysdate and te.effective_at > sysdate-" + date + " and c.description is not null";            } else {                query = "select distinct c.description from transaction_enquiry te\n" +                        "left join detail_group_trans dgt on dgt.transaction_oid = te.transaction_oid and dgt.line_number = 0\n" +                        "left join detail_groups dg on dg.detail_group_oid = dgt.detail_group_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "left join countries c on c.country_oid = dg.country_oid\n" +                        "where  mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberEnteredInField") + "'\n" +                        "and te.effective_at < sysdate and te.effective_at > sysdate-" + date + " and c.description is not null";            }        } else if (filterName.equalsIgnoreCase("products")) {            if (basePage.userGetTextFromWebElement(logger, By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account")) {                query = "select distinct pt.description from transactions t\n" +                        "left join transaction_line_items tli on tli.TRANSACTION_OID = t.transaction_oid\n" +                        "left join transaction_enquiry te on te.transaction_oid = tli.transaction_oid\n" +                        "left join product_translations pt on pt.product_translation_oid = tli.product_translation_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where   mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                        "and te.effective_at < sysdate and te.effective_at > sysdate-" + date;            } else {                query = "select distinct pt.description from transactions t\n" +                        "left join transaction_line_items tli on tli.TRANSACTION_OID = t.transaction_oid\n" +                        "left join transaction_enquiry te on te.transaction_oid = tli.transaction_oid\n" +                        "left join product_translations pt on pt.product_translation_oid = tli.product_translation_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = te.customer_mid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where  mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                        "and mcust.customer_no = '" + PropUtils.getPropValue(properties, "accountNumberEnteredInField") + "'\n" +                        "and te.effective_at < sysdate and te.effective_at > sysdate-" + date;            }        }        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        StringBuilder allStatuses = new StringBuilder();        for (int i = 0; i <= allRowsOfQueryResults.size() - 1; i++) {            if (i == allRowsOfQueryResults.size() - 1) {                allStatuses.append(allRowsOfQueryResults.get(i).get("DESCRIPTION"));            } else {                allStatuses.append(allRowsOfQueryResults.get(i).get("DESCRIPTION")).append(",");            }        }        return allStatuses.toString();    }    /*    Method to get account number based on module     */    public void getAccountNumberBasedOnModule(String moduleName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (moduleName.equalsIgnoreCase("Authorisations")) {            query = "select distinct mcust.customer_mid,mcust.customer_no, mc.name as country, mcust.name as customerName from m_customers mcust\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join auth_transaction_logs at on at.customer_mid = mcust.customer_mid\n" +                    "where   mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and at.AUTH_TRANSACTION_LOG_OID is not null";        } else if (moduleName.equalsIgnoreCase("Transactions")) {            query = "select distinct mcust.customer_mid,mcust.customer_no, mc.name as country, mcust.name as customerName from m_customers mcust\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join transactions t on t.customer_mid = mcust.customer_mid\n" +                    "where   mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and t.transaction_oid is not null";        }        queryResults = commonUtils.getQueryResultsOnMap(query);        PropUtils.setProps("moduleBasedAccountNumber", queryResults.get("CUSTOMER_NO"), baseUtils.testDataFilePath);        PropUtils.setProps("Country", queryResults.get("COUNTRY"), baseUtils.testDataFilePath);        PropUtils.setProps("accounts-accountName", queryResults.get("CUSTOMERNAME"), baseUtils.testDataFilePath);    }    /*    Method to get accountnumber which has records for specific module     */    public void enterGetAccountNumberWhichHasRecordsForSpecificModule(Scenario logger, String moduleName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (moduleName.equalsIgnoreCase("CardControlProfile")) {            query = "select mcust.customer_no,mc.name from m_customers mcust\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join card_control_profiles ccp on ccp.customer_mid = mcust.customer_mid\n" +                    "where ccp.card_control_profile_oid is not null and mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";            queryResults = commonUtils.getQueryResultsOnMap(query);            basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='accountNumber']>input"), queryResults.get("CUSTOMER_NO"));            if (PropUtils.getPropValue(properties, "ClientMID").split(",").length > 1) {                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='country']"));                basePage.userClick(logger, By.xpath("//span[contains(text(),'" + queryResults.get("NAME") + "')]"));            }        }    }    public void getAccountNoWithOutHierarchy(Scenario logger, String clientMID) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "SELECT c.customer_no FROM m_customers c \n" +                "LEFT JOIN relationships r ON r.member_oid = c.customer_mid \n" +                "INNER JOIN Card_programs ON c.CARD_PROGRAM_OID = Card_programs.CARD_PROGRAM_OID \n" +                "WHERE r.relationship_oid IS NULL AND card_programs.client_mid ='" + clientMID + "'";        queryResults = commonUtils.getQueryResultsOnMap(query);        String accountNo = queryResults.get("CUSTOMER_NO");        System.out.println("Account number with out hierarchy" + accountNo);        PropUtils.setProps("notHavingHierarchy-accountNumber", accountNo, baseUtils.testDataFilePath);    }    public void getCustomerNameUsingNumber(Scenario logger, String customerNo) {        query = "select name from M_customers where customer_No ='" + customerNo + "'";        queryResults = commonUtils.getQueryResultsOnMap(query);        String customerName = queryResults.get("NAME");        System.out.println("Customer Name with out hierarchy" + customerName);        PropUtils.setProps("notHavingHierarchy-accountName", customerName, baseUtils.testDataFilePath);    }    public void getAccountNoWithOutHierarchyWithIndex(Scenario logger, String clientMID, int index) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "SELECT c.customer_no FROM m_customers c \n" +                "LEFT JOIN relationships r ON r.member_oid = c.customer_mid \n" +                "left join wf_relationships wr on c.customer_mid = wr.member_oid\n"+                "INNER JOIN Card_programs ON c.CARD_PROGRAM_OID = Card_programs.CARD_PROGRAM_OID \n" +                "WHERE r.relationship_oid IS NULL AND wr.member_oid IS NULL AND card_programs.client_mid ='" + clientMID + "'";        logger.log("Query ::::" + query);        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        String accountNo = queryResults.get(index).get("CUSTOMER_NO");        logger.log("account nuber for index " + index + "is " + accountNo);        if (index == 1) {            PropUtils.setProps("notHavingHierarchy-accountNumber", accountNo, baseUtils.testDataFilePath);        } else {            PropUtils.setProps("notHavingHierarchy-accountNumber" + index, accountNo, baseUtils.testDataFilePath);        }    }    public void userClickOnDateFieldAndSelectValueNoOfDays(Scenario logger, String fieldName, String noOfDays, String time, String currentDate, String currentDateFormat) {        try {            Properties properties = PropUtils.getProps(baseUtils.testDataFile);            if (!PropUtils.getPropValue(properties, "testStatus").equalsIgnoreCase("Skipped")) {                if (fieldName.equalsIgnoreCase("Expiration Date")) {                    basePage.userClick(logger, By.xpath("//mav-input[@ng-reflect-name='endDate']"));                } else if (noOfDays.equalsIgnoreCase("0") || fieldName.equalsIgnoreCase("effectiveDate")) {                    basePage.userClick(logger, By.xpath("//mav-input[@class='ng-untouched ng-pristine ng-invalid']"));                } else if(fieldName.equalsIgnoreCase("Expiry")){                    basePage.userClick(logger, By.xpath("//mav-input[@class='ng-untouched ng-pristine ng-valid']"));                } else{                    logger.log("entering into else block");                    basePage.userClick(logger, By.xpath("//mav-input[@class='ng-pristine ng-valid ng-touched']"));                }                String getDesiredDate = "";                getDesiredDate = commonPage.getDesiredDateInSpecificFormat(logger, currentDate, Integer.parseInt(noOfDays), time, currentDateFormat, "dd, MMM yyyy");                //  String getDesiredDateWithFormat = commonPage.getDesiredDateInSpecificFormat(logger, getDesiredDate, 0, time, "dd, MMM yyyy", "dd/MM/yyyy");                logger.log("Date here:::" + getDesiredDate);                // PropUtils.setProps("Date-" + fieldName, getDesiredDateWithFormat, baseUtils.testDataFilePath);                WebElement element = null;                String actYear = basePage.userGetTextFromWebElement(logger, By.xpath("//button[@class='mat-calendar-period-button mat-focus-indicator mat-button mat-button-base']/span"));                for (int i = 0; i <= 100; i++) {                    if (basePage.userGetTextFromWebElement(logger, By.xpath("//button[@class='mat-calendar-period-button mat-focus-indicator mat-button mat-button-base']/span")).equalsIgnoreCase(getDesiredDate.substring(3).trim())) {                        element = driver.findElement(By.xpath("//td[contains(@class,'mat-calendar-body-cell mat-focus-indicator')]/div[text()=" + Integer.parseInt(getDesiredDate.substring(0, 2)) + "]"));                        commonPage.clickUsingJSExecutor(logger, element);                        break;                    }                    logger.log("Expected year : " + Integer.parseInt(getDesiredDate.substring(getDesiredDate.length() - 4)));                    logger.log("Actual year : " + Integer.parseInt(actYear.substring(actYear.length() - 4)));                    if ((Integer.parseInt(getDesiredDate.substring(getDesiredDate.length() - 4)) > Integer.parseInt(actYear.substring(actYear.length() - 4))) || (commonPage.getIndexOfMonth(getDesiredDate.substring(4, 7).toUpperCase()) > commonPage.getIndexOfMonth(actYear.substring(0, 3)))) {                        commonPage.clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.xpath("//button[@class='mat-calendar-next-button mat-focus-indicator mat-icon-button mat-button-base']")));                    } else {                        commonPage.clickUsingJSExecutor(logger, basePage.getWebElementUsingLocator(logger, By.xpath("//button[@class='mat-calendar-previous-button mat-focus-indicator mat-icon-button mat-button-base']")));                    }                }            } else {                throw new TransactionNotFoundException(PropUtils.getPropValue(properties, "skipReason"));            }        } catch (TransactionNotFoundException e) {            //ExtentReportListener.//testStepHandle("SKIP", driver, logger, e);        } catch (Exception e) {            //ExtentReportListener.//testStepHandle("FAIL", driver, logger, e);        }    }    /*    Method to get accounts which having hierarchies     */    public List<Map<String, String>> getAccountsWhichHavingHierarchy(Scenario logger, String hierarchyType, String accountType) {        String hierarchyFieldName = "";        hierarchyType = hierarchyType.replaceAll(" ", "");        if (hierarchyType.equalsIgnoreCase("financialHierarchy") || hierarchyType.equalsIgnoreCase("financial")) {            hierarchyFieldName = "IS_CUSTOMER_FINANCIAL";        } else if (hierarchyType.equalsIgnoreCase("rebatesHierarchy") || hierarchyType.equalsIgnoreCase("rebates")) {            hierarchyFieldName = "IS_PERIOD_REBATE";        } else if (hierarchyType.equalsIgnoreCase("reportsHierarchy") || hierarchyType.equalsIgnoreCase("reports")) {            hierarchyFieldName = "IS_CUSTOMER_REPORTS";        }        String parentCondition = "";        if (accountType.equalsIgnoreCase("Parent")) {            parentCondition = "and r.relationship_oid = r.parent_relationship_oid";        }        String query = "SELECT c.customer_no FROM m_customers c \n" +                "LEFT JOIN relationships r ON r.member_oid = c.customer_mid \n" +                "INNER JOIN Card_programs ON c.CARD_PROGRAM_OID = Card_programs.CARD_PROGRAM_OID\n" +                "inner join Accounts A on c.customer_mid = A.Customer_mid\n" +                "inner join Relationship_assignments RA on r.relationship_oid = ra.relationship_oid\n" +                "inner join hierarchies hie on r.hierarchy_oid = hie.hierarchy_oid\n" +                "inner join Account_Status acs on A.account_Status_oid = acs.account_Status_oid\n" +                "WHERE r.relationship_oid IS not NULL AND card_programs.client_mid ='" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.testDataFile), "ClientMID") + "'\n" +                "and hie." + hierarchyFieldName + " ='Y' and ra.expires_on > CURRENT_TIMESTAMP+1 and ra.expires_on not like '%31-DEC-99%' and ra.effective_on < CURRENT_TIMESTAMP-1" +                " " + parentCondition + " order by c.customer_no desc";        logger.log("Query ::::" + query);        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (queryResults.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "Account is not available to execute this scenario", baseUtils.testDataFilePath);        } else {            PropUtils.setProps("havingHierarchy-accountNumber", queryResults.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);        }        return queryResults;    }    public void getCustomerNumberWithHierarchy(Scenario logger, String accountType, String hierarchyType, String clientMid, int index) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        List<Map<String, String>> queryResults = getAccountsWhichHavingHierarchy(logger, hierarchyType, accountType);        String hieLvlQuery = "select mcust.customer_no,r.relationship_oid from hierarchies h\n" +                "left join m_customers mcust on mcust.customer_mid = h.owning_member_oid\n" +                "left join relationships r on r.HIERARCHY_OID = h.HIERARCHY_OID\n" +                "left join m_customers mcustr on mcustr.customer_mid = r.member_oid\n" +                "left join relationship_assignments ra on ra.RELATIONSHIP_OID = r.RELATIONSHIP_OID\n" +                "where h.IS_CUSTOMER_FINANCIAL = 'Y' and (h.IS_PERIOD_REBATE = 'N' or h.IS_PERIOD_REBATE = 'Y')\n" +                "and h.IS_LOCATION = 'N' and h.IS_CUSTOMER_REPORTS = 'N'";        logger.log("Query:::"+query);        List<Map<String, String>> hieLvlQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(hieLvlQuery);        int expChildAccounts = 0;        int actChildAccounts = 0;        String accountNo = "";        for (int i = 0; i <= queryResults.size() - 1; i++) {            getBillingHierarchyValue(logger, queryResults.get(i).get("CUSTOMER_NO"));            properties = PropUtils.getProps(baseUtils.testDataFile);            String billingHierarchyValue = PropUtils.getPropValue(properties, "BillingHierarchyValue");            logger.log("billing hierarchy value" + billingHierarchyValue);            if (billingHierarchyValue.equalsIgnoreCase("1 Level Only")) {                expChildAccounts = 0;            } else if (billingHierarchyValue.equalsIgnoreCase("Up to 2 Levels")) {                expChildAccounts = 1;            } else if (billingHierarchyValue.equalsIgnoreCase("Up to 3 Levels")) {                expChildAccounts = 2;            } else if (billingHierarchyValue.equalsIgnoreCase("Up to 4 Levels")) {                expChildAccounts = 3;            }            for (int j = 0; j <= hieLvlQueryResults.size() - 1; j++) {                if (queryResults.get(i).get("CUSTOMER_NO").equalsIgnoreCase(hieLvlQueryResults.get(j).get("CUSTOMER_NO"))) {                    actChildAccounts = actChildAccounts + 1;                }            }            if (expChildAccounts > actChildAccounts) {                accountNo = queryResults.get(i).get("CUSTOMER_NO");                break;            }        }        if (accountNo.equalsIgnoreCase("")) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "No account is available to add a child account for an existing hierarchy ", baseUtils.testDataFilePath);        }        logger.log("account number for index " + index + " is " + accountNo);        PropUtils.setProps("havingHierarchy-accountNumber", accountNo, baseUtils.testDataFilePath);    }    public void getCustomerNumberWithOutHierarchyUnderSameProgram(Scenario logger, String clientMid, String parentCustomer, int index) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "SELECT c.customer_no FROM m_customers c \n" +                "LEFT JOIN relationships r ON r.member_oid = c.customer_mid \n" +                "INNER JOIN Card_programs ON c.CARD_PROGRAM_OID = Card_programs.CARD_PROGRAM_OID\n" +                "WHERE r.relationship_oid IS NULL AND card_programs.client_mid ='" + clientMid + "'\n" +                "and Card_programs.card_program_oid in (Select card_program_oid from M_customers where customer_no ='" + parentCustomer + "')";        logger.log("Query ::::" + query);        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        String accountNo = queryResults.get(index).get("CUSTOMER_NO");        logger.log("Account number fromBD " + clientMid + ":::Parent customer::::" + parentCustomer);        PropUtils.setProps("notHavingHierarchy-accountNumber", accountNo, baseUtils.testDataFilePath);    }    public void validateHierarchyEntryInDB(Scenario logger, String customer, String customerNo) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (customer.equalsIgnoreCase("Child")) {            query = "Select h.hierarchy_oid, h.is_customer_financial,r.relationship_oid,r.parent_relationship_oid from hierarchies h\n" +                    "inner join  relationships r ON h.hierarchy_oid = r.hierarchy_oid\n" +                    "inner join m_customers mc on r.member_oid = mc.customer_mid\n" +                    "where mc.customer_no='" + customerNo + "' and r.relationship_oid != r.parent_relationship_oid";        } else if (customer.equalsIgnoreCase("Parent")) {            query = "Select h.hierarchy_oid, h.is_customer_financial,r.relationship_oid,r.parent_relationship_oid from hierarchies h\n" +                    "inner join  relationships r ON h.hierarchy_oid = r.hierarchy_oid\n" +                    "inner join m_customers mc on r.member_oid = mc.customer_mid\n" +                    "where mc.customer_no='" + customerNo + "' and r.relationship_oid = r.parent_relationship_oid";        }        logger.log("Query ::::" + query);        queryResults = commonUtils.getQueryResultsOnMap(query);        allRowsOfQueryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (allRowsOfQueryResults.size() == 0) {            logger.log("Entry not happened in hierarchy table");        } else {            logger.log("Enter happened in hierarchy table");        }    }    public void getBillingHierarchyValue(Scenario logger, String customerNo) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        query = "select c1.description as billingHierarchyValue,c2.description from m_customers mcust\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join card_programs cp on cp.card_program_oid = mcust.card_program_oid\n" +                "left join constants c1 on c1.constant_oid = cp.BILLING_HIERARCHY_DEPTH_CID\n" +                "left join constants c2 on c2.constant_oid = cp.FIN_HIERARCHY_RESTRICTION_CID\n" +                "where mc.client_mid = 101 and mcust.customer_no='" + customerNo + "'";        logger.log("Query ::::" + query);        queryResults = commonUtils.getQueryResultsOnMap(query);        String billingHierarchyValue = queryResults.get("BILLINGHIERARCHYVALUE");        String nodesDescription = queryResults.get("DESCRIPTION");        PropUtils.setProps("BillingHierarchyValue", billingHierarchyValue, baseUtils.testDataFilePath);        PropUtils.setProps("NodesDescription", nodesDescription, baseUtils.testDataFilePath);    }    /*    Method to get customer number for auto reissue module     */    public void getCustomerNumberForAutoReissueModule(Scenario logger, String containsOrNot, String isAutoReIssueFlag, String noOfCards, String excludeFromBulkReissue) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String condition = "";        String condition2 = "";        if (containsOrNot.equalsIgnoreCase("is")) {            condition = " and c.expires_on >= sysdate and c.expires_on <= sysdate+crpc.REISSUE_ON_DAYS";        } else {            condition = " and c.expires_on < sysdate or c.expires_on > sysdate+crpc.REISSUE_ON_DAYS";        }        if (excludeFromBulkReissue.equalsIgnoreCase("Y")) {            condition2 = " and c.EXCLUDE_FROM_BULK_REISSUE = 'Y'";        } else if (excludeFromBulkReissue.equalsIgnoreCase("N")) {            condition2 = " and c.EXCLUDE_FROM_BULK_REISSUE = 'N'";        }        String query = "select distinct mcust.customer_no from m_customers mcust \n" +                "left join card_reissue_profiles crp on crp.card_program_oid = mcust.card_program_oid\n" +                "left join CARD_REISS_PROF_CONTROLS crpc on crpc.CARD_REISSUE_PROFILE_OID = crp.CARD_REISSUE_PROFILE_OID\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join cards c on c.customer_mid = mcust.customer_mid\n" +                "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") +                " and crpc.IS_AUTO_REISSUE = '" + isAutoReIssueFlag + "' " + condition + condition2 + " and rownum<=10";        logger.log(query);        List<Map<String, String>> autoReissueProfileAccounts = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (autoReissueProfileAccounts.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "No customer is available which is having 'IS_AUTO_REISSUE' flag '" + isAutoReIssueFlag + "'", baseUtils.testDataFilePath);        } else {            if (noOfCards.equalsIgnoreCase("NoLimit")) {                PropUtils.setProps("autoReissue-accountNumber", autoReissueProfileAccounts.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);            } else {                String query2 = "";                List<Map<String, String>> allCards = new ArrayList<>();                List<Map<String, String>> autoReissueEligibleCards = new ArrayList<>();                for (int i = 0; i <= autoReissueProfileAccounts.size() - 1; i++) {                    query = "select SUBSTR(c.card_no, LENGTH(c.card_no) - 5, 6) as card_no,cp.description as cardProdcut,\n" +                            "d.driver_name,v.license_plate,c.EXCLUDE_FROM_BULK_REISSUE,c.expires_on,cs.description as cardStatus\n" +                            "from m_customers mcust \n" +                            "left join CARD_REISSUE_PROFILES crp on crp.card_program_oid = mcust.card_program_oid\n" +                            "left join CARD_REISS_PROF_CONTROLS crpc on crpc.CARD_REISSUE_PROFILE_OID = crp.CARD_REISSUE_PROFILE_OID\n" +                            "left join cards c on c.customer_mid = mcust.customer_mid\n" +                            "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                            "left join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                            "left join drivers d on d.card_oid = c.card_oid\n" +                            "left join vehicles v on v.card_oid = c.card_oid\n" +                            "where mcust.customer_no = '" + autoReissueProfileAccounts.get(i).get("CUSTOMER_NO") + "' and \n" +                            "crpc.IS_AUTO_REISSUE = '" + isAutoReIssueFlag + "' " + condition + condition2 + "and \n" +                            "crp.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " order by c.card_no";                    autoReissueEligibleCards = commonUtils.getAllRowsOfQueryResultsOnListMap(query);                    if (noOfCards.equalsIgnoreCase("All")) {                        query2 = "select SUBSTR(c.card_no, LENGTH(c.card_no) - 5, 6) as card_no,cp.description as cardProdcut,\n" +                                "d.driver_name,v.license_plate,c.EXCLUDE_FROM_BULK_REISSUE,c.expires_on,cs.description as cardStatus\n" +                                "from m_customers mcust \n" +                                "left join CARD_REISSUE_PROFILES crp on crp.card_program_oid = mcust.card_program_oid\n" +                                "left join CARD_REISS_PROF_CONTROLS crpc on crpc.CARD_REISSUE_PROFILE_OID = crp.CARD_REISSUE_PROFILE_OID\n" +                                "left join cards c on c.customer_mid = mcust.customer_mid\n" +                                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                                "left join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                                "left join drivers d on d.card_oid = c.card_oid\n" +                                "left join vehicles v on v.card_oid = c.card_oid\n" +                                "where mcust.customer_no = '" + autoReissueProfileAccounts.get(i).get("CUSTOMER_NO") + "' and \n" +                                "crpc.IS_AUTO_REISSUE = '" + isAutoReIssueFlag + "' " + condition + " and \n" +                                "crp.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " order by c.card_no";                        allCards = commonUtils.getAllRowsOfQueryResultsOnListMap(query2);                        if (autoReissueEligibleCards.size() == allCards.size()) {                            PropUtils.setProps("autoReissue-accountNumber", autoReissueProfileAccounts.get(i).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                            break;                        }                    } else if (autoReissueEligibleCards.size() >= Integer.parseInt(noOfCards)) {                        PropUtils.setProps("autoReissue-accountNumber", autoReissueProfileAccounts.get(i).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                        break;                    }                    if (i == autoReissueProfileAccounts.size() - 1) {                        PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                        PropUtils.setProps("skipReason", "No card is avilable to execute this scenario", baseUtils.testDataFilePath);                    }                }            }        }    }    /*    Method to validate functionality behaviour in manage auto reissue module     */    public void validateSectionBehaviourInManageAutoReissueModule(Scenario logger, String sectionToValidate, String autoReissueAccountNoFromPropFile) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select SUBSTR(c.card_no, LENGTH(c.card_no) - 5, 6) as card_no,cp.description as cardProduct,\n" +                "d.driver_name,v.license_plate,c.EXCLUDE_FROM_BULK_REISSUE,c.expires_on,cs.description as cardStatus\n" +                "from m_customers mcust \n" +                "left join CARD_REISSUE_PROFILES crp on crp.card_program_oid = mcust.card_program_oid\n" +                "left join CARD_REISS_PROF_CONTROLS crpc on crpc.CARD_REISSUE_PROFILE_OID = crp.CARD_REISSUE_PROFILE_OID\n" +                "left join cards c on c.customer_mid = mcust.customer_mid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "left join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                "left join drivers d on d.card_oid = c.card_oid\n" +                "left join vehicles v on v.card_oid = c.card_oid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, autoReissueAccountNoFromPropFile) + "' and \n" +                "crpc.IS_AUTO_REISSUE = 'Y' and \n" +                "crp.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and c.expires_on >= sysdate and c.expires_on <= sysdate+crpc.REISSUE_ON_DAYS order by c.LAST_UPDATED_AT desc";        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (sectionToValidate.equalsIgnoreCase("countOfRecords")) {            commonPage.assertTwoStrings(logger, String.valueOf(queryResults.size()), usersPage.getCountOfRecords(logger), "Count of records in Manage auto reissue module");        } else if (sectionToValidate.equalsIgnoreCase("DefaultSection")) {            List<WebElement> defaultSectionFields = basePage.getListOfElements(logger, By.xpath("(//tbody[@role='rowgroup']/tr)[1]/td"));            for (int i = 0; i <= queryResults.size() - 1; i++) {                if (queryResults.get(i).get("CARD_NO").equalsIgnoreCase(defaultSectionFields.get(1).getText())) {                    commonPage.assertTwoStrings(logger, "****" + queryResults.get(0).get("CARD_NO"), defaultSectionFields.get(1).getText(), "CardNo");                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(0), "CARDPRODUCT"), defaultSectionFields.get(2).getText(), "Card Product");                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(0), "DRIVER_NAME"), defaultSectionFields.get(3).getText(), "Driver Name");                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(0), "LICENSE_PLATE"), defaultSectionFields.get(4).getText(), "License Plate");                    String autoReissue = commonPage.getSpecificValueFromMapObject(queryResults.get(0), "EXCLUDE_FROM_BULK_REISSUE");                    if (autoReissue.equalsIgnoreCase("Y")) {                        autoReissue = "NO";                    } else {                        autoReissue = "YES";                    }                    commonPage.assertTwoStrings(logger, autoReissue, defaultSectionFields.get(5).getText(), "AutoReissue");                    String expiresOn = commonPage.getSpecificValueFromMapObject(queryResults.get(0), "EXPIRES_ON");                    commonPage.assertTwoStrings(logger, commonPage.getDesiredDateInSpecificFormat(logger, expiresOn.substring(0, 10), 0, "future", "yyyy-mm-dd", "dd/mm/yyyy"), defaultSectionFields.get(6).getText(), "Expires on Date");                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(0), "CARDSTATUS"), defaultSectionFields.get(7).getText(), "Card status");                }            }        } else if (sectionToValidate.equalsIgnoreCase("AllCardProducts")) {            List<String> allProducts = new ArrayList<>();            Set<String> allUniqueProducts = new LinkedHashSet<>();            for (int i = 0; i <= queryResults.size() - 1; i++) {                allProducts.add(queryResults.get(i).get("CARDPRODUCT"));            }            allUniqueProducts.addAll(allProducts);            allProducts.clear();            allProducts.addAll(allUniqueProducts);            if (allProducts.size() == 1) {                commonPage.verifyPresenceOfDivText(logger, allProducts.get(0));            } else {                commonPage.clickButtonUsingSpecificTagName(logger, "All card products", "div");                for (int i = 0; i <= allProducts.size() - 1; i++) {                    if (basePage.whetherElementPresent(logger, By.xpath("//div[@class='filter-content']/mat-option/span[contains(text(),'" + allProducts.get(i) + "')]"))) {                        logger.log("Filter value '" + allProducts.get(i) + "' is present as expected");                    }                }            }            commonPage.handleActionsClassForKeyboardActions("tab");            commonPage.handleActionsClassForKeyboardActions("escape");        }    }    /*    Method to handle change auto reissue Action     */    public void handleChangeAutoReissueAction(Scenario logger, String sectionType, String noOfRecords, String excludeFromBulkReissueFlag) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select SUBSTR(c.card_no, LENGTH(c.card_no) - 5, 6) as card_no,cp.description as cardProduct,\n" +                "d.driver_name,v.license_plate,c.EXCLUDE_FROM_BULK_REISSUE,c.expires_on,cs.description as cardStatus\n" +                "from m_customers mcust \n" +                "left join CARD_REISSUE_PROFILES crp on crp.card_program_oid = mcust.card_program_oid\n" +                "left join CARD_REISS_PROF_CONTROLS crpc on crpc.CARD_REISSUE_PROFILE_OID = crp.CARD_REISSUE_PROFILE_OID\n" +                "left join cards c on c.customer_mid = mcust.customer_mid\n" +                "left join card_status cs on cs.card_status_oid = c.card_status_oid\n" +                "left join card_products cp on cp.card_product_oid = c.card_product_oid\n" +                "left join drivers d on d.card_oid = c.card_oid\n" +                "left join vehicles v on v.card_oid = c.card_oid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "autoReissue-accountNumber") + "' and \n" +                "crpc.IS_AUTO_REISSUE = 'Y' and \n" +                "crp.client_mid = " + PropUtils.getPropValue(properties, "ClientMID")                + " and c.expires_on >= sysdate and c.expires_on <= sysdate+crpc.REISSUE_ON_DAYS order by c.card_no";        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if (sectionType.equalsIgnoreCase("checkbox")) {            if (noOfRecords.equalsIgnoreCase("All")) {                basePage.userClickJSExecutor(logger, By.xpath("(//label[@class='mat-checkbox-layout']/div/input)[1]"));            } else {                int count = 0;                for (int i = 0; i <= queryResults.size() - 1; i++) {                    if (count == Integer.parseInt(noOfRecords)) {                        break;                    }                    if (queryResults.get(i).get("EXCLUDE_FROM_BULK_REISSUE").equalsIgnoreCase(excludeFromBulkReissueFlag)) {                        basePage.userClickJSExecutor(logger, By.xpath("(//label[@class='mat-checkbox-layout']/div/input)[" + (i + 2) + "]"));                        logger.log("Selected check box which is at position " + (i + 2));                        if (noOfRecords.equalsIgnoreCase("1")) {                            PropUtils.setProps("autoReissueRecordCardNo", queryResults.get(i).get("CARD_NO"), baseUtils.testDataFilePath);                        }                        count++;                    }                }            }        }    }    public String validateHierarchyStatusEntryInDB(String accountNo){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query ="select c.description from m_customers mc\n" +                "left join wf_hierarchies wh on mc.customer_mid = wh.owning_member_oid\n" +                "left join constants c on wh.approval_status_cid = c.constant_oid\n" +                "where mc.customer_no = '"+accountNo+"' and mc.client_mid ='"+PropUtils.getPropValue(properties, "ClientMID")+"'";        queryResults = commonUtils.getQueryResultsOnMap(query);        return queryResults.get("DESCRIPTION");    }    public void getCustomerWithNoExpiryDateHierarchy(Scenario logger,String hierarchyType){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select mc.customer_no from relationships r\n" +                "left join relationship_assignments ra on r.relationship_oid = ra.relationship_oid\n" +                "left join hierarchies h on r.hierarchy_oid = h.hierarchy_oid\n" +                "left join m_customers mc on r.member_oid = mc.customer_mid \n" +                "where h.is_customer_financial='Y' and ra.expires_on like '%31-DEC-99%' and mc.client_mid ='"+PropUtils.getPropValue(properties, "ClientMID")+"'";        logger.log("Query :::::"+ query);        queryResults = commonUtils.getQueryResultsOnMap(query);        PropUtils.setProps("havingHierarchy-accountNumber", queryResults.get("CUSTOMER_NO"), baseUtils.testDataFilePath);    }    public void getCustomerWithExpiryDateHierarchy(Scenario logger,String hierarchyType){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select mc.customer_no from relationships r\n" +                "left join relationship_assignments ra on r.relationship_oid = ra.relationship_oid\n" +                "left join hierarchies h on r.hierarchy_oid = h.hierarchy_oid\n" +                "left join m_customers mc on r.member_oid = mc.customer_mid \n" +                "where h.is_customer_financial='Y' and ra.expires_on not like '%31-DEC-99%' and mc.client_mid ='"+PropUtils.getPropValue(properties, "ClientMID")+"'";        logger.log("Query :::::"+ query);        queryResults = commonUtils.getQueryResultsOnMap(query);        PropUtils.setProps("havingHierarchyWithExp-accountNumber", queryResults.get("CUSTOMER_NO"), baseUtils.testDataFilePath);    }    public void getAccountNumberWithPendingHierarchy(Scenario logger, String status){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query ="select mc.customer_no from m_customers mc\n" +                "left join wf_relationships wr on mc.customer_mid = wr.member_oid\n" +                "left join Constants c on wr.approval_status_cid = c.constant_oid\n" +                "where c.description ='Pending' and mc.client_mid ='"+PropUtils.getPropValue(properties, "ClientMID")+"'";        logger.log("Query :::::"+ query);        queryResults = commonUtils.getQueryResultsOnMap(query);        PropUtils.setProps("havingPendingHierarchy-accountNumber", queryResults.get("CUSTOMER_NO"), baseUtils.testDataFilePath);    }    public void getChildAccountNumberWithPendingHierarchy(Scenario logger, String status){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query ="select mc.customer_no from m_customers mc\n" +                "left join wf_relationships wr on mc.customer_mid = wr.member_oid\n" +                "left join wf_hierarchies wh on wr.wf_hierarchy_oid = wh.wf_hierarchy_oid \n" +                "left join Constants c on wr.approval_status_cid = c.constant_oid\n" +                "where c.description ='"+status+"' and mc.client_mid ='"+PropUtils.getPropValue(properties, "ClientMID")+"' and \n" +                "wh.is_customer_financial='Y' and wr.wf_relationship_oid != wr.wf_parent_relationship_oid";        logger.log("Query :::::"+ query);        queryResults = commonUtils.getQueryResultsOnMap(query);        PropUtils.setProps("havingPendingHierarchy-childAccountNumber", queryResults.get("CUSTOMER_NO"), baseUtils.testDataFilePath);    }    public void getParentAccountNumberWithChildAccountInHierarchy(Scenario logger, String childAccount){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query ="Select r.parent_relationship_oid from hierarchies h\n" +                "inner join  relationships r ON h.hierarchy_oid = r.hierarchy_oid\n" +                "inner join m_customers mc on r.member_oid = mc.customer_mid\n" +                "where mc.customer_no='"+childAccount+"' and r.relationship_oid != r.parent_relationship_oid";        logger.log("Query :::::"+ query);        queryResults = commonUtils.getQueryResultsOnMap(query);         String query1 = " Select mc.customer_no from hierarchies h\n" +                 "inner join  relationships r ON h.hierarchy_oid = r.hierarchy_oid\n" +                 "inner join m_customers mc on r.member_oid = mc.customer_mid\n" +                 "where r.relationship_oid = '"+queryResults.get("PARENT_RELATIONSHIP_OID")+"' and r.relationship_oid = r.parent_relationship_oid";        queryResults = commonUtils.getQueryResultsOnMap(query1);        PropUtils.setProps("havingHierarchy-parentAccountNumber", queryResults.get("CUSTOMER_NO"), baseUtils.testDataFilePath);    }}