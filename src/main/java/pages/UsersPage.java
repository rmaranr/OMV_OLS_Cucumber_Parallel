package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.openqa.selenium.By;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.interactions.Actions;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import utilities.ui.PasswordGenerator;import java.awt.*;import java.util.*;import java.util.List;public class UsersPage {    private WebDriver driver;    private BasePage basePage;    CommonDBUtils commonUtils;    private BaseUtils baseUtils;    private CommonPage commonPage;    public Scenario logger;    /* Constructor to get the driver object */    public UsersPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        commonPage = new CommonPage(driver);    }    //Locators    private static final By countOfRecords = By.cssSelector("div[class='header']>div>mat-grid-list");    private static final By lblAccountNumber = By.cssSelector("div[class='account-number']");    private static final By lblCountOfRecords = By.cssSelector("div[class='view-page-list']");    private static final By btnNextOnTheForm = By.cssSelector("button[id='submit-button']");    private static final By radioButtonCountOnTheForm = By.cssSelector("div[class='mat-checkbox-inner-container']>input");    private static final By liRecords = By.xpath("(//div[@class='margin-content'])[2]/div/mat-accordion/div");    private static final By accountNumbersCountOnTheForm = By.xpath("//span[@class='mat-checkbox-label']/div[2]");    private static final By msgSuccessAddUser = By.cssSelector("div[class='content']>div[class='header']>div");    private static final By msgSuccessEditUser = By.cssSelector("div[class='content']>div[class='header']");    private static final By msgSuccessEditStatus = By.xpath("(//div[@class='content']/div[@class='header']/div[1])[2]");    private static final By btnApplyOnFilters = By.xpath("//span[contains(text(),'Apply')]");    private static final By btnResetAllFilters = By.xpath("//div[contains(text(),'Reset all filters')]");    private static final By btnSortOption = By.xpath("//span[contains(text(),'Sort')]");    private static final By eleOutsideOfUsermoduleFields = By.cssSelector("div[class='mat-horizontal-content-container']");    private static final By btnSubmit = By.cssSelector("button[id='submit-button']");    private static final By eleOutsideOfFields = By.cssSelector("div[class='admin-content-wrapper ng-star-inserted']");    private static final By dropStatusInChangeStatusForm = By.xpath("//mav-select[@name='status']/mat-select/div/div[1]");    private static final By lblSelectedStatusFromChangeStatusDropDown = By.xpath("(//div[@class='mat-select-value']/span/span)[2]");    /*    Method to get count of     */    public String getCountOfRecords(Scenario logger) {//        List<WebElement> list = basePage.getListOfElements(logger, countOfRecords);//        int count = list.size();        String count = basePage.userGetTextFromWebElement(logger, lblCountOfRecords);        return count.substring(0, count.indexOf(' '));    }    /*    Method to get account number from users page     */    public String getAccountNumberFromUsersPage(Scenario logger) {        String accountNumber = basePage.userGetTextFromWebElement(logger, lblAccountNumber);        PropUtils.setProps("accountNumber", accountNumber, baseUtils.testDataFilePath);        return accountNumber;    }    /*    Module to enter a text field value in usermodule and validate error message     */    public void enterValueInUserModule(Scenario logger, String fieldName, String fieldValue, String errorMessage) {        By fieldLocator = null;        if (fieldName.contains("mail")) {            fieldLocator = By.cssSelector("ols-email[ng-reflect-name='emailAddress']>input");        } else {            fieldLocator = By.cssSelector("mav-input[name='" + fieldName + "']>input");        }        basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        basePage.userClick(logger, eleOutsideOfUsermoduleFields);        if (fieldValue.equals(basePage.userGetTextFromWebElement(logger, fieldLocator))) {            By errorLocator = By.xpath("//mat-error[contains(text(),'" + errorMessage + "')]");            if (basePage.whetherElementPresent(logger, errorLocator)) {                logger.log("Error message id displayed as expected");            } else {                logger.log("Error message is not displayed");            }        }    }    /*    Method to enter a value in corresponding text field     */    public void enterValueInCorrespodingTextField(Scenario logger, String fieldName, String fieldValue, String formType, String moduleName) {        Properties testDataProperties = PropUtils.getProps(baseUtils.testDataFile);        By fieldLocator = null;        if(basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input"))) {            fieldLocator = By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input");        }else if(basePage.whetherElementPresent(logger,By.cssSelector("mav-input[name='" + fieldName + "']>input") )) {            fieldLocator = By.cssSelector("mav-input[name='" + fieldName + "']>input");        }        if (formType.equalsIgnoreCase("Add")) {            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        } else if (formType.equalsIgnoreCase("Edit")) {            basePage.assertTwoStrings(logger, PropUtils.getPropValue(testDataProperties, moduleName + "-" + fieldName), getValueFromCorrespondingTextFieldInEditUser(logger, fieldName));            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        } else if (formType.equalsIgnoreCase("Edit Contact")) {            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        } else if (formType.equalsIgnoreCase("Edit Address")) {            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        } else if (formType.equalsIgnoreCase("clone")) {            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(testDataProperties, moduleName + "-" + fieldName), getValueFromCorrespondingTextFieldInEditUser(logger, fieldName), fieldName + " in " + formType + " page");            basePage.userTypeIntoTextField(logger, fieldLocator, fieldValue);        }        logger.log(fieldValue + " has been entered in the corresponding field " + fieldName);    }    /*    Method to get value from corresponding text field     */    public String getValueFromCorrespondingTextFieldInEditUser(Scenario logger, String fieldName) {//        By fieldLocator = By.cssSelector("mav-input[name='" + fieldName + "']>input");//        return basePage.userGetTextUsingGetAttribute(logger, fieldLocator);        By locator = By.cssSelector("mav-input[ng-reflect-name='" + fieldName + "']>input");        if(!basePage.getStatusOfElement(locator)){            locator = By.cssSelector("mav-input[name='" + fieldName + "']>input");        }        return commonPage.getAttributeValue(locator,"ng-reflect-model");    }    /*    Method to get value from non editable text field     */    /*public String getValueFromCorrespondingNonEditableTextFieldInEditUser(Scenario logger, String fieldName){        By fieldLocator = By.cssSelector("mav-input[name='"+fieldName+"']>input");//        return basePage.userGetTextUsingGetAttribute(logger,fieldLocator);        return driver.findElement(fieldLocator).getAttribute("value");    }*/    /*    Method to select value in drop down     */    public void selectValueFromDropDown(Scenario logger, String dropValue, String dropName) {        By dropNameLocator = By.cssSelector("mat-select[name='" + dropName + "']");        basePage.userClick(logger, dropNameLocator);        commonPage.sleepForFewSeconds(2);        By dropValueLocator = By.xpath("//span[contains(text(),'" + dropValue + "')]");        ((JavascriptExecutor) driver)                .executeScript("window.scrollTo(0, document.body.scrollHeight)");        Actions actions = new Actions(driver);        actions.moveToElement(driver.findElement(dropValueLocator)).click().perform();        logger.log(dropValue + " has been selected from drop down " + dropName);    }    /*    Method to select value in correspoding drop down     */    public String selectValueInCorrespodingDropdown(Scenario logger, String dropValue, String dropName) {        By dropNameLocator = By.cssSelector("mav-select[name='" + dropName + "']");        basePage.userClick(logger, dropNameLocator);        commonPage.sleepForFewSeconds(2);        try {            Robot robot = new Robot();        } catch (Exception e) {        }        dropValue = getSpecificValueFromDBBasedOnClient(logger, dropValue);//        List<WebElement> dropElements = basePage.getListOfElements(logger, By.cssSelector("mat-option>span"));//        for (int i=0;i<=dropElements.size()-1;i++) {//            driver.findElement(dropNameLocator).sendKeys(Keys.DOWN);//            if (driver.findElement(By.cssSelector("mat-option")).getAttribute("ng-reflect-value").equals(dropValue)) {//                dropElements.get(i).click();//            }//        }        By dropValueLocator = By.xpath("//span[contains(text(),'" + dropValue + "')]");//        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", driver.findElement(dropValueLocator));        ((JavascriptExecutor) driver)                .executeScript("window.scrollTo(0, document.body.scrollHeight)");//        basePage.userClick(logger,dropValueLocator);        Actions actions = new Actions(driver);        actions.moveToElement(driver.findElement(dropValueLocator)).click().perform();        logger.log(dropValue + " has been selected from drop down " + dropName);        return dropValue;    }    /*    Method to get specific value from contacts table     */    public String getSpecificValueFromDBBasedOnClient(Scenario logger, String dropDownValueType) {        Properties testDataProp = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        Map<String, String> queryResults = new HashMap<>();        if (dropDownValueType.equals("contactTypeDescription")) {            query = "select distinct DESCRIPTION from contact_types cty\n" +                    "inner join m_clients mc on mc.client_mid = cty.client_mid\n" +                    "Where mc.client_mid in ("+PropUtils.getPropValue(testDataProp, "ClientMID")+") \n" +                    "and cty.IS_MULTIPLE_CONTACTS_ALLOWED = 'Y' order by initcap (cty.DESCRIPTION) asc";            queryResults = commonUtils.getQueryResultsOnMap(query);            if(queryResults.size()==0){                query = "select distinct ct.description from contacts c\n" +                        "left join contact_types ct on ct.contact_type_oid != c.contact_type_oid\n" +                        "left join m_customers mcust on mcust.customer_mid = c.member_oid\n" +                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                        "where mcust.customer_no = "+PropUtils.getPropValue(testDataProp, "accountNumber")                        +" and mc.client_mid = "+PropUtils.getPropValue(testDataProp, "ClientMID")+" and ct.IS_MULTIPLE_CONTACTS_ALLOWED = 'N'";            }            queryResults = commonUtils.getQueryResultsOnMap(query);        } else if (dropDownValueType.equals("usersRoleDescription")) {            String accountCondition="";            if(!basePage.userGetTextFromWebElement(logger,By.xpath("//div[contains(@class,'account-number')]")).equalsIgnoreCase("Select account"))            {                accountCondition="mcu.customer_no = '" + basePage.userGetTextFromWebElement(logger,By.xpath("//div[contains(@class,'account-number')]")) + "' " +                "and";            }            query = "select distinct acg.description from access_roles acg\n" +                    "inner join m_clients mc on mc.client_group_mid = acg.client_group_mid\n" +                    "inner join m_customers mcu on mcu.client_mid = mc.client_mid\n" +                    "Where "+accountCondition+" mc.client_mid in (" + PropUtils.getPropValue(testDataProp, "ClientMID") + ")\n" +                    "and acg.ACCESS_MEMBER_TYPE_CID = 2703 order by initcap (acg.DESCRIPTION) asc";            queryResults = commonUtils.getQueryResultsOnMap(query);        } else if (dropDownValueType.equals("state")) {            query = "select description from states s\n" +                    "inner join m_clients mc on mc.country_oid = s.country_oid\n" +                    "where mc.client_mid in (" + PropUtils.getPropValue(testDataProp, "ClientMID") + ")";            queryResults = commonUtils.getQueryResultsOnMap(query);        }        logger.log(query);        return queryResults.get("DESCRIPTION");    }    /*    Method to click on Next or submit on the form     */    public void clickOnNextOnTheForm(Scenario logger) {        basePage.userClick(logger, btnNextOnTheForm);    }    /*    Method to select an account based on account number in add user form     */    public void selectAccountBasedOnAccountNumber(Scenario logger, String accountNumber) {        List<WebElement> accountNumbers = basePage.getListOfElements(logger, accountNumbersCountOnTheForm);        List<WebElement> radioButtons = basePage.getListOfElements(logger, radioButtonCountOnTheForm);        if (accountNumbers.size() != 1) {            for (int i = 0; i <= accountNumbers.size() - 1; i++) {                if ((accountNumbers.get(i).getText()).equalsIgnoreCase(accountNumber)) {                    if (radioButtons.get(i).isSelected()) {                    } else {//                        basePage.userClickJSExecutor(logger,By.xpath("(//div[@class='mat-checkbox-inner-container']/input)["+i+"]"));                        Actions action = new Actions(driver);                        action.moveToElement(radioButtons.get(i)).click().build().perform();                        break;//                        radioButtons.get(i).click();                    }                }            }        }    }    /*    Method to validate success message of add user     */    public void validateSuccessMessageOfAddUser(Scenario logger, String expSuccessMessage) {        String actSuccessMessage = basePage.userGetTextFromWebElement(logger, msgSuccessAddUser);        basePage.assertTwoStrings(logger, expSuccessMessage, actSuccessMessage);    }    /*    Method to validate success message of Edit user     */    public void validateSuccessMessageOfEditUser(Scenario logger, String expSuccessMessage) {        String actSuccessMessage = basePage.userGetTextFromWebElement(logger, msgSuccessEditUser);        if(!actSuccessMessage.equalsIgnoreCase("Failure sending e-mail.")) {            basePage.assertTwoStrings(logger, expSuccessMessage, actSuccessMessage);        }    }    /*    Method to validate success message of Edit Status     */    public void validateSuccessMessageOfEditStatus(Scenario logger, String expSuccessMessage) {//        String actSuccessMessage = basePage.userGetTextFromWebElement(logger,msgSuccessEditStatus);//        basePage.assertTwoStrings(logger,expSuccessMessage,actSuccessMessage);        By contactSuccessMessage = By.xpath("//*[contains(text(),'" + expSuccessMessage + "')]");        if (basePage.whetherElementPresent(logger, contactSuccessMessage)) {            logger.log(expSuccessMessage + " is displayed as expected.");        } else {            logger.log(expSuccessMessage + " is not displayed");        }    }    /*    Method to click on Save button     */    public void clickSaveButton(Scenario logger) {        basePage.userClickJSExecutor(logger, btnSubmit);    }    /*    Method to click on Submit button     */    public void clickOnSubmitButton(Scenario logger, String button) {        By btnSubmit = By.xpath("//span[contains(text(),'" + button + "')]");        basePage.userClick(logger, btnSubmit);    }    /*    Method to enter value in element based on the type     */    public void enterValueBasedOfItsType(Scenario logger, String fieldValue, String fieldName, String formType, String moduleName, String lengthOfField, String specialChars) {        if (fieldValue.equalsIgnoreCase("RandomAlphanumericWithFewSpecialChars")) {            fieldValue = PasswordGenerator.generateAlphabatesWithFewSpecialChars(logger, Integer.parseInt(lengthOfField), specialChars);            enterValueInCorrespodingTextField(logger, fieldName, fieldValue, formType, moduleName);        } else if (fieldValue.equalsIgnoreCase("RandomAlphanumeric")) {            fieldValue = PasswordGenerator.generateAlphaNumeric(logger, Integer.parseInt(lengthOfField));            enterValueInCorrespodingTextField(logger, fieldName, fieldValue, formType, moduleName);        } else if (fieldValue.equalsIgnoreCase("Numeric")) {            fieldValue = PasswordGenerator.generateNumeric(Integer.parseInt(lengthOfField));            enterValueInCorrespodingTextField(logger, fieldName, fieldValue, formType, moduleName);        } else {            enterValueInCorrespodingTextField(logger, fieldName, fieldValue, formType, moduleName);        }    }    /*    Method to select values from filter     */    public void selectValuesFromFilter(Scenario logger, String filterName, String filterValues) {        String filterValuesArray[] = {filterValues};        if (filterValues.contains(",")) {            filterValuesArray = filterValues.split(",");        }        By locator = By.xpath("//div[contains(text(),'" + filterName + "')]");        basePage.userClick(logger, locator);        basePage.userClick(logger, By.xpath("(//mat-option/mat-pseudo-checkbox[@class='mat-option-pseudo-checkbox mat-pseudo-checkbox ng-star-inserted mat-pseudo-checkbox-checked'])[1]"));        By filterValuesLocator = By.cssSelector("mat-option>mat-pseudo-checkbox[class='mat-option-pseudo-checkbox mat-pseudo-checkbox ng-star-inserted']");        List<WebElement> filterCheckBoxes = basePage.getListOfElements(logger, filterValuesLocator);        By checkBoxNameLocator = By.cssSelector("mat-option>span");        List<WebElement> checkBoxNameList = basePage.getListOfElements(logger, checkBoxNameLocator);        int j = 1;        for (int i = 0; i <= filterValuesArray.length - 1; i++) {            for (int k = 0; k <= checkBoxNameList.size() - 1; k++) {                if (filterValuesArray[i].equals(checkBoxNameList.get(k).getText())) {                    try {                        filterCheckBoxes.get(k).click();                        logger.log(checkBoxNameList.get(k).getText() + " value is checked");                    } catch (Exception e) {                        logger.log("Filter Name is : " + filterName);                        logger.log("filter Values are : " + filterValues);                        logger.log(filterCheckBoxes.get(k).toString());                    }                    break;                }            }        }        basePage.userClick(logger, btnApplyOnFilters);        commonPage.sleepForFewSeconds(2);    }    /*    Method to click on Reset All filters button     */    public void clickResetAllFilters(Scenario logger) {        basePage.userClick(logger, btnResetAllFilters);    }    /*    Method to get user statuses in comma separated available for an account from database     */    public String getAvailableUserStatusesForAnAccount() {// Get user statuses based on account which selected at the top right corner        String userStatusesQuery = "select * from constants where constant_type_oid = 25";        List<Map<String, String>> userStatuses = commonUtils.getAllRowsOfQueryResultsOnListMap(userStatusesQuery);        String dbUserStatusesForAnAccount = "";        for (int i = 0; i <= userStatuses.size() - 1; i++) {            if (i == userStatuses.size() - 1) {                dbUserStatusesForAnAccount = dbUserStatusesForAnAccount + userStatuses.get(i).get("DESCRIPTION");            } else {                dbUserStatusesForAnAccount = dbUserStatusesForAnAccount + userStatuses.get(i).get("DESCRIPTION") + ",";            }        }        return dbUserStatusesForAnAccount;    }    /*    Method to get user roles in comma seperated available for an account from database     */    public String getAvailableUserRolesForAnAccount(Scenario logger, String accountNumber) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        // Get user roles based on account which selected at the top right corner        String userRolesQuery = "select * from access_roles where access_member_type_cid = 2703";        logger.log("All roles for logged in user " + userRolesQuery);        List<Map<String, String>> userRoles = commonUtils.getAllRowsOfQueryResultsOnListMap(userRolesQuery);        String dbUserRolesForAnAccount = "";        for (int i = 0; i <= userRoles.size() - 1; i++) {            if (i == userRoles.size() - 1) {                dbUserRolesForAnAccount = dbUserRolesForAnAccount + userRoles.get(i).get("DESCRIPTION");            } else {                dbUserRolesForAnAccount = dbUserRolesForAnAccount + userRoles.get(i).get("DESCRIPTION") + ",";            }        }        return dbUserRolesForAnAccount;    }    /*    Method to get user status codes based on user status description     */    public String getUserStatusCodesBasedOnUserStatusDescription(String dbUserStatusesForAnAccount) {        Map<String, String> userStatusesIdsMap;        String userStatusesIds = "";        String arrDbUserStatusesForAnAccount[] = {dbUserStatusesForAnAccount};        if (dbUserStatusesForAnAccount.contains(",")) {            arrDbUserStatusesForAnAccount = dbUserStatusesForAnAccount.split(",");        }        for (int j = 0; j <= arrDbUserStatusesForAnAccount.length - 1; j++) {            userStatusesIdsMap = commonUtils.getQueryResultsOnMap("select distinct logon_status_cid from users left join constants on users.logon_status_cid = constants.constant_oid \n" +                    "where constants.description = '" + arrDbUserStatusesForAnAccount[j] + "'");            if (j == arrDbUserStatusesForAnAccount.length - 1) {                userStatusesIds = userStatusesIds + (userStatusesIdsMap.get("LOGON_STATUS_CID"));            } else {                userStatusesIds = userStatusesIds + (userStatusesIdsMap.get("LOGON_STATUS_CID")) + ",";            }        }        return userStatusesIds;    }    /*    Method to get user roles based on user roles description     */    public String getUserRoleCodesBasedOnUserRolesDescription(String dbUserRolesForAnAccount) {        Map<String, String> userRolesIdsMap;        String userRolesIds = "";        String arrDbUserRolesForAnAccount[] = {dbUserRolesForAnAccount};        if (dbUserRolesForAnAccount.contains(",")) {            arrDbUserRolesForAnAccount = dbUserRolesForAnAccount.split(",");        }        for (int k = 0; k <= arrDbUserRolesForAnAccount.length - 1; k++) {            userRolesIdsMap = commonUtils.getQueryResultsOnMap("select access_role_oid from access_roles where description = '" + arrDbUserRolesForAnAccount[k] + "'");            String dbRoleID = userRolesIdsMap.get("ACCESS_ROLE_OID");            if (!dbRoleID.isEmpty()) {                if (k == arrDbUserRolesForAnAccount.length - 1) {                    userRolesIds = userRolesIds + dbRoleID;                } else {                    userRolesIds = userRolesIds + dbRoleID + ",";                }            }        }        return userRolesIds;    }    /*    Method to click on sort option and select value     */    public void selectValueFromSortOption(Scenario logger, String sortOptionValue) {        basePage.userClick(logger, btnSortOption);        By locator = By.xpath("//div[contains(text(),'" + sortOptionValue + "')]");        basePage.userClick(logger, locator);    }    /*    Method to fetch records based on name of record in comma separated     */    /*public int getNameOfRecords(Scenario logger){        By locator = By.cssSelector("div[class='ng-star-inserted']>mat-expansion-panel");        List<WebElement> list = basePage.getListOfElements(logger,locator);        return list.size();    }*/    /*    Method to get list of accounts associated to logged in user     */    public String getAccountNumbersBasedOnUser(Scenario logger, String logonId) {        String query = "select customer_no from m_customers mcu\n" +                "inner join user_members on user_members.member_oid = mcu.customer_mid\n" +                "inner join users on users.user_oid = user_members.user_oid \n" +                "inner join m_clients mc on mc.client_mid = mcu.client_mid\n" +                "where users.logon_id = '" + logonId + "' and mc.SHORT_NAME='" + PropUtils.getPropValue(baseUtils.inputProp, BaseUtils.clientCountry) + "'";        List<Map<String, String>> allAccounts;        allAccounts = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        String accountNumbers = "";        for (int i = 0; i <= allAccounts.size() - 1; i++) {            if (i == allAccounts.size() - 1) {                accountNumbers = accountNumbers + allAccounts.get(i).get("CUSTOMER_NO");                break;            }            accountNumbers = accountNumbers + allAccounts.get(i).get("CUSTOMER_NO") + ",";        }        return accountNumbers;    }    /*    Method to select account number for logged in user in Account Status form     */    public void selectAccountNumberForLoggedInUserInAccountStatusForm(Scenario logger, String accountNumbers) {        String[] arrAccountNumbers = {accountNumbers};        if (accountNumbers.contains(",")) {            arrAccountNumbers = accountNumbers.split(",");        }        for (int i = 0; i <= arrAccountNumbers.length - 1; i++) {            selectAccountBasedOnAccountNumber(logger, arrAccountNumbers[i]);        }    }    /*    Method to get array variable from String variable     */    public String[] getArrayVariableFromStringVariable(String variable) {        String[] arrVariable = {variable};        if (variable.contains(",")) {            arrVariable = variable.split(",");        }        return arrVariable;    }    /*    Method to verify selected drop down status in change status form should match with the selected user     */    public void verifySelectedStatusInChangeStatusWithSelectedUserStatus(Scenario logger, String expStatus) {        String actStatus = basePage.userGetTextFromWebElement(logger, lblSelectedStatusFromChangeStatusDropDown);        Properties testDataProperties = PropUtils.getProps(baseUtils.testDataFile);        if (PropUtils.getPropValue(testDataProperties, expStatus).equalsIgnoreCase(actStatus)) {            logger.log("Status is showing as expected");        } else {            logger.log("Expected status is not equal to actual status 'Expected is " + PropUtils.getPropValue(testDataProperties, expStatus) + "' 'Actual is '" + actStatus + "'");        }    }    /*    Method to select status of user from status drop down in change status form     */    public void selectStatusInChangeStatusForm(Scenario logger, String status) {        basePage.userClick(logger, dropStatusInChangeStatusForm);        List<WebElement>ele = basePage.getListOfElements(logger,By.xpath("//span[contains(text(),'" + status + "')]"));        if(ele.size()==1){            ele.get(0).click();        }else{            ele = basePage.getListOfElements(logger,By.cssSelector("span[class='mat-option-text']"));            for(int i=0;i<=ele.size();i++){                if(!ele.get(i).getText().equalsIgnoreCase(status)){                    ele.get(i).click();                    break;                }            }        }//        By statusLocator = By.xpath("//span[contains(text(),'" + status + "')]");//        basePage.userClick(logger, statusLocator);    }    /*    Method to validate changed status in database for a specific user     */    public void validateChangedStatusInDatabaseForAUser(Scenario logger, String newStatus, String logonId) {        String query = "select description from constants\n" +                "inner join users on users.logon_status_cid = constants.constant_oid\n" +                "where users.logon_id = '" + logonId + "'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        basePage.assertTwoStrings(logger, newStatus, queryResults.get("DESCRIPTION"));    }    /*Method to click on sort option and select value*/    public void selectAscendingSort(Scenario logger) {        basePage.userClick(logger, btnSortOption);        By locator = By.xpath("//div[contains(text(),'Newest')]");        basePage.userClick(logger, locator);        commonPage.sleepForFewSeconds(2);        basePage.userClick(logger, eleOutsideOfFields);        commonPage.sleepForFewSeconds(2);    }    /*      Method to click on sort option and select value       */    public void selectDescendingSort(Scenario logger){        basePage.userClick(logger, btnSortOption);        By locator = By.xpath("//div[contains(text(),'Oldest')]");        basePage.userClick(logger, locator);        commonPage.sleepForFewSeconds(2);        basePage.userClick(logger, eleOutsideOfFields);        commonPage.sleepForFewSeconds(2);    }    public void scrollDown(Scenario logger) {        WebElement scrollArea = driver.findElement(By.xpath("//a[contains(text(),'Home')]"));        JavascriptExecutor js = (JavascriptExecutor) driver;        js.executeScript("arguments[0].scrollIntoView()", scrollArea);//        js.executeScript("window.scrollTo(0, document.body.scrollHeight)");    }    /*  Method to fetch records based on name of record   */    public String getNameOfRecords(Scenario logger) {        //      ArrayList<String> obtainedList = new ArrayList<>();        List<WebElement> listOfRecords = basePage.getListOfElements(logger, liRecords);        int sizeOfRecords = listOfRecords.size();        logger.log("Size is :" + sizeOfRecords);        By fieldLocator = null;        String headerValue = "";        for (int i = 1; i <= sizeOfRecords; i = i + 4) {            fieldLocator = By.xpath("(//div[@class='panel-header-field header-field-primary'])[" + i + "]");            headerValue = basePage.userGetTextFromWebElement(logger, fieldLocator);            logger.log("UiList:" + headerValue);        }        return headerValue;    }    /*    Method to get account number which is eligible to create adhoc fee     */    public void verifyUserIsEligibleToCreateAdhocFeeOrNot(String newOrOld){        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        Properties commonProp = PropUtils.getProps(baseUtils.commonPropertyFile);        String accessGroupOid = "select arc.access_group_oid,u.user_oid from access_role_clients arc \n" +                "inner join user_roles ur on ur.access_role_oid = arc.access_role_oid\n" +                "inner join users u on u.user_oid = ur.user_oid\n" +                "where arc.client_mid = "+ PropUtils.getPropValue(properties,"ClientMID")                +" and u.logon_id = '"+PropUtils.getPropValue(commonProp,"currentUserName")+"'";        Map<String, String>agQR = commonUtils.getQueryResultsOnMap(accessGroupOid);        String query = "select op.MAX_SUNDRY_ADJ_ENTRY_AMNT from operation_limit op\n" +                "left join users u on u.user_oid = op.user_oid\n" +                "where op.client_mid = "+PropUtils.getPropValue(properties,"ClientMID")+                " and op.useR_oid = "+ agQR.get("USER_OID");        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        if(queryResults.size()>0){            PropUtils.setProps("maxSundryAdjEntryAmnt",queryResults.get(0).get("MAX_SUNDRY_ADJ_ENTRY_AMNT"),baseUtils.testDataFilePath);        }else {            query = "select op.MAX_SUNDRY_ADJ_ENTRY_AMNT from operation_limit op\n" +                    "left join users u on u.user_oid = op.user_oid\n" +                    "where op.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") +                    " and op.access_group_oid = " + agQR.get("ACCESS_GROUP_OID");            queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);            if (queryResults.size() > 0) {                PropUtils.setProps("maxSundryAdjEntryAmnt", queryResults.get(0).get("MAX_SUNDRY_ADJ_ENTRY_AMNT"), baseUtils.testDataFilePath);            }        }        if(queryResults.size()>0){            query = "select * from m_customers where client_mid = "+PropUtils.getPropValue(properties,"ClientMID")+" and rownum<=30";            queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);            PropUtils.setProps("commonAccountNo",queryResults.get(0).get("CUSTOMER_NO"),baseUtils.testDataFilePath);            if(newOrOld.equalsIgnoreCase("OldReference")){                String feeRecords = "";                List<Map<String, String>>fRQR = new ArrayList<>();                for(int i=0;i<=queryResults.size()-1;i++){                    feeRecords = "select t.reference from transactions t \n" +                            "left join products p on p.product_oid = t.product_oid\n" +                            "left join m_customers mcust on mcust.customer_mid = t.customer_mid\n" +                            "where mcust.client_mid = 101 and mcust.customer_no = '"+queryResults.get(i).get("CUSTOMER_NO")+"'";                    fRQR = commonUtils.getAllRowsOfQueryResultsOnListMap(feeRecords);                    if(fRQR.size()>0){                        PropUtils.setProps("commonAccountNo",queryResults.get(i).get("CUSTOMER_NO"),baseUtils.testDataFilePath);                        PropUtils.setProps("OldReference",fRQR.get(0).get("REFERENCE"),baseUtils.testDataFilePath);                        break;                    }                }            }        }else{            PropUtils.setProps("testStatus","Skipped",baseUtils.testDataFilePath);            PropUtils.setProps("skipReason","There is no entry in Operation limit table ",baseUtils.testDataFilePath);        }    }}