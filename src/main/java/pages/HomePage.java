package pages;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import java.util.List;import java.util.Map;import java.util.Random;public class HomePage {    private WebDriver driver;    private BasePage basePage;    CommonDBUtils commonUtils;    private BaseUtils baseUtils;    public Scenario logger;    /* Constructor to get the driver object */    public HomePage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();    }    private static final By iconUserBadge = By.cssSelector("div[id='user-profile-link']>mav-button");    private static final By lblUserBadgeLetter = By.cssSelector("span[class='button-content']");    private static final By optEditProfile = By.xpath("//span[contains(text(),'Edit profile')]");    private static final By optChangePassword = By.xpath("//span[contains(text(),'Change password')]");    private static final By optHelp = By.xpath("//span[contains(text(),'Help')]");    private static final By optLogout = By.xpath("//span[contains(text(),'Log out')]");    private static final By home = By.cssSelector("mav-svg-icon[ng-reflect-value='fas home']");    private static final By errSixPwdsForNewPasswordField = By.cssSelector("mav-form-field[ng-reflect-label='New password']>mat-form-field>div>div[class='mat-form-field-subscript-wrapper']>div>mat-error>span");    private static final By errorPasswordDoesNotMatchForCurrentPassword = By.cssSelector("mat-error[class='mat-error ng-star-inserted']");    private static final By errPasswordDoesNotMatch = By.cssSelector("mav-form-field[ng-reflect-label='Confirm new password']>mat-form-field>div>div[class='mat-form-field-subscript-wrapper']>div>mat-error");    private static final By liAccountName = By.cssSelector("div[class='account-name']");    private static final By listOfAccountsInUsers = By.xpath("//mat-option[@class='mat-option mat-focus-indicator ng-star-inserted']");    /*    Method to verify first letter of user badge is same as "UserName"     */    public void verifyFirstLetterOfUserBadge(Scenario logger, String userName){        String query = "select name from users where logon_id = '"+ PropUtils.getPropValue(baseUtils.inputProp,userName) +"'";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String firstLetter = basePage.userGetTextFromWebElement(logger, lblUserBadgeLetter,10);        String expected = Character.toString(queryResults.get("NAME").charAt(0));        basePage.assertTwoStrings(logger, expected.toUpperCase(),firstLetter);    }    /*    Method to click on user badge icon     */    public void clickUserBadgeIcon(Scenario logger){        basePage.userClick(logger,iconUserBadge);    }    /*    Method to verify presence of My Profile option in User Badge     */    public void verifyPresenceOfEditProfile(Scenario logger){        if(basePage.whetherElementPresent(logger,optEditProfile)){            logger.log("Edit profile is present in user badge");        }    }    /*    Method to verify presence of My Profile option in User Badge     */    public void verifyPresenceOfChangePassword(Scenario logger){        if(basePage.whetherElementPresent(logger,optChangePassword)){            logger.log("Change password is present in user badge");        }    }    /*    Method to verify presence of My Profile option in User Badge     */    public void verifyPresenceOfHelp(Scenario logger){        if(basePage.whetherElementPresent(logger,optHelp)){            logger.log("Help is present in user badge");        }    }    /*    Method to verify presence of My Profile option in User Badge     */    public void clickOnLogOut(Scenario logger){        basePage.userClick(logger,optLogout);        logger.log("Logout button is clicked");    }    /*    Method to verify presence of My Profile option in User Badge     */    public void clickOnChangePasswordFromUserBadge(Scenario logger){        basePage.userClick(logger,optChangePassword);        logger.log("Change Password is clicked");    }    /*    Method to verify the presence of menu after logged in to the application     */    public void verifyMenuPresence(Scenario logger, String menuName, String menuOrSubmenu){        final By lblMenu = By.xpath("//span[contains(text(),'"+menuName+"')]");        basePage.whetherElementPresent(logger,lblMenu);        logger.log(menuOrSubmenu+" : is displayed ");    }    /*    Method to verify the presence of menu after logged in to the application     */    public void clickMenu(Scenario logger, String menuName, String menuOrSubmenu){        final By lblMenu = By.xpath("//span[contains(text(),'"+menuName+"')]");        basePage.waitUntilElementLocatedOrRefreshed(lblMenu);        basePage.userClick(logger,lblMenu);    }    /*   Method to verify 6 password matched for New Password field    */    public void verifyNewPasswordErrMsgForLastSixPwdMatches(Scenario logger, String expMessage){        String actMessage = basePage.userGetTextFromWebElement(logger, errSixPwdsForNewPasswordField);        basePage.assertTwoStrings(logger, expMessage, actMessage);    }    /*   Method to verify 6 password matched for New Password field    */    public void verifyCurrentPasswordErrMsgForLastSixPwdDoesNotMatch(Scenario logger, String expMessage){        String actMessage = basePage.userGetTextFromWebElement(logger, errorPasswordDoesNotMatchForCurrentPassword);        basePage.assertTwoStrings(logger, expMessage, actMessage);    }    /*   Method to verify 6 password matched for New Password field    */    public void verifyConfirmNewPasswordErrMsgForPwdDoesNotMatch(Scenario logger, String expMessage){        String actMessage = basePage.userGetTextFromWebElement(logger, errPasswordDoesNotMatch);        basePage.assertTwoStrings(logger, expMessage, actMessage);    }    /*Method to get the number of records from the account picker list.*/    public String noOfAccountInUsers(Scenario logger, String UserName){        //  Properties inputProperties = PropUtils.getProps(baseUtils.inputDataFile);        String query = "select count (*) from user_members where " +                "user_oid =(select user_oid from users where logon_id ='" + PropUtils.getPropValue(baseUtils.inputProp, UserName) + "')";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String countOfRecords = queryResults.get("COUNT(*)");        int i = Integer.parseInt(countOfRecords);        if (!(i == 1)) {            basePage.userClick(logger, liAccountName);            try{                Thread.sleep(2000);            }catch(Exception e){                logger.log("Count not wait for 2 seconds");            }//            basePage.userClick(logger,eleOutsideOfFields);            List<WebElement> listOfAccounts = basePage.getListOfElements(logger, listOfAccountsInUsers);            int size = listOfAccounts.size();            logger.log("The number of account associated for the users is:" + size);            return String.valueOf(size);        } else {            logger.log("The user has only one account");        }        int size= 1;        return String.valueOf(size);    }    /*Method to select the a account from the account picker list.*/    public void clickOnRandomAccounts(Scenario logger, String UserName) {//        Properties inputProperties = PropUtils.getProps(baseUtils.inputDataFile);        String query = "select count (*) from user_members where " +                "user_oid =(select user_oid from users where logon_id ='" + PropUtils.getPropValue(baseUtils.inputProp, UserName) +"')";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        String expectedCountOfRecords = queryResults.get("COUNT(*)");        int i = Integer.parseInt(expectedCountOfRecords);        if(!(i ==1)) {            basePage.userClick(logger, liAccountName);            List<WebElement> listings = basePage.getListOfElements(logger, listOfAccountsInUsers);            Random r = new Random();            int randomValue = r.nextInt(listings.size());            listings.get(randomValue).click();            String accountName = basePage.userGetTextFromWebElement(logger, liAccountName);            logger.log("The Account Name is:" + accountName);        }else{            logger.log("The user has only one account");        }    }    /*Method to verify whether user is in home page.*/    public void verifyUserIsInHomepage(Scenario logger) {        boolean homeIcon=  basePage.whetherElementPresent(logger, home);        if(homeIcon){            logger.log("The user is in Home page");        }else{            logger.log("The user is not in the Home page");        }        try{            Thread.sleep(2000);        }catch(Exception e){            logger.log("Count not wait for 2 seconds");        }    }}