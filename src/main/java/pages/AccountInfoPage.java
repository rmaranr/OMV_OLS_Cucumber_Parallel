package pages;import com.aventstack.extentreports.ExtentReports;import com.aventstack.extentreports.ExtentTest;import io.cucumber.java.Scenario;import org.apache.poi.hpsf.wellknown.PropertyIDMap;import org.openqa.selenium.By;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.interactions.Actions;import utilities.api.BaseUtils;import utilities.api.CommonDBUtils;import utilities.api.PropUtils;import utilities.ui.BasePage;import utilities.ui.PasswordGenerator;import java.util.*;public class AccountInfoPage {    private WebDriver driver;    private BasePage basePage;    private CommonDBUtils commonUtils;    private BaseUtils baseUtils;    private UsersPage usersPage;    private CommonPage commonPage;    public Scenario logger;    /* Constructor to get the driver object */    public AccountInfoPage(WebDriver driver) {        this.driver = driver;        basePage = new BasePage(driver);        commonUtils = new CommonDBUtils();        baseUtils = new BaseUtils();        usersPage = new UsersPage(driver);        commonPage = new CommonPage(driver);    }    private static final By accountHeader = By.cssSelector("div[class='title']");    private static final By summary = By.xpath("//div[contains(text(),'Summary')]");    private static final By notification = By.xpath("//div[contains(text(),'Notification')]");    private static final By accountName = By.xpath("(//div[@class='panel-expanded-field-text'])[1]");    private static final By tradingName = By.xpath("(//div[@class='panel-expanded-field-text'])[2]");    private static final By accountNo = By.xpath("(//div[@class='panel-expanded-field-text'])[3]");    private static final By accountStatus = By.xpath("(//div[@class='panel-expanded-field-text'])[4]");    private static final By accountSwticher = By.cssSelector("div[class='account-number']");    private static final By accountErrorMsg = By.xpath("//div[contains(text(),'Account is in')]");    private static final By liSendUs = By.xpath("//a[text()='send us']");    private static final By accBalance = By.xpath("(//div[@class='panel-expanded-field-text font20'])[1]");    private static final By CreditLimit = By.xpath("(//div[@class='panel-expanded-field-text font20'])[2]");    private static final By lbavailable = By.xpath("//div[@class='panel-expanded-field-text balance']");    private static final By alert = By.xpath("//a[@class='setupalert ng-star-inserted']");    private static final By editContact = By.xpath("(//*[@class='svg-inline--fa fa-pencil fa-w-16'])[2]");    private static final By editaddress = By.xpath("(//*[@class='svg-inline--fa fa-pencil fa-w-16'])[1]");    private static final By cancelButton = By.cssSelector("div[class='cancel-button']");    /*    Method to verify page title     */    public void verifyAccountPageHeader(Scenario logger, String expectedheader) {        String actHeader = basePage.userGetTextFromWebElement(logger, accountHeader);        commonPage.assertTwoStrings(logger, expectedheader, actHeader, "Page Header");    }    /*     * Method to verify presence of Summary     */    public void verifyPresenceOfSummary(Scenario logger, String exptsum) {        String actHeader = basePage.userGetTextFromWebElement(logger, summary);        commonPage.assertTwoStrings(logger, exptsum, actHeader, "Presence Of Summary");    }    /*     * Method to verify presence of Notification     */    public void verifyPresenceOfNotification(Scenario logger, String exptnoti) {        String actHeader = basePage.userGetTextFromWebElement(logger, notification);        commonPage.assertTwoStrings(logger, exptnoti, actHeader, "presence of Notification");    }    /*     * Method to verify presence of Notification     */    public void verifyPresenceofccountpicker(Scenario logger) throws InterruptedException {//        basePage.userClick(logger, accountSwticher);//        commonPage.sleepForFewSeconds(2);        basePage.getListOfElements(logger, accountSwticher);    }    /*     * Method to click Notification     */    public void clickNotificationTab(Scenario logger) {        basePage.userClick(logger, notification);    }    /*     * Method to click Notification     */    public void clicCancelButton(Scenario logger) {        basePage.userClick(logger, cancelButton);    }    /*     * Method to click presence of AccountName     */    public void verifyAccountName(Scenario logger, String expAccName) {        String accAccountName = basePage.userGetTextFromWebElement(logger, accountName);        commonPage.assertTwoStrings(logger, expAccName, accAccountName, "Account Name");    }    /*     * Method to click presence of Trading Name     */    public void verifyTradingName(Scenario logger, String expTradeName) {        if (expTradeName == null) {            expTradeName = "N/A";        }        String accTrade = basePage.userGetTextFromWebElement(logger, tradingName);        commonPage.assertTwoStrings(logger, expTradeName, accTrade, "Trading Name");    }    /*     * Method to click presence of AccountNo     */    public void verifyAccountNo(Scenario logger, String expAccountNo) {        String accAccountNo = basePage.userGetTextFromWebElement(logger, accountNo);        commonPage.assertTwoStrings(logger, expAccountNo, accAccountNo, "accountNo");    }    /*     * Method to click presence of AccountStatus     */    public void verifyAccountStatus(Scenario logger, String expAccStatus) {        String accAccountStatus = basePage.userGetTextFromWebElement(logger, accountStatus);        commonPage.assertTwoStrings(logger, expAccStatus, accAccountStatus, "Account Status");    }    /*     /*     * Method to verify the Status of the account     */    public void verifyAccountErrormsg(Scenario logger) {        String actStatus = basePage.userGetTextFromWebElement(logger, accountStatus);        if (actStatus.contains("Active")) {            logger.log("The account status is Active");        } else {            logger.log("Account is in " + actStatus + ". For further assistance, please contact your fleet administrator or send us a secure message. ");            basePage.userClick(logger, liSendUs);            commonPage.sleepForFewSeconds(2);            basePage.switchToNewWindow(logger, 2);            commonPage.sleepForFewSeconds(2);        }    }    /*      Method to verify credit limit of the account       */    public void verifyAccountBalance(Scenario logger, String expAccBalance, String currencySymbol) {        String accAccountBalance = basePage.userGetTextFromWebElement(logger, accBalance);        accAccountBalance = accAccountBalance.replaceAll("\\$", "");        commonPage.assertTwoStrings(logger, currencySymbol + expAccBalance, accAccountBalance, "accountBalance");    }    /*     Method to Verify Credit Limit      */    public void verifycreditLimit(Scenario logger, String expCreditLimit, String currencySymbol) {        String accCreditLimit = basePage.userGetTextFromWebElement(logger, CreditLimit);        accCreditLimit = accCreditLimit.replaceAll("\\$", "");        commonPage.assertTwoStrings(logger, currencySymbol + expCreditLimit, accCreditLimit, "Account Credit Limit");    }    /* Method to get value from corresponding text field  */    public String getValueFromContactName(Scenario logger, String fieldName) {        By fieldLocator = By.cssSelector("mav-input[name='" + fieldName + "']>input");        if (fieldName.equalsIgnoreCase("contactName")) {            fieldLocator = By.cssSelector("mav-input[name='contactName']>input");        } else if (fieldName.equalsIgnoreCase("emailAddress")) {            fieldLocator = By.cssSelector("ols-email[ng-reflect-name='emailAddress']>input");        } else if (fieldName.equalsIgnoreCase("mobilePhone")) {            fieldLocator = By.cssSelector("mav-input[name='mobilePhone']>input");        } else if (fieldName.equalsIgnoreCase("otherPhone")) {            fieldLocator = By.cssSelector("mav-input[name='otherPhone']>input");        } else if (fieldName.equalsIgnoreCase("fax")) {            fieldLocator = By.cssSelector("mav-input[name='fax']>input");        } else if (fieldName.equalsIgnoreCase("contactAddressLine1")) {            fieldLocator = By.cssSelector("mav-input[name='contactAddressLine1']>input");        } else if (fieldName.equalsIgnoreCase("contactCity")) {            fieldLocator = By.cssSelector("mav-input[name='contactCity']>input");        } else if (fieldName.equalsIgnoreCase("contactZipCode")) {            fieldLocator = By.cssSelector("mav-input[name='contactZipCode']>input");        }        return basePage.userGetTextUsingGetAttribute(logger, fieldLocator);    }//    public String getValueFromAccountInformation(Scenario logger, String fieldName) {//        By fieldLocator = By.cssSelector("mav-input[name='" + fieldName + "']>input");//        if (fieldName.equalsIgnoreCase("contactName")) {//            fieldLocator = By.cssSelector(" //div[@class='panel-expanded-field-text'])[12]");//        }//    }    public String getValueForState(Scenario logger, String name) {        By stateLocator = By.cssSelector("mav-select[name='state']");        if (name.equalsIgnoreCase("state")) {            stateLocator = By.cssSelector("mav-select[name='state']");        }        return basePage.userGetTextFromWebElement(logger, stateLocator);    }    /*    Method to Verify Available     */    public void verifyAvailable(Scenario logger, String expAvailable, String currencySymbol) {        String accAvailable = basePage.userGetTextFromWebElement(logger, lbavailable);        accAvailable = accAvailable.replaceAll("\\$", "");        commonPage.assertTwoStrings(logger, currencySymbol + expAvailable, accAvailable, "Available Balance");    }    public void verifyTheALert(Scenario logger) {        if (basePage.whetherElementPresent(logger, alert)) {            logger.log("The Alert is Available");        } else {            logger.log("The Alert is Not Available");        }    }    /*    Method to click on Submit button     */    public void clickOnSubmitButtonIncon(Scenario logger, String button) {        By btnSubmit = By.xpath("//button[contains(text(),'" + button + "')]");        basePage.userClick(logger, btnSubmit);    }    /*    /*   Method to click on Edit contacts    */    public void clickEditContact(Scenario logger) {        basePage.userClick(logger, editContact);    }    /*  Method to click on Edit contacts   */    public void clickEditAddress(Scenario logger) {        basePage.userClick(logger, editaddress);    }    /*    Method to validate default and expanded sections field values based on the section name     */    public void validateTaxNoFieldValuesBasedOnSections(Scenario logger, String sectionType, String sectionName, String position) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "";        Map<String, String> queryResults = null;        List<WebElement> sections = basePage.getListOfElements(logger, By.cssSelector("div[class='vat-list']"));        for (int i = 0; i <= sections.size() - 1; i++) {            if (sectionName.equalsIgnoreCase(sections.get(i).getText())) {                if (sectionName.equalsIgnoreCase("COUNTRY SPECIFIC TAX NUMBER")) {                    query = "select c.description as country,c.country_code,const.description as taxType,\n" +                            "tn.effective_on,tn.expires_on,tn.tax_no from tax_numbers tn\n" +                            "left join countries c on c.country_oid = tn.country_oid\n" +                            "left join constants const on const.constant_oid = tn.tax_type_cid\n" +                            "left join m_customers mcust on mcust.customer_mid = tn.member_oid\n" +                            "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "where mcust.customer_no = " + PropUtils.getPropValue(properties, "taxNumber-AccountNumber") + " and \n" +                            " mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")  order by c.description asc,tn.effective_on asc";                    queryResults = commonUtils.getQueryResultsOnMap(query);                    logger.log(query);                    List<WebElement> actFieldValues = null;                    String allRecordsLocator = "";                    if (basePage.getListOfElements(logger, By.xpath("//div[@class='adminCountryTax ng-star-inserted']")).size() > 1) {                        allRecordsLocator = "(//div[@class='adminCountryTax ng-star-inserted'][2]/div/div/mat-accordion/mat-expansion-panel//mat-expansion-panel-header/span/div/div/mat-grid-list)";                    } else if (basePage.getListOfElements(logger, By.xpath("//div[@class='adminCountryTax ng-star-inserted']")).size() == 1) {                        allRecordsLocator = "(//div[@class='adminCountryTax ng-star-inserted'][1]/div/div/mat-accordion/mat-expansion-panel//mat-expansion-panel-header/span/div/div/mat-grid-list)";                    }                    List<WebElement> allRecords = basePage.getListOfElements(logger, By.xpath(allRecordsLocator));                    for (int j = 0; j <= allRecords.size(); j++) {                        if (commonPage.getSpecificValueFromMapObject(queryResults, "TAX_NO").equalsIgnoreCase(basePage.userGetTextFromWebElement(logger, By.xpath("((//mat-grid-list)[" + (j + 1) + "]/div/mat-grid-tile/figure/div/div)[2]")))) {                            if (sectionType.equalsIgnoreCase("default")) {                                actFieldValues = basePage.getListOfElements(logger, By.xpath(allRecordsLocator + "[" + (j + 1) + "]/div/mat-grid-tile/figure/div/div"));                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "COUNTRY"), actFieldValues.get(0).getText(), "Country in Default section");                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TAX_NO"), actFieldValues.get(1).getText(), "Tax number in Default section");                            }                            if (sectionType.equalsIgnoreCase("Expanded")) {                                int recordNo = 0;                                for (int k = 0; k <= allRecords.size(); k++) {                                    if (basePage.userGetTextFromWebElement(logger, By.xpath("(" + allRecordsLocator + "[" + (k + 1) + "]/div/mat-grid-tile/figure/div/div)[4]")).equalsIgnoreCase("Active") || basePage.userGetTextFromWebElement(logger, By.xpath("(" + allRecordsLocator + "[" + (k + 1) + "]/div/mat-grid-tile/figure/div/div)[4]")).equalsIgnoreCase("Inactive")) {                                        basePage.userClick(logger, By.xpath(allRecordsLocator + "[" + (k + 1) + "]"));                                        recordNo = k + 1;                                        break;                                    }                                }                                actFieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='mat-expansion-panel-body']/mat-grid-list)[1]/div/mat-grid-tile/figure/div/div[2]"));                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TAX_NO"), actFieldValues.get(0).getText(), "Vat Number in expanded section");                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TAXTYPE"), actFieldValues.get(1).getText(), "Tax type in expanded section");                                String currentDate = commonPage.getSpecificValueFromMapObject(queryResults, "EFFECTIVE_ON");                                commonPage.assertTwoStrings(logger, commonPage.getDesiredDateInSpecificFormat(logger, currentDate.substring(0, 10), 0, "future", "yyyy-mm-dd", "dd/mm/yyyy"), actFieldValues.get(2).getText(), "Effective Date in expanded section");                                currentDate = commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRES_ON");                                commonPage.assertTwoStrings(logger, commonPage.getDesiredDateInSpecificFormat(logger, currentDate.substring(0, 10), 0, "future", "yyyy-mm-dd", "dd/mm/yyyy"), actFieldValues.get(3).getText(), "Effective Date in expanded section");                            }                            break;                        }                    }                } else {                    query = "select a.tax_no from accounts a\n" +                            "inner join m_customers mcust on mcust.customer_no = a.account_no\n" +                            "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                            "where mcust.customer_no = " + PropUtils.getPropValue(properties, "taxNumber-AccountNumber") + " and \n" +                            " mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")";                    queryResults = commonUtils.getQueryResultsOnMap(query);                    List<WebElement> actFieldValues = null;                    if (sectionType.equalsIgnoreCase("default")) {                        actFieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-grid-list)[" + (i + 1) + "]/div/mat-grid-tile/figure/div/div"));                        commonPage.assertTwoStrings(logger, "Account", actFieldValues.get(0).getText(), "'Account' text in Primary section");                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TAX_NO"), actFieldValues.get(1).getText(), "Tax number in Primary section");                    }                    if (sectionType.equalsIgnoreCase("Expanded")) {                        basePage.userClick(logger, By.xpath("(//div/mat-grid-list)[" + position + "]"));                        actFieldValues = basePage.getListOfElements(logger, By.xpath("(//div[@class='mat-expansion-panel-body']/mat-grid-list)[1]/div/mat-grid-tile/figure/div/div[2]"));                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TAX_NO"), actFieldValues.get(0).getText(), "Vat Number in expanded section");//                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject()(queryResults, "TAXTYPE"), actFieldValues.get(2).getText(), "Tax type in expanded section");//                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject()(queryResults, "EFFECTIVE_ON"), actFieldValues.get(3).getText(), "Effective Date in expanded section");//                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject()(queryResults, "EXPIRES_ON"), actFieldValues.get(4).getText(), "Expiry Date expanded section");                    }                }            }        }    }    /*    Method to get validation control records based on column name for a specific section     */    public List<Map<String, String>> getValidationControlRecordsBasedOnSectionColumnNames(Scenario logger, String sectionName, String userType) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        Map<String, String> fieldValues = new HashMap<>();        String userCondition = "";        if (userType.equalsIgnoreCase("CSR")) {            userCondition = " and IS_USED_BY_DESKTOP = 'Y'";        } else if (userType.equalsIgnoreCase("Customer")) {            userCondition = " and IS_USED_BY_ONLINE = 'Y'";        }        if (sectionName.equalsIgnoreCase("AccountSummary")) {            fieldValues.put("columnNames1", "'name','customer_type_did','streetAddressVO.address_line','streetAddressVO.state_oid'," +                    "'streetAddressVO.country_oid',\n" +                    "'streetAddressVO.postal_code','streetAddressVO.suburb','postalAddressVO.address_line','postalAddressVO.suburb'," +                    "'postalAddressVO.postal_code','postalAddressVO.state_oid','postalAddressVO.country_oid','contact_name','email_address'" +                    ",'phone_mobile_1','phone_mobile_2','phone_fax'");            fieldValues.put("systemModuleCid1", "1502");        } else if (sectionName.equalsIgnoreCase("AccountDetails")) {            fieldValues.put("columnNames1", "'trading_name','embossing_name','card_program_oid','parent_company','ext_account_ref','language_oid'");            fieldValues.put("systemModuleCid1", "1502");            fieldValues.put("columnNames2", "'account_no','account_status_oid','account_sub_status_oid','cust_service_expires_on'");            fieldValues.put("systemModuleCid2", "1510");        } else if (sectionName.equalsIgnoreCase("ApplicationDetails")) {            fieldValues.put("columnNames1", "'application_no','company_no','application_type_oid','promotional_material','business_type_did',\n" +                    "'fin_year_end_month_oid','industry_oid','buyer_class_did','main_business','admin_territory_oid','marketing_territory_oid'");            fieldValues.put("systemModuleCid1", "1501");            fieldValues.put("columnNames2", "'created_on','is_web_access_required','mail_indicator_oid'");            fieldValues.put("systemModuleCid2", "1502");            fieldValues.put("columnNames3", "'nace_code','is_interest_on_arrears','information_code_number'");            fieldValues.put("systemModuleCid3", "1510");        } else if (sectionName.equalsIgnoreCase("PRICINGCONTROLVALUES")) {            fieldValues.put("columnNames1", "'customer_value_1_oid','customer_value_2_oid','customer_value_3_oid'");            fieldValues.put("systemModuleCid1", "1502");        } else if (sectionName.equalsIgnoreCase("AdditionalDetails")) {            fieldValues.put("columnNames1", "'ext_delivery_ref','distributor_id','additionalInvoiceTextVO.value','ext_delivery_name','external_customer_code'");            fieldValues.put("systemModuleCid1", "1502");        } else if (sectionName.equalsIgnoreCase("AUTHENTICATION")) {            fieldValues.put("columnNames1", "'authentication_answer'");            fieldValues.put("systemModuleCid1", "1502");        } else if (sectionName.equalsIgnoreCase("PosPrompts")) {            fieldValues.put("columnNames1", "'is_odometer_req','is_odometer_validation'");            fieldValues.put("systemModuleCid1", "1504");        } else if (sectionName.equalsIgnoreCase("productSelection")) {            fieldValues.put("columnNames1", "'product_restriction_oid'");            fieldValues.put("systemModuleCid1", "1504");        } else if (sectionName.equalsIgnoreCase("cardOffer")) {            fieldValues.put("columnNames1", "'card_offer_oid'");            fieldValues.put("systemModuleCid1", "1504");        } else if (sectionName.equalsIgnoreCase("cardProduct")) {            fieldValues.put("columnNames1", "'card_product_oid'");            fieldValues.put("systemModuleCid1", "1504");        } else if (sectionName.equalsIgnoreCase("cardControlProfileName")) {            fieldValues.put("columnNames1", "'description'");            fieldValues.put("systemModuleCid1", "1504");        } else if (sectionName.equalsIgnoreCase("editVehicle")) {            fieldValues.put("columnNames1", "'license_plate','vehicle_type_did','vehicleVO.description','vehicle_make_did','vehicle_status_cid','model'");            fieldValues.put("systemModuleCid1", "1502");        } else if (sectionName.equalsIgnoreCase("addNewReportSetup")) {            fieldValues.put("columnNames1", "'report_type_oid','frequency_oid','delivery_type_cid','contact_hierarchy_cid','report_sort_option_oid'");            fieldValues.put("systemModuleCid1", "1502");        } else if (sectionName.equalsIgnoreCase("AccountDetails-FinancialInfo")) {            fieldValues.put("columnNames1", "'account_status_oid','account_sub_status_oid','opened_on','closed_on','reinstated_on','last_billed_on','diary_notes'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("Credit/AlertDetails")) {            fieldValues.put("columnNames1", "'original_credit_limit','credit_limit','credit_plan_oid','cust_service_expires_on','temp_credit_amount','temp_credit_expires_on','percent_over_limit','temp_credit_reason_did','is_over_credit_limit','client_credit_limit_threshold_percentage','calculated_balance_threshold','calculated_customer_alert_threshold','alert_threshold_percentage_did','territory_oid','requ_credit_limit_expires_at','requested_credit_limit','calculated_pending_balance'");            fieldValues.put("systemModuleCid1", "1510");            fieldValues.put("columnNames2", "'debtor_number'");            fieldValues.put("systemModuleCid2", "1510");        } else if (sectionName.equalsIgnoreCase("CardBalanceAlerts")) {            fieldValues.put("columnNames1", "'card_balance_alerts_enabled','client_credit_limit_threshold_amount'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("BillingDetails")) {            fieldValues.put("columnNames1", "'cycle_frequency_oid','billing_frequency_oid','billing_plan_oid'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("BankDetails")) {            fieldValues.put("columnNames1", "'bankAccountVO.bank_name','bankAccountVO.bank_no','bankAccountVO.branch_no','swift_code','bankAccountVO.account_no','account_name','iban','bankAccountVO.umr_no','bankAccountVO.sign_town','bankAccountVO.bic','branch_segmentation_code','is_authorised_for_collection','valid_from','valid_to'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("SecurityDeposit")) {            fieldValues.put("columnNames1", "'deposit_balance','total_security_value','security_indicator'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("Dunning")) {            fieldValues.put("columnNames1", "'dunningCodeVO.dunning_code','dunning_contact_method_did','duns_number_2','language_oid','duns_number_1'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("SECURITIES/SOLVENCY")) {            fieldValues.put("columnNames1", "'securitisation_exception','solvency_state_did','risk_group_did','solvency_given_at','solvency_declined_at'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("Guarantee")) {            fieldValues.put("columnNames1", "'rating','guarantee_type_did','guarantee_amount','guarantor_address_line','accountGuaranteesVO.valid_to','guarantee_currency_oid','acceptance_number','accountGuaranteesVO.valid_from','guarantor_city','guarantor_post_code','guarantor_country_oid'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("addNewVatNumber")) {            fieldValues.put("columnNames1", "'tax_no','effective_on','expires_on','country_oid','tax_type_cid'");            fieldValues.put("systemModuleCid1", "1510");        } else if (sectionName.equalsIgnoreCase("cards")) {            fieldValues.put("columnNames1", "'card_offer_oid','cardVO.card_product_oid','card_type_cid','cardVO.expires_on','cardVO.external_ref',\n" +                    "'cardVO.embossing_name','is_pin_req','is_signature_req','costCentreCode','driverVO.driver_name','driverVO.driver_id',\n" +                    "'vehicleVO.description','vehicleVO.vehicle_id','vehicleVO.license_plate','product_restriction_oid','location_restriction_oid',\n" +                    "'time_limit_oid','cardContactVO.contact_name','cardContactVO.streetAddressVO.suburb','cardContactVO.streetAddressVO.address_line',\n" +                    "'cardContactVO.streetAddressVO.state_oid','cardContactVO.streetAddressVO.postal_code','is_odometer_req','is_odometer_validation',\n" +                    "'cardVO.Web_Authentication_Code'");            fieldValues.put("systemModuleCid1", "1503");        }        String query = "";        List<Map<String, String>> allRowsOfQueryResults = new ArrayList<>();        for (int i = 0; i <= (fieldValues.size() / 2) - 1; i++) {            query = "select rn,validation_control_oid,moduleName, system_module_cid,desc_,column_name,access_group_oid,\n" +                    "context_value_oid,\n" +                    "is_used_by_desktop,is_used_by_online\n" +                    ",client_group_mid,client_mid,VALIDATION_FIELD_OID , column_control_cid, fieldStatus\n" +                    "from\n" +                    "(\n" +                    "select vc.validation_control_oid,c.description as moduleName, vf.system_module_cid,\n" +                    "vf.description as desc_,vf.column_name,vc.access_group_oid,\n" +                    "vc.context_value_oid,\n" +                    "vc.is_used_by_desktop,vc.is_used_by_online\n" +                    ",vc.client_group_mid,vc.client_mid,vf.VALIDATION_FIELD_OID , vc.column_control_cid,\n" +                    "const1.description as fieldStatus,  row_number() over(partition by vf.column_name\n" +                    "order by vc.access_group_oid,vc.client_mid,vc.client_group_mid) as rn from\n" +                    "validation_controls vc\n" +                    "inner join validation_fields vf on vc.VALIDATION_FIELD_OID = vf.VALIDATION_FIELD_OID\n" +                    "inner join constants c on c.constant_oid = vc.system_module_cid\n" +                    "inner join constants const1 on const1.constant_oid = vc.column_control_cid\n" +                    "where\n" +                    "vf.column_name in (" + fieldValues.get("columnNames" + (i + 1)) + ")\n" +                    "--vf.column_name like ('%iban%');\n" +                    "--and\n" +                    "and vc.system_module_cid = " + fieldValues.get("systemModuleCid" + (i + 1)) + " and vf.system_module_cid = " + fieldValues.get("systemModuleCid" + (i + 1)) + " " + userCondition + ")\n" +                    "where rn=1";            logger.log(query);            allRowsOfQueryResults.addAll(commonUtils.getAllRowsOfQueryResultsOnListMap(query));        }//        Map<String, String> columnNamesAndTheirStatus = null;//        for (int i = 0; i <= allRowsOfQueryResults.size() - 1; i++) {//            assert false;//            columnNamesAndTheirStatus.put(allRowsOfQueryResults.get(i).get("COLUMN_NAME"), allRowsOfQueryResults.get(i).get("FIELDSTATUS"));//        }        return allRowsOfQueryResults;    }    /*    Method to validate specific module fields are eligible for edit or not     */    public void handleFieldBehaviourBasedOnValidationControlForSpecificModule(Scenario logger, String sectionName, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        List<Map<String, String>> validationControlRecords = getValidationControlRecordsBasedOnSectionColumnNames(logger, sectionName.replaceAll("\\$", ""), "CSR");        Boolean isEditable = false;        if (validationControlRecords.size() == 0) {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "Validation records are not present", baseUtils.testDataFilePath);        } else {            if (sectionName.equalsIgnoreCase("addNewVatNumber")) {                commonPage.sleepForFewSeconds(3);                addNewVatNumberBasedOnValidationControl(logger, validationControlRecords);            } else {                if (sectionName.equalsIgnoreCase("editVehicle")) {                    commonPage.sleepForFewSeconds(3);                }                for (int i = 0; i <= validationControlRecords.size() - 1; i++) {                    properties = PropUtils.getProps(baseUtils.testDataFile);                    if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                        isEditable = true;                    }                    if (actionOfSection.equalsIgnoreCase("edit") && isEditable) {                        if (sectionName.equalsIgnoreCase("PosPrompts")) {                            List<WebElement> labels = basePage.getListOfElements(logger, By.cssSelector("li[class='ng-star-inserted']>mat-checkbox>label>span"));                            List<WebElement> checkBoxes = basePage.getListOfElements(logger, By.cssSelector("li[class='ng-star-inserted']>mat-checkbox>label>div"));                            for (int j = 0; j <= labels.size() - 1; j++) {                                String[] arrPosPromptsOldBehaviour = {PropUtils.getPropValue(properties, "PosPromptsBasedOnOID")};                                if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                                    if (PropUtils.getPropValue(properties, "PosPromptsBasedOnOID").contains(",")) {                                        arrPosPromptsOldBehaviour = PropUtils.getPropValue(properties, "PosPromptsBasedOnOID").split(",");                                    }                                }                                if (validationControlRecords.get(i).get("COLUMN_NAME").equalsIgnoreCase("is_odometer_req")) {                                    if (labels.get(i).getText().trim().equalsIgnoreCase("Odometer")) {                                        checkBoxes.get(i).click();                                        if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                                            boolean isPresent = false;                                            for (int k = 0; k <= arrPosPromptsOldBehaviour.length - 1; k++) {                                                if (arrPosPromptsOldBehaviour[k].equalsIgnoreCase("Odometer")) {                                                    isPresent = true;                                                    break;                                                }                                            }                                            if (isPresent) {                                                PropUtils.setProps("ccpEditPosPrompts1", "", baseUtils.testDataFilePath);                                            } else {                                                PropUtils.setProps("ccpEditPosPrompts1", "Odometer", baseUtils.testDataFilePath);                                            }                                        } else {                                            PropUtils.setProps("PosPrompts1", "Odometer", baseUtils.testDataFilePath);                                        }                                    }                                    break;                                }                                if (validationControlRecords.get(i).get("COLUMN_NAME").equalsIgnoreCase("is_odometer_validation")) {                                    if (labels.get(i).getText().trim().equalsIgnoreCase("Odometer Validation")) {                                        checkBoxes.get(i).click();                                        if (PropUtils.getPropValue(properties, "ccpType").equalsIgnoreCase("Edit")) {                                            boolean isPresent = false;                                            for (int k = 0; k <= arrPosPromptsOldBehaviour.length - 1; k++) {                                                if (arrPosPromptsOldBehaviour[k].replaceAll(" ", "").equalsIgnoreCase("OdometerValidation")) {                                                    isPresent = true;                                                    break;                                                }                                            }                                            if (isPresent) {                                                PropUtils.setProps("ccpEditPosPrompts2", "", baseUtils.testDataFilePath);                                            } else {                                                PropUtils.setProps("ccpEditPosPrompts2", "Odometer Validation", baseUtils.testDataFilePath);                                            }                                        } else {                                            PropUtils.setProps("PosPrompts2", "Odometer Validation", baseUtils.testDataFilePath);                                        }                                    }                                    break;                                }                            }                        }                        if (sectionName.equalsIgnoreCase("productSelection")) {                            commonPage.handleProductSelectionBasedOnModule(logger, PropUtils.getPropValue(properties, "CurrentModuleForProductSelection"));                            commonPage.sleepForFewSeconds(1);                        }                        if (sectionName.equalsIgnoreCase("cardOffer")) {                            commonPage.sleepForFewSeconds(2);//                            List<WebElement> labels = basePage.getListOfElements(logger, By.cssSelector("div[class='mat-form-field-infix']>span>label"));//                            for (int j = 0; j <= labels.size() - 1; j++) {//                                if (labels.get(j).findElement(By.cssSelector("mat-label[class='ng-star-inserted'")).getText().replaceAll(" ", "").trim().equalsIgnoreCase(sectionName)) {//                                    if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                                        commonPage.assertTwoStrings(logger, "Card offer *", labels.get(j).getText(), sectionName + " field label");//                                        break;//                                    } else {//                                        commonPage.assertTwoStrings(logger, "Card offer", labels.get(j).getText(), sectionName + " field label");//                                        break;//                                    }//                                }//                            }                            basePage.userClick(logger, By.xpath("(//mav-select[@name='Card offer'])"));                            if (PropUtils.getPropValue(properties, "cardControlProfileAction").equalsIgnoreCase("notEligible")) {                                commonPage.clickButtonUsingSpan(logger, PropUtils.getPropValue(properties, "ccp-cardOffer-notEligibleForAddCCP"));                            } else {                                commonPage.clickButtonUsingSpan(logger, PropUtils.getPropValue(properties, "ccp-cardOffer"));                            }                        }                        if (sectionName.equalsIgnoreCase("cardProduct")) {                            List<WebElement> labels = basePage.getListOfElements(logger, By.cssSelector("div[class='mat-form-field-infix']>span>label"));//                            for (int j = 0; j <= labels.size() - 1; j++) {//                                if (labels.get(j).findElement(By.cssSelector("mat-label[class='ng-star-inserted'")).getText().replaceAll(" ", "").trim().equalsIgnoreCase(sectionName)) {//                                    if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                                        commonPage.assertTwoStrings(logger, "Card product *", labels.get(j).getText(), sectionName + " field label");//                                        break;//                                    } else {//                                        commonPage.assertTwoStrings(logger, "Card product", labels.get(j).getText(), sectionName + " field label");//                                        break;//                                    }//                                }//                            }                            basePage.userClick(logger, By.xpath("(//mav-select[@name='cardProduct'])[1]"));                            commonPage.sleepForFewSeconds(2);                            if (PropUtils.getPropValue(properties, "cardControlProfileAction").equalsIgnoreCase("notEligible")) {                                commonPage.clickButtonUsingSpan(logger, PropUtils.getPropValue(properties, "ccp-cardProduct-notEligibleForAddCCP"));                            } else {                                commonPage.clickButtonUsingSpan(logger, PropUtils.getPropValue(properties, "ccp-cardProduct"));                            }                        }                        if (sectionName.equalsIgnoreCase("cardControlProfileName")) {                            List<WebElement> labels = basePage.getListOfElements(logger, By.cssSelector("div[class='mat-form-field-infix']>span>label"));//                            for (int j = 0; j <= labels.size() - 1; j++) {//                                if (labels.get(j).findElement(By.cssSelector("mat-label[class='ng-star-inserted'")).getText().replaceAll(" ", "").trim().equalsIgnoreCase(sectionName)) {//                                    if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                                        commonPage.assertTwoStrings(logger, "Card control profile name *", labels.get(j).getText(), sectionName + " field label");//                                        break;//                                    } else {//                                        commonPage.assertTwoStrings(logger, "Card control profile name", labels.get(j).getText(), sectionName + " field label");//                                        break;//                                    }//                                }//                            }                            if (PropUtils.getPropValue(properties, "cardControlProfileAction").equalsIgnoreCase("notEligible")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='cardControlProfileName']>input"), PropUtils.getPropValue(properties, "ccp-cardControlProfile-notEligibleForAddCCP"));                                PropUtils.setProps("CardControlProfileName", PropUtils.getPropValue(properties, "ccp-cardControlProfile-notEligibleForAddCCP"), baseUtils.testDataFilePath);                            } else {                                String ccpName = "CardControlProfile-" + PasswordGenerator.generateAlphaNumeric(logger, 10);                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[name='cardControlProfileName']>input"), ccpName);                                PropUtils.setProps("CardControlProfileName", ccpName, baseUtils.testDataFilePath);                            }                        }                        if (sectionName.equalsIgnoreCase("editVehicle")) {                            editVehicleFunctionalityBasedOnValidationControls(logger, validationControlRecords.get(i));                        }                    }                    if (actionOfSection.equalsIgnoreCase("view")) {                    }                }                if (actionOfSection.equalsIgnoreCase("Add")) {                    if (sectionName.equalsIgnoreCase("addNewReportSetup")) {                        addReportSetupBasedOnValidationControl(logger, validationControlRecords);                    }                }            }        }    }    /*    Method to add report type based on validation control     */    public void addReportSetupBasedOnValidationControl(Scenario logger, List<Map<String, String>> validationControlRecords) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        ReportSetupPage reportSetupPage = new ReportSetupPage(driver);        reportSetupPage.getFieldValuesBasedOnReportType(logger, PropUtils.getPropValue(properties, "ReportTypeNotInUse"));        Map<String, String> validationRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("report_type_oid", validationControlRecords);        if (validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {            commonPage.selectValueFromMatSelectDropDown(logger, PropUtils.getPropValue(properties, "ReportTypeNotInUse"), "reportType");        } else {            logger.log("report_type_oid is not editable because the status of validation control is " + validationRecord.get("FIELDSTATUS"));        }        commonPage.sleepForFewSeconds(1);        properties = PropUtils.getProps(baseUtils.testDataFile);        validationRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("delivery_type_cid", validationControlRecords);        if (validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {            if (Integer.parseInt(PropUtils.getPropValue(properties, "CountOFDeliveryTypeForReportSetup")) > 1) {                commonPage.selectValueFromMatSelectDropDown(logger, PropUtils.getPropValue(properties, "DeliveryTypeForReportSetup"), "deliveryType");            } else {                commonPage.sleepForFewSeconds(2);                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='deliveryType']>mat-select"), "ng-reflect-disabled"), "deliveryType Dropdown status");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "DeliveryTypeForReportSetup"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='deliveryType']>mat-select"), "ng-reflect-model"), "deliveryType Dropdown value");            }        }        commonPage.sleepForFewSeconds(1);        validationRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("frequency_oid", validationControlRecords);        if (validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {            if (Integer.parseInt(PropUtils.getPropValue(properties, "CountOFFrequencyForReportSetup")) > 1) {                commonPage.selectValueFromMatSelectDropDown(logger, PropUtils.getPropValue(properties, "FrequencyForReportSetup"), "frequency");            } else {                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='frequency']>mat-select"), "ng-reflect-disabled"), "frequency Dropdown status");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "FrequencyForReportSetup"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='frequency']>mat-select"), "ng-reflect-model"), "frequency Dropdown value");            }        } else {            logger.log("frequency_oid is not editable because the status of validation control is " + validationRecord.get("FIELDSTATUS"));        }        commonPage.sleepForFewSeconds(1);        validationRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("contact_hierarchy_cid", validationControlRecords);        if (validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {            commonPage.sleepForFewSeconds(2);            if (Integer.parseInt(PropUtils.getPropValue(properties, "CountOFRecipientForReportSetup")) > 1) {                commonPage.selectValueFromMatSelectDropDown(logger, PropUtils.getPropValue(properties, "RecipientForReportSetup"), "recipient");            } else {                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='recipient']>mat-select"), "ng-reflect-disabled"), "recipient Dropdown status");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "RecipientForReportSetup"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='recipient']>mat-select"), "ng-reflect-model"), "recipient Dropdown value");            }        } else {            logger.log("contact_hierarchy_cid is not editable because the status of validation control is " + validationRecord.get("FIELDSTATUS"));        }        commonPage.sleepForFewSeconds(4);        validationRecord = commonPage.getValidationControlFieldMapObjectBasedOnSpecificName("report_sort_option_oid", validationControlRecords);        if (validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationRecord.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {            if (Integer.parseInt(PropUtils.getPropValue(properties, "CountOFSortOptionForReportSetup")) > 1) {                commonPage.selectValueFromMatSelectDropDown(logger, PropUtils.getPropValue(properties, "SortOptionForReportSetup"), "sortType");            } else if (Integer.parseInt(PropUtils.getPropValue(properties, "CountOFSortOptionForReportSetup")) == 1) {                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='sortType']>mat-select"), "ng-reflect-disabled"), "Sort type Dropdown status");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "SortOptionForReportSetup").replaceAll(" ", ""), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='sortType']>mat-select"), "ng-reflect-model").replaceAll(" ", ""), "Sort type Dropdown value");            } else if (Integer.parseInt(PropUtils.getPropValue(properties, "CountOFSortOptionForReportSetup")) == 0) {                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='sortType']>mat-select"), "ng-reflect-disabled"), "Sort type Dropdown status");            }        } else {            logger.log("report Sort option is not editable because the status of validation control is " + validationRecord.get("FIELDSTATUS"));        }    }    /*    Method to validate specific section is eligible for edit or not and modify the fields then verify in the database     */    public void validateSectionBehaviorBasedOnValidationControls(Scenario logger, String sectionName, String actionOfSection, String userType) {        List<Map<String, String>> validationControlRecords = new ArrayList<>();        if (sectionName.equalsIgnoreCase("ACCOUNT DETAILS")) {            if (basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='title ng-star-inserted']")).equalsIgnoreCase("Financial information")) {                validationControlRecords = getValidationControlRecordsBasedOnSectionColumnNames(logger, "AccountDetails-FinancialInfo", userType);            } else {                validationControlRecords = getValidationControlRecordsBasedOnSectionColumnNames(logger, sectionName.replaceAll(" ", ""), userType);            }        } else {            validationControlRecords = getValidationControlRecordsBasedOnSectionColumnNames(logger, sectionName.replaceAll(" ", ""), userType);        }//        Boolean isEditable = false;//        for (int i = 0; i < validationControlRecords.size() - 1; i++) {//            if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {////                basePage.userClick(logger, By.xpath("//div[contains(text(),'" + sectionName + "')]/mav-svg-icon"));//                isEditable = true;//            }//        }        int sectionNumber = 0;//        int tabNumber = 1;        List<WebElement> sections = new ArrayList<>();//        if(basePage.userGetTextFromWebElement(logger,By.xpath("//div[contains(@class,'mat-tab-label mat-focus-indicator mat-ripple ng-star-inserted')][@aria-selected='true']/div")).equalsIgnoreCase("Other")){//            tabNumber = 2;//        }        commonPage.sleepForFewSeconds(2);        basePage.waitUntilElementLocatedOrRefreshed(By.xpath("//div[@class='title-summary']"));        sections = basePage.getListOfElements(logger, By.xpath("//div[@class='title-summary']"));        for (int i = 0; i <= sections.size() - 1; i++) {            if (sections.get(i).getText().contains(sectionName)) {                if (!basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='title ng-star-inserted']")).contains("Financial information") || basePage.getStatusOfElement(By.xpath("//div[contains(@class,'mat-tab-label-active')]/div[contains(text(),'Other')]"))) {                    sectionNumber = i + 1;                } else {                    sectionNumber = i + 2;                }                break;            }        }        if (sectionName.replaceAll(" ", "").equalsIgnoreCase("accountSummary")) {            validateAccountSummarySectionOfAccInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("AccountDetails")) {            if (basePage.userGetTextFromWebElement(logger, By.cssSelector("div[class='title ng-star-inserted']")).equalsIgnoreCase("Financial information")) {                validateAccountDetailsSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);            } else {                validateAccountDetailsSectionOfAccInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);            }        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("CUSTOMERDETAILS")) {            validateApplicationDetailsSectionOfAccInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("PRICINGCONTROLVALUES")) {            validatePricingControlValuesSectionOfAccInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("AdditionalDetails")) {            validateAdditionalDetailsSectionOfAccInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("AUTHENTICATION")) {            validateAuthenticationSectionOfAccInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("CREDIT/ALERTDETAILS")) {            validateCreditAlertDetailsSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("CARDBALANCEALERTS")) {            validateCredBalanceAlertsSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("BILLINGDETAILS")) {            validateBillingDetailsSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").contains("BANKDETAILS")) {            validateBankDetailsSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").equalsIgnoreCase("SECURITYDEPOSIT")) {            validateSecurityDepositSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").contains("DUNNING")) {            validateDunningSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").contains("SECURITIES/SOLVENCY")) {            validateSecuritiesSolvencySectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        } else if (sectionName.replaceAll(" ", "").contains("GUARANTEE")) {            validateGuaranteeSectionOfFinInformationModule(logger, validationControlRecords, sectionNumber, actionOfSection);        }    }    /*    Method to get address in guarantee sectiono in financail information module     */    private String getAddressInGuaranteeSection(Map<String, String> queryResults) {        String address = "";        if (!commonPage.getSpecificValueFromMapObject(queryResults, "ADDRESSLINE").equalsIgnoreCase("")) {            address = queryResults.get("ADDRESSLINE") + "\n";        }        if (!commonPage.getSpecificValueFromMapObject(queryResults, "CITY").equalsIgnoreCase("")) {            address = address + queryResults.get("CITY") + ", ";        }        if (!commonPage.getSpecificValueFromMapObject(queryResults, "COUNTRY").equalsIgnoreCase("")) {            address = address + queryResults.get("COUNTRY") + ", ";        }        if (!commonPage.getSpecificValueFromMapObject(queryResults, "POSTALCODE").equalsIgnoreCase("")) {            address = address + queryResults.get("POSTALCODE");        }        return address;    }    /*    Method to update guarantee address     */    public String updateGuaranteeAddress(Scenario logger, Map<String, String> eligibilityOfEdit, Map<String, String> queryResults) {        if (eligibilityOfEdit.containsKey("guarantor_address_line_is_editable")) {            if (eligibilityOfEdit.get("guarantor_address_line_is_editable").equalsIgnoreCase("true")) {                PropUtils.setProps("previous-guarantee-addressLine", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                usersPage.enterValueBasedOfItsType(logger, "5919 Trussville Crossings Pkwy", "addressLine", "add", "guarantee", "10", "@&$#_");                PropUtils.setProps("updated-guarantee-addressLine", usersPage.getValueFromCorrespondingTextFieldInEditUser(logger, "addressLine"), baseUtils.testDataFilePath);            } else {                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"), "ng-reflect-is-disabled"), "Guarantee Address line field status in edit popup");                PropUtils.setProps("updated-guarantee-addressLine", "", baseUtils.testDataFilePath);            }        }        if (eligibilityOfEdit.containsKey("guarantor_city_is_editable")) {            if (eligibilityOfEdit.get("guarantor_city_is_editable").equalsIgnoreCase("true")) {                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CITY"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-model"), "Guarantee City field value");                PropUtils.setProps("previous-guarantee-city", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                usersPage.enterValueBasedOfItsType(logger, "Birmingham", "suburb", "add", "guarantee", "10", "@&$#_");                PropUtils.setProps("updated-guarantee-city", usersPage.getValueFromCorrespondingTextFieldInEditUser(logger, "suburb"), baseUtils.testDataFilePath);            } else {                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-is-disabled"), "Guarantee Address line field status in edit popup");                PropUtils.setProps("updated-guarantee-city", "", baseUtils.testDataFilePath);            }        }        if (eligibilityOfEdit.containsKey("guarantor_post_code_is_editable")) {            if (eligibilityOfEdit.get("guarantor_post_code_is_editable").equalsIgnoreCase("true")) {                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "POSTALCODE"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-model"), "Guarantee postal address value");                PropUtils.setProps("previous-guarantee-postalCode", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                usersPage.enterValueBasedOfItsType(logger, "Numeric", "postalCode", "add", "guarantee", "10", "");                PropUtils.setProps("updated-guarantee-postalCode", usersPage.getValueFromCorrespondingTextFieldInEditUser(logger, "postalCode"), baseUtils.testDataFilePath);            } else {                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-is-disabled"), "Guarantee Address line field status in edit popup");                PropUtils.setProps("updated-guarantee-postalCode", "", baseUtils.testDataFilePath);            }        }        String updatedAddress = "";        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (!PropUtils.getPropValue(properties, "updated-guarantee-addressLine").equalsIgnoreCase("")) {            updatedAddress = PropUtils.getPropValue(properties, "updated-guarantee-addressLine") + "\n";        } else {            updatedAddress = PropUtils.getPropValue(properties, "previous-guarantee-addressLine") + "\n";        }        if (!PropUtils.getPropValue(properties, "updated-guarantee-city").equalsIgnoreCase("")) {            updatedAddress = updatedAddress + PropUtils.getPropValue(properties, "updated-guarantee-city") + ", ";        } else {            updatedAddress = updatedAddress + PropUtils.getPropValue(properties, "previous-guarantee-city") + ", ";        }        if (!commonPage.getSpecificValueFromMapObject(queryResults, "COUNTRY").equalsIgnoreCase("")) {            updatedAddress = updatedAddress + commonPage.getSpecificValueFromMapObject(queryResults, "COUNTRY") + ", ";        }        if (!PropUtils.getPropValue(properties, "updated-guarantee-postalCode").equalsIgnoreCase("")) {            updatedAddress = updatedAddress + PropUtils.getPropValue(properties, "updated-guarantee-postalCode");        } else {            updatedAddress = updatedAddress + PropUtils.getPropValue(properties, "previous-guarantee-postalCode");        }        return updatedAddress;    }    /*    Method to handle guarantee section in financial information module     */    public void validateGuaranteeSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select ag.VALID_FROM as validFrom, ag.VALID_TO as validTo, ag.GUARANTEE_AMOUNT as guaranteeAmount\n" +                ",d.description as guaranteeType, c.currency_code as guaranteeCurrency,ag.GUARANTOR_ADDRESS_LINE as addressLine\n" +                ",ag.GUARANTOR_CITY as city, con.country_code as country, ag.GUARANTOR_POST_CODE as postalCode, ag.RATING as rating from account_guarantees ag\n" +                "left join accounts a on a.account_oid = ag.account_oid\n" +                "left join descriptions d on d.description_oid = ag.guarantee_type_did\n" +                "left join countries con on con.country_oid = ag.GUARANTOR_COUNTRY_OID\n" +                "left join currencies c on c.currency_oid = ag.GUARANTEE_CURRENCY_OID\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        for (int k = 0; k <= queryResults.size() - 1; k++) {            sectionNumber = sectionNumber + k;            List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));            List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));            int values = 1;            if (actionOfSection.equalsIgnoreCase("view")) {                for (int i = 0; i <= fieldNames.size() - 1; i++) {                    if (eligibilityOfView.containsKey("accountGuaranteesVO.valid_from_is_viewable")) {                        if (eligibilityOfView.get("accountGuaranteesVO.valid_from_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Valid from")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    String[] datearr = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDFROM").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDFROM").trim().split(" ")[0].split("-");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(values - 1).getText().trim(), "Valid from field value display based on validation control");                                        i = i + 1;                                        values = values + 1;                                    }                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("accountGuaranteesVO.valid_to_is_viewable")) {                        if (eligibilityOfView.get("accountGuaranteesVO.valid_to_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Valid to")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    String[] datearr = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDTO").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDTO").trim().split(" ")[0].split("-");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(values - 1).getText().trim(), "Valid to field value display based on validation control");                                        i = i + 1;                                    }                                    values = values + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("guarantee_amount_is_viewable")) {                        if (eligibilityOfView.get("guarantee_amount_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Guarantee amount")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEEAMOUNT").trim(), fieldValues.get(values - 1).getText().trim(), "Guarantee amount field value display based on validation control");                                    i = i + 1;                                    values = values + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("guarantee_type_did_is_viewable")) {                        if (eligibilityOfView.get("guarantee_type_did_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Guarantee type")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEETYPE").trim(), fieldValues.get(values - 1).getText().trim(), "Guarantee type field value display based on validation control");                                    i = i + 1;                                    values = values + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("guarantee_currency_oid_is_viewable")) {                        if (eligibilityOfView.get("guarantee_currency_oid_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Guarantee currency")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEECURRENCY").trim(), fieldValues.get(values - 1).getText().trim(), "Guarantee currency field value display based on validation control");                                    i = i + 1;                                    values = values + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("guarantor_address_line_is_viewable")) {                        if (eligibilityOfView.get("guarantor_address_line_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Guarantor address")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    commonPage.assertTwoStrings(logger, getAddressInGuaranteeSection(queryResults.get(k)).trim(), fieldValues.get(values - 1).getText().trim(), "Guarantor address field value display based on validation control");                                    i = i + 1;                                    values = values + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("rating_is_viewable")) {                        if (eligibilityOfView.get("rating_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Rating")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "RATING").trim(), fieldValues.get(values - 1).getText().trim(), "Rating field value display based on validation control");                                    i = i + 1;                                    values = values + 1;                                }                            }                        }                    }                }            } else if (actionOfSection.equalsIgnoreCase("Edit")) {                if (eligibilityOfEdit.containsValue("true")) {                    basePage.userClick(logger, By.xpath("(//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon)[" + (k + 1) + "]"));                    commonPage.clickButtonUsingButtonLocator(logger, "Edit");                    List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                    for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                        if (eligibilityOfEdit.containsKey("accountGuaranteesVO.valid_from_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Valid from")) {                                String[] datearr = {};                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='guarantee_validFrom']>input"))) {                                    if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDFROM").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDFROM").trim().split(" ")[0].split("-");                                        String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guarantee_validFrom']>input"), "ng-reflect-model").split(" ");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + String.valueOf(commonPage.getIndexOfMonth(actValueArr[1].toUpperCase())).replaceAll("^0+(?!$)", "") + "/" + actValueArr[3], "Valid From field value display based on validation control");                                        PropUtils.setProps("previous-guarantee_validFrom-" + k, datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                    } else {                                        PropUtils.setProps("previous-guarantee_validFrom-" + k, "", baseUtils.testDataFilePath);                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDFROM").trim(), "", "Valid From field value display based on validation control");                                }                                if (eligibilityOfEdit.get("accountGuaranteesVO.valid_from_is_editable").equalsIgnoreCase("true")) {                                    commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "guarantee_validFrom", "5", "future");                                    String updatedValue[] = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guarantee_validFrom']>input"), "ng-reflect-model").split(" ");                                    PropUtils.setProps("updated-guarantee_validFrom-" + k, updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("updated-guarantee_validFrom-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guarantee_validFrom']>input"), "ng-reflect-is-disabled"), "Valid From field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("accountGuaranteesVO.valid_to_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Valid to")) {                                String[] datearr = {};                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='guarantee_validTo']>input"))) {                                    if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDTO").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDTO").trim().split(" ")[0].split("-");                                        String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guarantee_validTo']>input"), "ng-reflect-model").split(" ");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + String.valueOf(commonPage.getIndexOfMonth(actValueArr[1].toUpperCase())).replaceAll("^0+(?!$)", "") + "/" + actValueArr[3], "Valid From field value display based on validation control");                                        PropUtils.setProps("previous-guarantee_validTo-" + k, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], baseUtils.testDataFilePath);                                    } else {                                        PropUtils.setProps("previous-guarantee_validTo-" + k, "", baseUtils.testDataFilePath);                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALIDTO").trim(), "", "Valid From field value display based on validation control");                                }                                if (eligibilityOfEdit.get("accountGuaranteesVO.valid_to_is_editable").equalsIgnoreCase("true")) {                                    commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "guarantee_validTo", "5", "future");                                    String updatedValue[] = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guarantee_validTo']>input"), "ng-reflect-model").split(" ");                                    PropUtils.setProps("updated-guarantee_validTo-" + k, updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("updated-guarantee_validTo-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guarantee_validTo']>input"), "ng-reflect-is-disabled"), "Valid From field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("guarantee_amount_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Guarantee amount")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='guaranteeAmount']>input"))) {                                    if (commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEEAMOUNT").trim().equalsIgnoreCase("0") || commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEEAMOUNT").trim().equalsIgnoreCase("")) {                                        if (commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guaranteeAmount']>input"), "ng-reflect-model").equalsIgnoreCase("0") || commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guaranteeAmount']>input"), "ng-reflect-model").equalsIgnoreCase("")) {                                            logger.log("Guarantee amount is displayed as expected");                                        }                                    } else {                                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEEAMOUNT").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guaranteeAmount']>input"), "ng-reflect-model"), "Guarantee amount field value display based on validation control");                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEEAMOUNT").trim(), "", "Guarantee amount field value display based on validation control");                                }                                PropUtils.setProps("previous-guaranteeAmount-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEEAMOUNT").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("guarantee_amount_is_editable").equalsIgnoreCase("true")) {                                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='guaranteeAmount']>input"), PasswordGenerator.generateNumeric(4));                                    PropUtils.setProps("updated-guaranteeAmount-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guaranteeAmount']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("updated-guaranteeAmount-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guaranteeAmount']>input"), "ng-reflect-is-disabled"), "Guarantee Amount field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("guarantee_type_did_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Guarantee type")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='guaranteeType']>mat-select"))) {                                    if (commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEETYPE").trim().contains(commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='guaranteeType']>mat-select"), "ng-reflect-model"))) {                                        logger.log("Guarntee type displayed as expected");                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEETYPE").trim(), "", "Guarantee type field value display based on validation control");                                }                                PropUtils.setProps("previous-guaranteeType-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEETYPE").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("guarantee_type_did_is_editable").equalsIgnoreCase("true")) {                                    String guaranteeTypeQuery = "select description as guaranteeType from descriptions where DESCRIPTION_TYPE_OID = 66 and client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                    List<Map<String, String>> guaranteeTypeQR = commonUtils.getAllRowsOfQueryResultsOnListMap(guaranteeTypeQuery);                                    if (guaranteeTypeQR.size() == 1) {                                        PropUtils.setProps("updated-guaranteeType-" + k, "", baseUtils.testDataFilePath);                                        commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='guaranteeType']>mat-select"), "ng-reflect-is-disabled"), "Guarantee Type field status in edit pop up");                                    } else {                                        basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='guaranteeType']>mat-select"));                                        for (int j = 0; j <= guaranteeTypeQR.size() - 1; j++) {                                            commonPage.verifyPresenceOSpanText(logger, guaranteeTypeQR.get(j).get("GUARANTEETYPE"));                                        }                                        basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEETYPE").trim());                                        PropUtils.setProps("updated-guaranteeType-" + k, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='guaranteeType']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                    }                                } else {                                    PropUtils.setProps("updated-guaranteeType-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='guaranteeType']>mat-select"), "ng-reflect-is-disabled"), "Guarantee Type field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("guarantee_currency_oid_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Guarantee currency")) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEECURRENCY").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guaranteeCurrency']>input"), "ng-reflect-model"), "Guarantee currency field value display based on validation control");                                PropUtils.setProps("previous-guaranteeCurrency-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "GUARANTEECURRENCY").trim(), baseUtils.testDataFilePath);                                if (!eligibilityOfEdit.get("guarantee_currency_oid_is_editable").equalsIgnoreCase("true")) {                                    PropUtils.setProps("updated-guaranteeCurrency-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='guaranteeCurrency']>input"), "ng-reflect-is-disabled"), "Guarantee currency field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("guarantor_address_line_is_editable")) {                            PropUtils.setProps("previous-guarantor-address-" + k, getAddressInGuaranteeSection(queryResults.get(k)), baseUtils.testDataFilePath);                            if (commonPage.getSpecificValueFromMapObject(queryResults.get(k), "ADDRESSLINE").contains(commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"), "ng-reflect-model"))) {                                logger.log("Address line is displayed as expected");                            }                            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "COUNTRY"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), "ng-reflect-model"), "Country field value in edit pop up");                            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "CITY"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-model"), "City or town field value in edit pop up");                            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "POSTALCODE"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-model"), "Postal code field value in edit pop up");                            PropUtils.setProps("updated-guarantor-address-" + k, updateGuaranteeAddress(logger, eligibilityOfEdit, queryResults.get(k)), baseUtils.testDataFilePath);                            i = i + 1;                        }                        if (eligibilityOfEdit.containsKey("rating_is_editable")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='rating']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "RATING").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='rating']>input"), "ng-reflect-model"), "Rating field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "RATING").trim(), "", "Rating field value display based on validation control");                            }                            PropUtils.setProps("previous-rating-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "RATING").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("rating_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='rating']>input"), PasswordGenerator.generateNumeric(2));                                PropUtils.setProps("updated-rating-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='rating']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-rating-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='rating']>input"), "ng-reflect-disabled"), "Rating field status in edit pop up");                            }                            i = i + 1;                        }                        break;                    }                    commonPage.clickButtonUsingSpan(logger, "Save");                    commonPage.verifyPresenceOfDivText(logger, "Guarantee details section has been updated");                } else {                    if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                        logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                    } else {                        commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                    }                    logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");                }            }        }//        if (actionOfSection.equalsIgnoreCase("Edit")) {//            String[] dateToArr = {};//            properties = PropUtils.getProps(baseUtils.testDataFile);//            queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);//            for (int i = 0; i <= queryResults.size() - 1; i++) {//                dateToArr = commonPage.getSpecificValueFromMapObject(queryResults.get(i), "VALIDFROM").trim().split(" ")[0].split("-");//                if (!PropUtils.getPropValue(properties, "updated-guarantee_validFrom-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-guarantee_validFrom-" + i), dateToArr[2] + "/" + dateToArr[1] + "/" + dateToArr[0], "Guarantee valid from field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-guarantee_validFrom-" + i), dateToArr[2] + "/" + dateToArr[1] + "/" + dateToArr[0], "Previous Guarantee valid from field value");//                }//                dateToArr = commonPage.getSpecificValueFromMapObject(queryResults.get(i), "VALIDTO").trim().split(" ")[0].split("-");//                if (!PropUtils.getPropValue(properties, "updated-guarantee_validTo-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-guarantee_validTo-" + i), dateToArr[2] + "/" + dateToArr[1].replaceAll("^0+(?!$)", "") + "/" + dateToArr[0], "Guarantee valid to field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-guarantee_validTo-" + i), dateToArr[2] + "/" + dateToArr[1].replaceAll("^0+(?!$)", "") + "/" + dateToArr[0], "Previous Guarantee valid to field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-guaranteeAmount-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-guaranteeAmount-" + i), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEEAMOUNT").trim(), "Guarantee amount field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-guaranteeAmount-" + i), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEEAMOUNT").trim(), "Previous Guarantee amount field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-guaranteeType-" + i).equalsIgnoreCase("")) {//                    if (commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEETYPE").trim().contains(PropUtils.getPropValue(properties, "updated-guaranteeType-" + i))) {//                        logger.log("Guarantee type displayed as expected");//                    } else {//                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-guaranteeType-" + i), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEETYPE").trim(), "Guarantee type field value latest updated");//                    }//                } else {//                    if (commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEETYPE").trim().contains(PropUtils.getPropValue(properties, "previous-guaranteeType-" + i))) {//                        logger.log("Guarantee type displayed as expected");//                    } else {//                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-guaranteeType-" + i), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEETYPE").trim(), "Previous Guarantee type field value");//                    }//                }//                if (!PropUtils.getPropValue(properties, "updated-guaranteeCurrency-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-guaranteeCurrency-" + i), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEECURRENCY").trim(), "Guarantee currency field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-guaranteeCurrency-" + i), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "GUARANTEECURRENCY").trim(), "Previous Guarantee currency field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-guarantor-address-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-guarantor-address-" + i).replaceAll(", ", ","), getAddressInGuaranteeSection(queryResults.get(i)).replaceAll(", ", ","), "Guarantee address field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-guarantor-address-" + i).replaceAll(", ", ","), getAddressInGuaranteeSection(queryResults.get(i)).replaceAll(", ", ","), "Previous Guarantee address field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-rating-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-rating-" + i).replaceAll("^0+(?!$)", ""), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "RATING").trim(), "Guarantee rating field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-rating-" + i).replaceAll("^0+(?!$)", ""), commonPage.getSpecificValueFromMapObject(queryResults.get(i), "RATING").trim(), "Previous Guarantee rating field value");//                }//            }//        }    }    /*    Method to handle Securities/Solvency section in financial information module     */    public void validateSecuritiesSolvencySectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select d.description as solvencyState, aci.SOLVENCY_GIVEN_AT as solvencygivenat, aci.SOLVENCY_DECLINED_AT as solvencydeclinedat\n" +                ",d2.description as riskgroup,aci.SECURITISATION_EXCEPTION as securityException from account_credit_information aci\n" +                "left join descriptions d on d.description_oid = aci.SOLVENCY_STATE_DID\n" +                "left join descriptions d2 on d2.description_oid = aci.risk_group_did\n" +                "left join accounts a on a.account_oid = aci.account_oid\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = new ArrayList<>();        if (queryResults.size() > 1) {            fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));            if (actionOfSection.equalsIgnoreCase("view")) {                for (int i = 0; i <= fieldNames.size() - 1; i++) {                    if (eligibilityOfView.containsKey("solvency_state_did_is_viewable")) {                        if (eligibilityOfView.get("solvency_state_did_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Solvency state")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim(), fieldValues.get(i).getText().trim(), "Solvency state field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim(), "", "Solvency state field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("solvency_given_at_is_viewable")) {                        if (eligibilityOfView.get("solvency_given_at_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Solvency given at")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    String[] datearr = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYGIVENAT").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYGIVENAT").trim().split(" ")[0].split("-");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Solvency given at field value display based on validation control");                                        i = i + 1;                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYGIVENAT").trim(), "", "Solvency given at field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("solvency_declined_at_is_viewable")) {                        if (eligibilityOfView.get("solvency_declined_at_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Solvency declined at")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    String[] datearr = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYDECLINEDAT").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYDECLINEDAT").trim().split(" ")[0].split("-");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Solvency declined at field value display based on validation control");                                        i = i + 1;                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYDECLINEDAT").trim(), "", "Solvency declined at field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("risk_group_did_is_viewable")) {                        if (eligibilityOfView.get("risk_group_did_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Risk group")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "RISKGROUP").trim(), fieldValues.get(i).getText().trim(), "Risk group field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "RISKGROUP").trim(), "", "Risk group field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("securitisation_exception_is_viewable")) {                        if (eligibilityOfView.get("securitisation_exception_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Securitization exception")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    String value = "True";                                    if (commonPage.getSpecificValueFromMapObject(queryResults, "SECURITYEXCEPTION").trim().equalsIgnoreCase("N")) {                                        value = "False";                                    }                                    commonPage.assertTwoStrings(logger, value, fieldValues.get(i).getText().trim(), "Securitization exception field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SECURITYEXCEPTION").trim(), "", "Securitization exception field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("solvency_state_did_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Solvency state")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='solvencyState']>mat-select"), "ng-reflect-model"), "Solvency state field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim(), "", "Solvency state field value display based on validation control");                            }                            PropUtils.setProps("previous-solvencyState", commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("solvency_state_did_is_editable").equalsIgnoreCase("true")) {                                String solvencyStateQuery = "select description as solvencyState from descriptions where DESCRIPTION_TYPE_OID = 64 and client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                List<Map<String, String>> solvencyStateQR = commonUtils.getAllRowsOfQueryResultsOnListMap(solvencyStateQuery);                                if (solvencyStateQR.size() == 1) {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='solvencyState']>mat-select"), "ng-reflect-is-disabled"), "Solvency State field status in Edit popup");                                    PropUtils.setProps("updated-solvencyState", "", baseUtils.testDataFilePath);                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='solvencyState']>mat-select"));                                    for (int j = 0; j <= solvencyStateQR.size() - 1; j++) {                                        if (!commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim().equalsIgnoreCase(solvencyStateQR.get(j).get("SOLVENCYSTATE"))) {                                            commonPage.verifyPresenceOSpanText(logger, solvencyStateQR.get(j).get("SOLVENCYSTATE"));                                        }                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim());                                    PropUtils.setProps("updated-solvencyState", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='solvencyState']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                }                            } else {                                PropUtils.setProps("updated-solvencyState", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='solvencyState']>mat-select"), "ng-reflect-is-disabled"), "Solvency State field status in Edit popup");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("solvency_given_at_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Solvency given at")) {                            String[] datearr = {};                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='solvencyGivenAt']>input"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYGIVENAT").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYGIVENAT").trim().split(" ")[0].split("-");                                    String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='solvencyGivenAt']>input"), "ng-reflect-model").split(" ");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + String.valueOf(commonPage.getIndexOfMonth(actValueArr[1].toUpperCase())).replaceAll("^0+(?!$)", "") + "/" + actValueArr[3], "Solvency given at field value display based on validation control");                                    PropUtils.setProps("previous-solvencyGivenAt", datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                }                            } else {                                PropUtils.setProps("previous-solvencyGivenAt", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYGIVENAT").trim(), "", "Solvency given at field value display based on validation control");                            }                            if (eligibilityOfEdit.get("solvency_given_at_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "solvencyGivenAt", "5", "future");                                String updatedValue[] = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='solvencyGivenAt']>input"), "ng-reflect-model").split(" ");                                PropUtils.setProps("updated-solvencyGivenAt", updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-solvencyGivenAt", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='solvencyGivenAt']>input"), "ng-reflect-is-disabled"), "Solvency given at field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("solvency_declined_at_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Solvency declined at")) {                            String[] datearr = {};                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYDECLINEDAT").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYDECLINEDAT").trim().split(" ")[0].split("-");                                    String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='solvencyDeclinedAt']>input"), "ng-reflect-model").split(" ");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + String.valueOf(commonPage.getIndexOfMonth(actValueArr[1].toUpperCase())).replaceAll("^0+(?!$)", "") + "/" + actValueArr[3], "Solvency declined at field value display based on validation control");                                    PropUtils.setProps("previous-solvencyDeclinedAt", datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                }                            } else {                                PropUtils.setProps("previous-solvencyDeclinedAt", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYDECLINEDAT").trim(), "", "Solvency declined at field value display based on validation control");                            }                            if (eligibilityOfEdit.get("solvency_declined_at_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "solvencyDeclinedAt", "5", "future");                                String updatedValue[] = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='solvencyDeclinedAt']>input"), "ng-reflect-model").split(" ");                                PropUtils.setProps("updated-solvencyDeclinedAt", updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-solvencyDeclinedAt", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='solvencyDeclinedAt']>input"), "ng-reflect-is-disabled"), "Solvency declined at field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("risk_group_did_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Risk group")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='riskGroup']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "RISKGROUP").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='riskGroup']>mat-select"), "ng-reflect-model"), "Risk group field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "RISKGROUP").trim(), "", "Risk group field value display based on validation control");                            }                            PropUtils.setProps("previous-riskGroup", commonPage.getSpecificValueFromMapObject(queryResults, "RISKGROUP").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("risk_group_did_is_editable").equalsIgnoreCase("true")) {                                String solvencyStateQuery = "select description as riskGroup from descriptions where DESCRIPTION_TYPE_OID = 65 and client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                List<Map<String, String>> solvencyStateQR = commonUtils.getAllRowsOfQueryResultsOnListMap(solvencyStateQuery);                                if (solvencyStateQR.size() == 1) {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='riskGroup']>mat-select"), "ng-reflect-is-disabled"), "Solvency State field status in Edit popup");                                    PropUtils.setProps("updated-riskGroup", "", baseUtils.testDataFilePath);                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='riskGroup']>mat-select"));                                    for (int j = 0; j <= solvencyStateQR.size() - 1; j++) {                                        commonPage.verifyPresenceOSpanText(logger, solvencyStateQR.get(j).get("RISKGROUP"));                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim());                                    PropUtils.setProps("updated-riskGroup", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='riskGroup']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                }                            } else {                                PropUtils.setProps("updated-riskGroup", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='riskGroup']>mat-select"), "ng-reflect-is-disabled"), "Solvency State field status in Edit popup");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("securitisation_exception_is_editable")) {                        String value = "True";                        if (basePage.getStatusOfElement(By.xpath("//mat-checkbox[contains(@class,'mat-checkbox mat-accent')]"))) {                            if (commonPage.getSpecificValueFromMapObject(queryResults, "SECURITYEXCEPTION").trim().equalsIgnoreCase("N")) {                                value = "False";                            }                            commonPage.assertTwoStrings(logger, value.toLowerCase(), commonPage.getAttributeValue(By.xpath("//mat-checkbox[contains(@class,'mat-checkbox mat-accent')]"), "ng-reflect-checked").toLowerCase(), "Securitization exception field value display based on validation control");                        } else {                            commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SECURITYEXCEPTION").trim(), "", "Securitization exception field value display based on validation control");                        }                        PropUtils.setProps("previous-securitisation_exception", value, baseUtils.testDataFilePath);                        if (eligibilityOfEdit.get("securitisation_exception_is_editable").equalsIgnoreCase("true")) {                            basePage.userClick(logger, By.xpath("//mat-checkbox[contains(@class,'mat-checkbox mat-accent')]"));                            if (value.equalsIgnoreCase("True")) {                                PropUtils.setProps("updated-securitisation_exception", "False", baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-securitisation_exception", "True", baseUtils.testDataFilePath);                            }                        } else {                            PropUtils.setProps("updated-securitisation_exception", "", baseUtils.testDataFilePath);                            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.xpath("//mat-checkbox[contains(@class,'mat-checkbox mat-accent')]"), "ng-reflect-disabled"), "Securitization exception field status in edit pop up");                        }                        i = i + 1;                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.verifyPresenceOfDivText(logger, "Securities/Solvency details section has been updated");            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }            queryResults = commonUtils.getQueryResultsOnMap(query);            properties = PropUtils.getProps(baseUtils.testDataFile);            String solvencyGivenAtArr[] = commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYGIVENAT").trim().split(" ")[0].split("-");            ;            String solvencyDeclineAtArr[] = commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYDECLINEDAT").trim().split(" ")[0].split("-");            ;//            String securitisationException = "";//            if (commonPage.getSpecificValueFromMapObject(queryResults, "SECURITYEXCEPTION").trim().equalsIgnoreCase("Y")) {//                securitisationException = "True";//            } else if (commonPage.getSpecificValueFromMapObject(queryResults, "SECURITYEXCEPTION").trim().equalsIgnoreCase("N")) {//                securitisationException = "False";//            }//            if (!PropUtils.getPropValue(properties, "updated-solvencyState").equalsIgnoreCase("")) {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-solvencyState"), commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim(), "updated solvency state value");//            } else {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-solvencyState"), commonPage.getSpecificValueFromMapObject(queryResults, "SOLVENCYSTATE").trim(), "previous solvency state value");//            }//            if (!PropUtils.getPropValue(properties, "updated-solvencyGivenAt").equalsIgnoreCase("")) {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-solvencyGivenAt"), solvencyGivenAtArr[2] + "/" + solvencyGivenAtArr[1].replaceAll("^0+(?!$)", "") + "/" + solvencyGivenAtArr[0], "updated solvency given at value");//            } else {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-solvencyGivenAt"), solvencyGivenAtArr[2] + "/" + solvencyGivenAtArr[1].replaceAll("^0+(?!$)", "") + "/" + solvencyGivenAtArr[0], "previous solvency given at value");//            }//            if (!PropUtils.getPropValue(properties, "updated-solvencyDeclinedAt").equalsIgnoreCase("")) {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-solvencyDeclinedAt"), solvencyDeclineAtArr[2] + "/" + solvencyDeclineAtArr[1].replaceAll("^0+(?!$)", "") + "/" + solvencyDeclineAtArr[0], "updated solvency decline at value");//            } else {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-solvencyDeclinedAt"), solvencyDeclineAtArr[2] + "/" + solvencyDeclineAtArr[1].replaceAll("^0+(?!$)", "") + "/" + solvencyDeclineAtArr[0], "updated solvency decline at value");//            }//            if (!PropUtils.getPropValue(properties, "updated-riskGroup").equalsIgnoreCase("")) {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-riskGroup"), commonPage.getSpecificValueFromMapObject(queryResults, "RISKGROUP").trim(), "updated risk group value");//            } else {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-riskGroup"), commonPage.getSpecificValueFromMapObject(queryResults, "RISKGROUP").trim(), "updated risk group value");//            }//            if (!PropUtils.getPropValue(properties, "updated-securitisation_exception").equalsIgnoreCase("")) {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-securitisation_exception"), securitisationException, "updated security exception value");//            } else {//                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-securitisation_exception"), securitisationException, "updated security exception value");//            }        }    }    /*    Method to handle dunning section in financial information module     */    public void validateDunningSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select d1.description as dunningCode,l.description as dunninglanguage, d.description as dunningcontactProcedure, \n" +                "aci.DUNS_NUMBER_1 as dunsnumber1, aci.DUNS_NUMBER_2 as dunsnumber2 from account_credit_information aci\n" +                "left join accounts a on a.account_oid=aci.account_oid\n" +                "left join descriptions d on d.description_oid  =aci.DUNNING_CONTACT_METHOD_DID\n" +                "left join descriptions d1 on d1.description_oid = aci.dunning_code_did\n" +                "left join m_customers mcust on mcust.customer_mid= a.customer_mid\n" +                "left join languages l on l.language_oid = aci.language_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        logger.log(query);        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        List<WebElement> listDunning = basePage.getListOfElements(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));        for (int k = 0; k <= listDunning.size() - 1; k++) {            sectionNumber = sectionNumber + k;            List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));            List<WebElement> fieldValues = new ArrayList<>();            if (basePage.getStatusOfElement(By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"))) {                fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));            }            if (actionOfSection.equalsIgnoreCase("view")) {                for (int i = 0; i <= fieldNames.size() - 1; i++) {                    if (eligibilityOfView.containsKey("dunningCodeVO.dunning_code_is_viewable")) {                        if (eligibilityOfView.get("dunningCodeVO.dunning_code_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Dunning type")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNNINGCODE").trim(), fieldValues.get(i).getText().trim(), "Dunning language field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNNINGCODE").trim(), "", "Dunning language field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("language_oid_is_viewable")) {                        if (eligibilityOfView.get("language_oid_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Dunning language")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNNINGLANGUAGE").trim(), fieldValues.get(i).getText().trim(), "Dunning language field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNNINGLANGUAGE").trim(), "", "Dunning language field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("dunning_contact_method_did_is_viewable")) {                        if (eligibilityOfView.get("dunning_contact_method_did_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Dunning contact procedure")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNNINGCONTACTPROCEDURE").trim(), fieldValues.get(i).getText().trim(), "Dunning contact procedure field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNNINGCONTACTPROCEDURE").trim(), "", "Dunning contact procedure field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("duns_number_1_is_viewable")) {                        if (eligibilityOfView.get("duns_number_1_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Duns Number 1")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNSNUMBER1").trim(), fieldValues.get(i).getText().trim(), "Duns Number 1 field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNSNUMBER1").trim(), "", "Duns Number 1 field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("duns_number_2_is_viewable")) {                        if (eligibilityOfView.get("duns_number_2_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Duns Number 2")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNSNUMBER2").trim(), fieldValues.get(i).getText().trim(), "Duns Number 2 field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "DUNSNUMBER2").trim(), "", "Duns Number 2 field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                }            }            if (actionOfSection.equalsIgnoreCase("Edit")) {                if (eligibilityOfEdit.containsValue("true")) {                    basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                    commonPage.clickButtonUsingButtonLocator(logger, "Edit");                    List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                    Map<String, String> qr = new HashMap<>();                    for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                        if (queryResults.size() == 0) {                            qr = null;                        } else {                            qr = queryResults.get(k);                        }                        if (eligibilityOfEdit.containsKey("dunningCodeVO.dunning_code_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Dunning type")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='dunningCode']>mat-select"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCODE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='dunningCode']>mat-select"), "ng-reflect-model"), "Dunning Code field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCODE").trim(), "", "Dunning Code field value display based on validation control");                                }                                PropUtils.setProps("previous-dunningCode-" + k, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCODE").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("dunningCodeVO.dunning_code_is_editable").equalsIgnoreCase("true")) {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='dunningCode']>mat-select"));                                    String dunningCodeQuery = "select description as dunningCode from descriptions where description_type_oid = 67 and client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                    List<Map<String, String>> dunningCodeQR = commonUtils.getAllRowsOfQueryResultsOnListMap(dunningCodeQuery);                                    for (int j = 0; j <= dunningCodeQR.size() - 1; j++) {                                        commonPage.verifyPresenceOSpanText(logger, dunningCodeQR.get(j).get("DUNNINGCODE"));                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCODE").trim());                                    PropUtils.setProps("updated-dunningCode-" + k, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='dunningCode']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='dunningCode']>mat-select"), "ng-reflect-is-disabled"), "Dunning code field status in edit pop up");                                    PropUtils.setProps("updated-dunningCode-" + k, "", baseUtils.testDataFilePath);                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("language_oid_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Dunning language")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGLANGUAGE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"), "ng-reflect-model"), "Dunning language field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGLANGUAGE").trim(), "", "Dunning language field value display based on validation control");                                }                                PropUtils.setProps("previous-dunningLanguage-" + k, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGLANGUAGE").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("language_oid_is_editable").equalsIgnoreCase("true")) {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"));                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(qr, "DUNNINGLANGUAGE").trim());                                    commonPage.handleActionsClassForKeyboardActions("TAB");                                    PropUtils.setProps("updated-dunningLanguage-" + k, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"), "ng-reflect-is-disabled"), "Dunning language field status in edit pop up");                                    PropUtils.setProps("updated-dunningLanguage-" + k, "", baseUtils.testDataFilePath);                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("dunning_contact_method_did_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Dunning contact procedure")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='dunningContactMethod']>mat-select"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCONTACTPROCEDURE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='dunningContactMethod']>mat-select"), "ng-reflect-model"), "Dunning contact procedure field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCONTACTPROCEDURE").trim(), "", "Dunning contact procedure field value display based on validation control");                                }                                PropUtils.setProps("previous-dunningContactMethod-" + k, commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCONTACTPROCEDURE").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("dunning_contact_method_did_is_editable").equalsIgnoreCase("true")) {                                    String dunningConMtdQuery = "select description as dunningContactMethod from descriptions where DESCRIPTION_TYPE_OID = 68 and client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                    List<Map<String, String>> dunningConQR = commonUtils.getAllRowsOfQueryResultsOnListMap(dunningConMtdQuery);                                    if (dunningConQR.size() == 1) {                                        commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='dunningContactMethod']>mat-select"), "ng-reflect-disabled"), "Dunning contact method field status in Edit pop up");                                        PropUtils.setProps("updated-dunningContactMethod-" + k, "", baseUtils.testDataFilePath);                                    } else {                                        basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='dunningContactMethod']>mat-select"));                                        for (int j = 0; j <= dunningConQR.size() - 1; j++) {                                            commonPage.verifyPresenceOSpanText(logger, dunningConQR.get(j).get("DUNNINGCONTACTMETHOD"));                                        }                                        basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(qr, "DUNNINGCONTACTPROCEDURE").trim());                                        PropUtils.setProps("updated-dunningContactMethod-" + k, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='dunningContactMethod']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                    }                                } else {                                    PropUtils.setProps("updated-dunningContactMethod-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='dunningContactMethod']>mat-select"), "ng-reflect-disabled"), "Dunning contact procedure field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("duns_number_1_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Duns Number 1")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='dunsNumber1']>input"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNSNUMBER1").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='dunsNumber1']>input"), "ng-reflect-model"), "Duns Number 1 field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNSNUMBER1").trim(), "", "Duns Number 1 field value display based on validation control");                                }                                PropUtils.setProps("previous-dunsNumber1-" + k, commonPage.getSpecificValueFromMapObject(qr, "DUNSNUMBER1").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("duns_number_1_is_editable").equalsIgnoreCase("true")) {                                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='dunsNumber1']>input"), PasswordGenerator.generateNumeric(10));                                    PropUtils.setProps("updated-dunsNumber1-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='dunsNumber1']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("updated-dunsNumber1-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='dunsNumber1']>input"), "ng-reflect-is-disabled"), "Duns Number 1 field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("duns_number_2_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Duns Number 2")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='dunsNumber2']>input"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNSNUMBER2").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='dunsNumber2']>input"), "ng-reflect-model"), "Duns Number 1 field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(qr, "DUNSNUMBER2").trim(), "", "Duns Number 2 field value display based on validation control");                                }                                PropUtils.setProps("previous-dunsNumber2-" + k, commonPage.getSpecificValueFromMapObject(qr, "DUNSNUMBER2").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("duns_number_2_is_editable").equalsIgnoreCase("true")) {                                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='dunsNumber2']>input"), PasswordGenerator.generateNumeric(10));                                    PropUtils.setProps("updated-dunsNumber2-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='dunsNumber2']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("updated-dunsNumber2-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='dunsNumber2']>input"), "ng-reflect-is-disabled"), "Duns Number 2 field status in edit pop up");                                }                                i = i + 1;                            }                        }                    }                    commonPage.clickButtonUsingSpan(logger, "Save");                    commonPage.verifyPresenceOfDivText(logger, "Dunning details section has been updated");                } else {                    if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                        logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                    } else {                        commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                    }                    logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");                }            }        }//        if (actionOfSection.equalsIgnoreCase("Edit")) {//            properties = PropUtils.getProps(baseUtils.testDataFile);//            queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);//            for (int i = 0; i <= queryResults.size() - 1; i++) {//                if (!PropUtils.getPropValue(properties, "updated-dunningCode-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-dunningCode-" + i), queryResults.get(i).get("DUNNINGCODE"), "Dunning code field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-dunningCode-" + i), queryResults.get(i).get("DUNNINGCODE"), "Previous Dunning code field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-dunningLanguage-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-dunningLanguage-" + i), queryResults.get(i).get("DUNNINGLANGUAGE"), "Dunning language field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-dunningLanguage-" + i), queryResults.get(i).get("DUNNINGLANGUAGE"), "Previous Dunning language field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-dunningContactMethod-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-dunningContactMethod-" + i), queryResults.get(i).get("DUNNINGCONTACTPROCEDURE"), "Dunning contact procedure field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-dunningContactMethod-" + i), queryResults.get(i).get("DUNNINGCONTACTPROCEDURE"), "Previous Dunning contact procedure field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-dunsNumber1-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-dunsNumber1-" + i), queryResults.get(i).get("DUNSNUMBER1"), "Duns Number 1 field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-dunsNumber1-" + i), queryResults.get(i).get("DUNSNUMBER1"), "Previous Duns Number 1 field value");//                }//                if (!PropUtils.getPropValue(properties, "updated-dunsNumber2-" + i).equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-dunsNumber2-" + i), queryResults.get(i).get("DUNSNUMBER2"), "Duns Number 2 field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-dunsNumber2-" + i), queryResults.get(i).get("DUNSNUMBER2"), "Previous Duns Number 2 field value");//                }//            }//        }    }    /*    Method to handle security deposit section in financial information module     */    public void validateSecurityDepositSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select a.DEPOSIT_BALANCE,a.SECURITY_INDICATOR,a.TOTAL_SECURITY_VALUE from accounts a\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("deposit_balance_is_viewable")) {                    if (eligibilityOfView.get("deposit_balance_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Deposit balance")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                if (commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim().equalsIgnoreCase("") || commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim().equalsIgnoreCase("0")) {                                    if (fieldValues.get(i).getText().trim().equalsIgnoreCase("") || fieldValues.get(i).getText().trim().equalsIgnoreCase("0")) {                                        logger.log("Deposit balance field value displayed as expected.");                                    } else {                                        logger.log("Expected deposit balance field value : " + commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim());                                        logger.log("Actual deposit balance field value : " + fieldValues.get(i).getText().trim());                                    }                                }                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim(), "", "Deposit balance field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("total_security_value_is_viewable")) {                    if (eligibilityOfView.get("total_security_value_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Total security value")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                if (commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim().equalsIgnoreCase("") || commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim().equalsIgnoreCase("0")) {                                    if (fieldValues.get(i).getText().trim().equalsIgnoreCase("") || fieldValues.get(i).getText().trim().equalsIgnoreCase("0")) {                                        logger.log("Total security value displayed as expected");                                    } else {                                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), fieldValues.get(i).getText().trim(), "Total security value field value display based on validation control");                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), fieldValues.get(i).getText().trim(), "Total security value field value display based on validation control");                                }                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), "", "Total security value field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("security_indicator_is_viewable")) {                    if (eligibilityOfView.get("security_indicator_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Security indicator")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SECURITY_INDICATOR").trim(), fieldValues.get(i).getText().trim(), "Security indicator field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SECURITY_INDICATOR").trim(), "", "Security indicator field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("deposit_balance_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Deposit balance")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"))) {                                if (commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim().equalsIgnoreCase("") || commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim().equalsIgnoreCase("0")) {                                    if (commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"), "ng-reflect-model").equalsIgnoreCase("") || commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"), "ng-reflect-model").equalsIgnoreCase("0")) {                                        logger.log("deposit balance is displayed as expected");                                    } else {                                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"), "ng-reflect-model"), "Deposit balance field value display based on validation control");                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"), "ng-reflect-model"), "Deposit balance field value display based on validation control");                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim(), "", "Deposit balance field value display based on validation control");                            }                            PropUtils.setProps("previous-depositBalance", commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("deposit_balance_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"), PasswordGenerator.generateNumeric(2));                                PropUtils.setProps("updated-depositBalance", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-depositBalance", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='depositBalance']>input"), "ng-reflect-is-disabled"), "Deposit Balance  field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("security_indicator_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Security indicator")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='securityIndicator']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SECURITY_INDICATOR").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='securityIndicator']>input"), "ng-reflect-model"), "Security indicator field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SECURITY_INDICATOR").trim(), "", "Security indicator field value display based on validation control");                            }                            PropUtils.setProps("previous-securityIndicator", commonPage.getSpecificValueFromMapObject(queryResults, "SECURITY_INDICATOR").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("security_indicator_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='securityIndicator']>input"), PasswordGenerator.generateAlphaNumeric(logger, 4));                                PropUtils.setProps("updated-securityIndicator", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='securityIndicator']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-securityIndicator", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='securityIndicator']>input"), "ng-reflect-is-disabled"), "security indicator field status");                            }                        }                        i = i + 1;                    }                    if (eligibilityOfEdit.containsKey("total_security_value_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Total security value")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"))) {                                if (commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim().equalsIgnoreCase("") || commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim().equalsIgnoreCase("0")) {                                    if (commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"), "ng-reflect-model").equalsIgnoreCase("") || commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"), "ng-reflect-model").equalsIgnoreCase("0")) {                                        logger.log("Total security value is displayed as expected");                                    } else {                                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"), "ng-reflect-model"), "Total security value field value display based on validation control");                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"), "ng-reflect-model"), "Total security value field value display based on validation control");                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), "", "Total security value field value display based on validation control");                            }                            PropUtils.setProps("previous-totalSecurityValue", commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("total_security_value_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"), PasswordGenerator.generateNumeric(2));                                PropUtils.setProps("updated-totalSecurityValue", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-totalSecurityValue", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='totalSecurityValue']>input"), "ng-reflect-is-disabled"), "Total security value  field status");                            }                            i = i + 1;                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.verifyPresenceOfDivText(logger, "Security deposit details section has been updated");                queryResults = commonUtils.getQueryResultsOnMap(query);                properties = PropUtils.getProps(baseUtils.testDataFile);                if (PropUtils.getPropValue(properties, "updated-depositBalance").equalsIgnoreCase("") || PropUtils.getPropValue(properties, "updated-depositBalance").equalsIgnoreCase("0")) {                    if (commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim().equalsIgnoreCase("") || commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim().equalsIgnoreCase("0")) {                        logger.log("deposite balance is displayed as expected");                    } else {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-depositBalance"), commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim(), "Deposit balance field value after updated latest value");                    }                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-depositBalance"), commonPage.getSpecificValueFromMapObject(queryResults, "DEPOSIT_BALANCE").trim(), "Previous Deposit balance field value");                }                if (PropUtils.getPropValue(properties, "updated-totalSecurityValue").equalsIgnoreCase("") || PropUtils.getPropValue(properties, "updated-totalSecurityValue").equalsIgnoreCase("0")) {                    if (commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim().equalsIgnoreCase("") || commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim().equalsIgnoreCase("0")) {                        logger.log("Total security value displayed as expected.");                    } else {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-totalSecurityValue"), commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), "Total security value field value after updated latest value");                    }                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-totalSecurityValue"), commonPage.getSpecificValueFromMapObject(queryResults, "TOTAL_SECURITY_VALUE").trim(), "Previous Total security value field value");                }                if (!PropUtils.getPropValue(properties, "updated-securityIndicator").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-securityIndicator"), commonPage.getSpecificValueFromMapObject(queryResults, "SECURITY_INDICATOR").trim(), "Security Indicator field value after updated latest value");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-securityIndicator"), commonPage.getSpecificValueFromMapObject(queryResults, "SECURITY_INDICATOR").trim(), "Previous Security Indicator value field value");                }            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validation bank details section in financial information module     */    public void validateBankDetailsSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select ba.bank_name,b.bank_no,ba.BRANCH_NO,ba.SWIFT_CODE,ba.ACCOUNT_NO as bankaccountNumber,ba.ACCOUNT_NAME,\n" +                "ba.IBAN,ba.UMR_NO,ba.SIGN_TOWN,ba.ACCOUNT_NO as paymentFrom,aci.BRANCH_SEGMENTATION_CODE as branchSegmentationfrom,\n" +                "ba.BIC,ab.IS_AUTHORISED_FOR_COLLECTION,to_char( ab.VALID_FROM,'yyyy-MM-dd') as VALID_FROM,to_char(ab.VALID_TO,'yyyy-MM-dd') as VALID_TO from bank_accounts ba\n" +                "left join account_banks ab on ab.bank_account_oid = ba.bank_account_oid\n" +                "left join accounts a on a.account_oid = ab.account_oid\n" +                "left join bank_branches bb on bb.branch_no = ba.branch_no\n" +                "left join banks b on ba.bank_oid = b.bank_oid\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join account_credit_information aci on aci.account_oid = a.account_oid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        logger.log(query);        List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        for (int k = 0; k <= queryResults.size() - 1; k++) {            queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);            sectionNumber = sectionNumber + k;            List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));            List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));            int values = 1;            if (actionOfSection.equalsIgnoreCase("view")) {                for (int i = 0; i <= fieldNames.size() - 1; i++) {                    if (eligibilityOfView.containsKey("bankAccountVO.bank_name_is_viewable")) {                        if (eligibilityOfView.get("bankAccountVO.bank_name_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Bank name")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANK_NAME").trim(), fieldValues.get(i).getText().trim(), "Bank name field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("bankAccountVO.bank_no_is_viewable")) {                        if (eligibilityOfView.get("bankAccountVO.bank_no_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Bank No.")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANK_NO").trim(), fieldValues.get(i).getText().trim(), "Bank No. field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("bankAccountVO.branch_no_is_viewable")) {                        if (eligibilityOfView.get("bankAccountVO.branch_no_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Branch No.")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCH_NO").trim(), fieldValues.get(i).getText().trim(), "Branch No. field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("swift_code_is_viewable")) {                        if (eligibilityOfView.get("swift_code_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Swift code")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "SWIFT_CODE").trim(), fieldValues.get(i).getText().trim(), "Swift code field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("bank_account_no_is_viewable")) {                        if (eligibilityOfView.get("bank_account_no_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Bank Account No.")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANKACCOUNTNUMBER").trim(), fieldValues.get(i).getText().trim(), "Bank Account No. field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("account_name_is_viewable")) {                        if (eligibilityOfView.get("account_name_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Account name")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "ACCOUNT_NAME").trim(), fieldValues.get(i).getText().trim(), "Account name field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("iban_is_viewable")) {                        if (eligibilityOfView.get("iban_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("IBAN")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IBAN").trim(), fieldValues.get(i).getText().trim(), "IBAN field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("bankAccountVO.umr_no_is_viewable")) {                        if (eligibilityOfView.get("bankAccountVO.umr_no_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("UMR No.")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "UMR_NO").trim(), fieldValues.get(i).getText().trim(), "UMR No. field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("bankAccountVO.sign_town_is_viewable")) {                        if (eligibilityOfView.get("bankAccountVO.sign_town_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Signing town")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "SIGN_TOWN").trim(), fieldValues.get(i).getText().trim(), "Signing town field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("bankAccountVO.account_no_is_viewable")) {                        if (eligibilityOfView.get("bankAccountVO.account_no_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Payment from")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "PAYMENTFROM").trim(), fieldValues.get(i).getText().trim(), "Payment from field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("branch_segmentation_code_is_viewable")) {                        if (eligibilityOfView.get("branch_segmentation_code_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Branch segmentation form")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCHSEGMENTATIONFROM").trim(), fieldValues.get(i).getText().trim(), "Branch segmentation form field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("bankAccountVO.bic_is_viewable")) {                        if (eligibilityOfView.get("bankAccountVO.bic_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Bank identifier code")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BIC").trim(), fieldValues.get(i).getText().trim(), "Bank identifier code field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfView.containsKey("is_authorised_for_collection_is_viewable")) {                        if (eligibilityOfView.get("is_authorised_for_collection_is_viewable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Authorised bank collection")) {                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                    values = values + 1;                                    String authBankCollection = "";                                    if (commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IS_AUTHORISED_FOR_COLLECTION").equalsIgnoreCase("Y")) {                                        authBankCollection = "Yes";                                    } else if (commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IS_AUTHORISED_FOR_COLLECTION").equalsIgnoreCase("N")) {                                        authBankCollection = "No";                                    }                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IS_AUTHORISED_FOR_COLLECTION").trim(), fieldValues.get(i).getText().trim(), "Authorised bank collection field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }//                    if (eligibilityOfViewOrEdit.containsKey("valid_from_is_viewable")) {//                        if (eligibilityOfViewOrEdit.get("valid_from_is_viewable").equalsIgnoreCase("true")) {//                            if (fieldNames.get(i).getText().equalsIgnoreCase("Valid from")) {//                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {//                                    String[] datearr = {};//                                    if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_FROM").trim().equalsIgnoreCase("")) {//                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_FROM").trim().split(" ")[0].split("-");//                                        commonPage.assertTwoStrings(logger, datearr[2]+"/"+datearr[1]+"/"+datearr[0], fieldValues.get(i).getText().trim(), "Valid from field value display based on validation control");//                                        i = i + 1;//                                    }//                                } else {//                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_FROM").trim(), "", "Valid from field value display based on validation control");//                                    i = i + 1;//                                }//                            }//                        }//                    }//                    if (eligibilityOfViewOrEdit.containsKey("valid_to_is_viewable")) {//                        if (eligibilityOfViewOrEdit.get("valid_to_is_viewable").equalsIgnoreCase("true")) {//                            if (fieldNames.get(i).getText().equalsIgnoreCase("Valid to")) {//                                if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {//                                    String[] datearr = {};//                                    if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_TO").trim().equalsIgnoreCase("")) {//                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_TO").trim().split(" ")[0].split("-");//                                        commonPage.assertTwoStrings(logger, datearr[2]+"/"+datearr[1]+"/"+datearr[0], fieldValues.get(i).getText().trim(), "Valid to field value display based on validation control");//                                        i = i + 1;//                                    }//                                } else {//                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_TO").trim(), "", "Valid to field value display based on validation control");//                                    i = i + 1;//                                }//                            }//                        }//                    }                }            } else if (actionOfSection.equalsIgnoreCase("Edit")) {                basePage.userClick(logger, By.xpath("(//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon)[" + (k + 1) + "]"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                String banksQuery = "select * from banks where client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                List<Map<String, String>> banksQR = commonUtils.getAllRowsOfQueryResultsOnListMap(banksQuery);                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("bankAccountVO.bank_name_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Bank name")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='bankName']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANK_NAME").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='bankName']>mat-select"), "ng-reflect-model"), "Bank name field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANK_NAME").trim(), "", "Bank name field value display based on validation control");                            }                            PropUtils.setProps("previous-bankName-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANK_NAME").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("bankAccountVO.bank_name_is_editable").equalsIgnoreCase("true")) {                                if (banksQR.size() == 1) {                                    PropUtils.setProps("updated-bankName-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='bankName']>mat-select"), "ng-reflect-is-disabled"), "Bank name field status in edit popup");                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='bankName']>mat-select"));                                    for (int j = 0; j <= banksQR.size() - 1; j++) {                                        commonPage.verifyPresenceOSpanText(logger, banksQR.get(j).get("DESCRIPTION"));                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANK_NAME").trim());                                    PropUtils.setProps("updated-bankName-" + k, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='bankName']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                }                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("bankAccountVO.bank_no_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Bank No.")) {                            String expBankNo = "";                            for (int j = 0; j <= banksQR.size() - 1; j++) {                                if (banksQR.get(j).get("DESCRIPTION").equalsIgnoreCase(commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='bankName']>mat-select"), "ng-reflect-model"))) {                                    expBankNo = banksQR.get(j).get("BANK_NO");                                    break;                                }                            }                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='bankNumber']>input"))) {                                commonPage.assertTwoStrings(logger, expBankNo, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='bankNumber']>input"), "ng-reflect-model"), "Bank No. field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, expBankNo, "", "Bank No. field value display based on validation control");                            }                            PropUtils.setProps("previous-bankNo-" + k, expBankNo, baseUtils.testDataFilePath);                            if (!eligibilityOfEdit.get("bankAccountVO.bank_no_is_editable").equalsIgnoreCase("true")) {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='bankNumber']>input"), "ng-reflect-is-disabled"), "Bank No field status in edit pop up");                                PropUtils.setProps("updated-bankNo-" + k, "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("bankAccountVO.branch_no_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Branch No.")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='branchNumber']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCH_NO").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='branchNumber']>mat-select"), "ng-reflect-model"), "Branch No. field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCH_NO").trim(), "", "Branch No. field value display based on validation control");                            }                            PropUtils.setProps("previous-branchNo-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCH_NO").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("bankAccountVO.branch_no_is_editable").equalsIgnoreCase("true")) {                                String branchNo = "select bb.branch_no from banks b\n" +                                        "left join bank_branches bb on bb.bank_oid = b.bank_oid\n" +                                        "where b.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") +                                        " and b.bank_no = " + commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='bankNumber']>input"), "ng-reflect-model");                                List<Map<String, String>> branchNoQR = commonUtils.getAllRowsOfQueryResultsOnListMap(branchNo);                                if (branchNoQR.size() == 1) {                                    PropUtils.setProps("updated-branchNo-" + k, "", baseUtils.testDataFilePath);                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='branchNumber']>mat-select"), "ng-reflect-is-disabled"), "Branch No field status in edit pop up");                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='branchNumber']>mat-select"));                                    for (int j = 0; j <= branchNoQR.size() - 1; j++) {                                        commonPage.verifyPresenceOSpanText(logger, branchNoQR.get(j).get("BRANCH_NO"));                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCH_NO").trim());                                    PropUtils.setProps("updated-branchNo-" + k, commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='branchNumber']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                }                            } else {                                PropUtils.setProps("updated-branchNo-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='branchNumber']>mat-select"), "ng-reflect-is-disabled"), "Branch No field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("swift_code_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Swift code")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='swiftCode']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "SWIFT_CODE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='swiftCode']>input"), "ng-reflect-model"), "Swift code field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "SWIFT_CODE").trim(), "", "Swift code field value display based on validation control");                            }                            PropUtils.setProps("previous-swiftCode-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "SWIFT_CODE").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("swift_code_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='swiftCode']>input"), PasswordGenerator.generateNumeric(5));                                PropUtils.setProps("updated-swiftCode-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='swiftCode']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='swiftCode']>input"), "ng-reflect-is-disabled"), "Swift Code field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("bankAccountVO.account_no_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Bank Account No.")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='accountNo']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANKACCOUNTNUMBER").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='accountNo']>input"), "ng-reflect-model"), "Bank Account No. field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANKACCOUNTNUMBER").trim(), "", "Bank Account No. field value display based on validation control");                            }                            PropUtils.setProps("previous-bankAccountNo-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BANKACCOUNTNUMBER").trim(), baseUtils.testDataFilePath);                            if (!eligibilityOfEdit.get("bankAccountVO.account_no_is_editable").equalsIgnoreCase("true")) {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='accountNo']>input"), "ng-reflect-is-disabled"), "Bank account no status in edit pop up");                                PropUtils.setProps("updated-bankAccountNo-" + k, "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("account_name_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Account name")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='accountName']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "ACCOUNT_NAME").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='accountName']>input"), "ng-reflect-model").trim(), "Account name field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "ACCOUNT_NAME").trim(), "", "Account name field value display based on validation control");                            }                            PropUtils.setProps("previous-accountName-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "ACCOUNT_NAME").trim(), baseUtils.testDataFilePath);                            if (!eligibilityOfEdit.get("account_name_is_editable").equalsIgnoreCase("true")) {                                PropUtils.setProps("updated-accountName-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='accountName']>input"), "ng-reflect-is-disabled"), "accountName field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("iban_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("IBAN")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='iban']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IBAN").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='iban']>input"), "ng-reflect-model"), "IBAN field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IBAN").trim(), "", "IBAN field value display based on validation control");                            }                            PropUtils.setProps("previous-iban-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IBAN").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("iban_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='iban']>input"), PasswordGenerator.generateAlphaNumeric(logger, 8));                                PropUtils.setProps("updated-iban-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='iban']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-iban-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='iban']>input"), "ng-reflect-is-disabled"), "IBAN field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("bankAccountVO.umr_no_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("UMR No.")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='umrNo']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "UMR_NO").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='umrNo']>input"), "ng-reflect-model"), "UMR No. field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "UMR_NO").trim(), "", "UMR No. field value display based on validation control");                            }                            PropUtils.setProps("previous-umrNo-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "UMR_NO").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("bankAccountVO.umr_no_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='umrNo']>input"), PasswordGenerator.generateAlphaNumeric(logger, 8));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-umrNo-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='umrNo']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-umrNo-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='umrNo']>input"), "ng-reflect-is-disabled"), "UMR No field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("bankAccountVO.sign_town_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Signing town")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='signTown']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "SIGN_TOWN").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='signTown']>input"), "ng-reflect-model"), "Signing town field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "SIGN_TOWN").trim(), "", "Signing town field value display based on validation control");                            }                            PropUtils.setProps("previous-signTown-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='signTown']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("bankAccountVO.sign_town_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='signTown']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                PropUtils.setProps("updated-signTown-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='signTown']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-signTown-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='signTown']>input"), "ng-reflect-is-disabled"), "Sign town field status in Edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("bankAccountVO.account_no_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Payment from")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='paymentFrom']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "PAYMENTFROM").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='paymentFrom']>input"), "ng-reflect-model"), "Payment from field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "PAYMENTFROM").trim(), "", "Payment from field value display based on validation control");                            }                            PropUtils.setProps("previous-paymentFrom-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "PAYMENTFROM").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("bankAccountVO.account_no_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='paymentFrom']>input"), PasswordGenerator.generateNumeric(10));                                PropUtils.setProps("updated-paymentFrom-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='paymentFrom']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='paymentFrom']>input"), "ng-reflect-is-disabled"), "Payment from field status in edit pop up");                                PropUtils.setProps("updated-paymentFrom-" + k, "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("branch_segmentation_code_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Branch segmentation form")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='branchSegmentationCode']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCHSEGMENTATIONFROM").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='branchSegmentationCode']>input"), "ng-reflect-model"), "Branch segmentation form field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BRANCHSEGMENTATIONFROM").trim(), "", "Branch segmentation form field value display based on validation control");                            }                            PropUtils.setProps("previous-segmentationCode-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='branchSegmentationCode']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("branch_segmentation_code_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='branchSegmentationCode']>input"), PasswordGenerator.generateAlphabets(logger, 2));                                PropUtils.setProps("updated-segmentationCode-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='branchSegmentationCode']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-segmentationCode-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='branchSegmentationCode']>input"), "ng-reflect-is-disabled"), "Branch segmenation from field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("bankAccountVO.bic_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Bank identifier code")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='bic']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BIC").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='bic']>input"), "ng-reflect-model"), "Bank identifier code field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BIC").trim(), "", "Bank identifier code field value display based on validation control");                            }                            PropUtils.setProps("previous-bic-" + k, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "BIC").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("bankAccountVO.bic_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='bic']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                PropUtils.setProps("updated-bic-" + k, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='bic']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='bic']>input"), "ng-reflect-is-disabled"), "BIC field status in edit pop up");                                PropUtils.setProps("updated-bic-" + k, "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("is_authorised_for_collection_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Authorised bank collection")) {                            String authBankCollection = "";                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='authorisedForCollection']>mat-select"))) {                                if (commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IS_AUTHORISED_FOR_COLLECTION").equalsIgnoreCase("Y")) {                                    authBankCollection = "Yes";                                } else if (commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IS_AUTHORISED_FOR_COLLECTION").equalsIgnoreCase("N")) {                                    authBankCollection = "No";                                }                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IS_AUTHORISED_FOR_COLLECTION"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='authorisedForCollection']>mat-select"), "ng-reflect-model"), "Authorised bank collection field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "IS_AUTHORISED_FOR_COLLECTION").trim(), "", "Authorised bank collection field value display based on validation control");                            }                            PropUtils.setProps("previous-isAuthorisedForCollection-" + k, authBankCollection, baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("is_authorised_for_collection_is_editable").equalsIgnoreCase("true")) {                                basePage.userClickJSExecutor(logger, By.cssSelector("mav-select[ng-reflect-name='authorisedForCollection']>mat-select"));                                String updatedValue = "";                                if (authBankCollection.equalsIgnoreCase("Yes")) {                                    commonPage.clickButtonUsingSpan(logger, "No");                                    updatedValue = "No";                                } else {                                    commonPage.clickButtonUsingSpan(logger, "Yes");                                    updatedValue = "Yes";                                }                                PropUtils.setProps("updated-isAuthorisedForCollection-" + k, updatedValue, baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='authorisedForCollection']>mat-select"), "ng-reflect-model"), "Is Authorised For Collection field status in edit pop up");                                PropUtils.setProps("updated-isAuthorisedForCollection-" + k, "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("valid_from_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Valid from")) {                            String datearr[] = {};                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='validFrom']>input"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_FROM").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_FROM").trim().split(" ")[0].split("-");                                    String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='validFrom']>input"), "ng-reflect-model").split(" ");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + String.valueOf(commonPage.getIndexOfMonth(actValueArr[1].toUpperCase())).replaceAll("^0+(?!$)", "") + "/" + actValueArr[3], "Valid From field value display based on validation control");                                    PropUtils.setProps("previous-validFrom-" + k, datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("previous-validFrom-" + k, "", baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_FROM").trim(), "", "Valid From field value display based on validation control");                            }                            if (eligibilityOfEdit.get("valid_from_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "validFrom", "5", "future");                                String[] updatedValue = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='validFrom']>input"), "ng-reflect-model").split(" ");                                PropUtils.setProps("updated-validFrom-" + k, updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-validFrom-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='validFrom']>input"), "ng-reflect-is-disabled"), "Valid From field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("valid_to_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Valid to")) {                            WebElement element = driver.findElement(By.cssSelector("mav-input[ng-reflect-name='validTo']>input"));                            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);                            commonPage.sleepForFewSeconds(2);                            String[] datearr = {};                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='validTo']>input"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_TO").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_TO").trim().split(" ")[0].split("-");                                    String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='validTo']>input"), "ng-reflect-model").split(" ");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + String.valueOf(commonPage.getIndexOfMonth(actValueArr[1].toUpperCase())).replaceAll("^0+(?!$)", "") + "/" + actValueArr[3], "Valid To field value display based on validation control");                                    PropUtils.setProps("previous-validTo-" + k, datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("previous-validTo-" + k, "", baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults.get(k), "VALID_TO").trim(), "", "Valid From field value display based on validation control");                            }                            if (eligibilityOfEdit.get("valid_to_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "validTo", "5", "future");                                String[] updatedValue = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='validTo']>input"), "ng-reflect-model").split(" ");                                PropUtils.setProps("updated-validTo-" + k, updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-validTo-" + k, "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='validTo']>input"), "ng-reflect-is-disabled"), "Valid From field status in edit pop up");                            }                            i = i + 1;                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.verifyPresenceOfDivText(logger, "Bank details section has been updated");            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            String[] dateToArr = {};            properties = PropUtils.getProps(baseUtils.testDataFile);            queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);            String isAuthorisedForCollection = "";            for (int i = 0; i <= queryResults.size() - 1; i++) {                if (commonPage.getSpecificValueFromMapObject(queryResults.get(i), "IS_AUTHORISED_FOR_COLLECTION").equalsIgnoreCase("Y")) {                    isAuthorisedForCollection = "Yes";                } else if (commonPage.getSpecificValueFromMapObject(queryResults.get(i), "IS_AUTHORISED_FOR_COLLECTION").equalsIgnoreCase("N")) {                    isAuthorisedForCollection = "No";                }                if (!PropUtils.getPropValue(properties, "updated-bankName-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-bankName-" + i), queryResults.get(i).get("BANK_NAME"), "Bank Name field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-bankName-" + i), queryResults.get(i).get("BANK_NAME"), "Previous Bank Name field value");                }                if (!PropUtils.getPropValue(properties, "updated-bankNo-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-bankNo-" + i), queryResults.get(i).get("BANK_NO"), "Bank No field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-bankNo-" + i), queryResults.get(i).get("BANK_NO"), "Previous Bank No field value");                }                if (!PropUtils.getPropValue(properties, "updated-branchNo-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-branchNo-" + i), queryResults.get(i).get("BRANCH_NO"), "Branch No field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-branchNo-" + i), queryResults.get(i).get("BRANCH_NO"), "Previous Branch No field value");                }                if (!PropUtils.getPropValue(properties, "updated-swiftCode-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-swiftCode-" + i), queryResults.get(i).get("SWIFT_CODE"), "Swift Code field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-swiftCode-" + i), queryResults.get(i).get("SWIFT_CODE"), "Previous Swift Code field value");                }                if (!PropUtils.getPropValue(properties, "updated-bankAccountNo-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-bankAccountNo-" + i), queryResults.get(i).get("BANKACCOUNTNUMBER"), "Bank Account Number field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-bankAccountNo-" + i), queryResults.get(i).get("BANKACCOUNTNUMBER"), "Previous Bank Account Number field value");                }                if (!PropUtils.getPropValue(properties, "updated-accountName-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-accountName-" + i), queryResults.get(i).get("ACCOUNT_NAME"), "Account Name field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-accountName-" + i), queryResults.get(i).get("ACCOUNT_NAME"), "Previous Account Name field value");                }                if (!PropUtils.getPropValue(properties, "updated-iban-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-iban-" + i), queryResults.get(i).get("IBAN"), "IBAN field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-iban-" + i), queryResults.get(i).get("IBAN"), "Previous IBAN field value");                }                if (!PropUtils.getPropValue(properties, "updated-umrNo-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-umrNo-" + i), queryResults.get(i).get("UMR_NO"), "UMR No field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-umrNo-" + i), queryResults.get(i).get("UMR_NO"), "Previous UMR No field value");                }                if (!PropUtils.getPropValue(properties, "updated-signTown-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-signTown-" + i), queryResults.get(i).get("SIGN_TOWN"), "Sign town field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-signTown-" + i), queryResults.get(i).get("SIGN_TOWN"), "Previous Sign town field value");                }                if (!PropUtils.getPropValue(properties, "updated-paymentFrom-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-paymentFrom-" + i), queryResults.get(i).get("PAYMENTFROM"), "Payment From field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-paymentFrom-" + i), queryResults.get(i).get("PAYMENTFROM"), "Previous Payment From field value");                }                if (!PropUtils.getPropValue(properties, "updated-segmentationCode-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-segmentationCode-" + i), queryResults.get(i).get("BRANCHSEGMENTATIONFROM"), "Branch segmentation from field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-segmentationCode-" + i), queryResults.get(i).get("BRANCHSEGMENTATIONFROM"), "Previous Branch segmentation from field value");                }                if (!PropUtils.getPropValue(properties, "updated-bic-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-bic-" + i), queryResults.get(i).get("BIC"), "BIC field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-bic-" + i), queryResults.get(i).get("BIC"), "Previous BIC field value");                }                if (!PropUtils.getPropValue(properties, "updated-isAuthorisedForCollection-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-isAuthorisedForCollection-" + i), isAuthorisedForCollection, "Is Authorised For Collection field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-isAuthorisedForCollection-" + i), isAuthorisedForCollection, "Previous Is Authorised For Collection field value");                }                dateToArr = commonPage.getSpecificValueFromMapObject(queryResults.get(i), "VALID_FROM").trim().split(" ")[0].split("-");                if (!PropUtils.getPropValue(properties, "updated-validFrom-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-validFrom-" + i), dateToArr[2] + "/" + dateToArr[1].replaceAll("^0+(?!$)", "") + "/" + dateToArr[0], "Guarantee valid from field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-validFrom-" + i), dateToArr[2] + "/" + dateToArr[1].replaceAll("^0+(?!$)", "") + "/" + dateToArr[0], "Previous Guarantee valid from field value");                }                dateToArr = commonPage.getSpecificValueFromMapObject(queryResults.get(i), "VALID_TO").trim().split(" ")[0].split("-");                if (!PropUtils.getPropValue(properties, "updated-validTo-" + i).equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-validTo-" + i), dateToArr[2] + "/" + dateToArr[1].replaceAll("^0+(?!$)", "") + "/" + dateToArr[0], "Guarantee valid from field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-validTo-" + i), dateToArr[2] + "/" + dateToArr[1].replaceAll("^0+(?!$)", "") + "/" + dateToArr[0], "Previous Guarantee valid from field value");                }            }        }    }    /*    Method to validate Billing details section in financial information module     */    public void validateBillingDetailsSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select bp.description as billingplan, f.description as billingFrequency, f2.description as cycleFrequency from accounts a\n" +                "left join billing_plans bp on bp.BILLING_PLAN_OID = a.BILLING_PLAN_OID\n" +                "left join frequencies f on f.frequency_oid = a.BILLING_FREQUENCY_OID\n" +                "left join frequencies f2 on f2.frequency_oid = a.CYCLE_FREQUENCY_OID\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        int values = 1;        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("billing_plan_oid_is_viewable")) {                    if (eligibilityOfView.get("billing_plan_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Billing plan")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGPLAN").trim(), fieldValues.get(values - 1).getText().trim(), "Billing plan field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("billing_frequency_oid_is_viewable")) {                    if (eligibilityOfView.get("billing_frequency_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Billing frequency")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGFREQUENCY").trim(), fieldValues.get(values - 1).getText().trim(), "Billing frequency field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("cycle_frequency_oid_is_viewable")) {                    if (eligibilityOfView.get("cycle_frequency_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Account cycle")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CYCLEFREQUENCY").trim(), fieldValues.get(values - 1).getText().trim(), "Account cycle field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("billing_plan_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Billing plan")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='billingPlan']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGPLAN").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingPlan']>mat-select"), "ng-reflect-model"), "Billing plan field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGPLAN").trim(), "", "Billing plan field value display based on validation control");                            }                            PropUtils.setProps("previousBillingPlan", commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGPLAN"), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("billing_plan_oid_is_editable").equalsIgnoreCase("true")) {                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='billingPlan']>mat-select"));                                String billingPlanQuery = "select bp.description from billing_plans bp\n" +                                        "left join m_clients mc on mc.client_mid = bp.client_mid\n" +                                        "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                List<Map<String, String>> bpQR = commonUtils.getAllRowsOfQueryResultsOnListMap(billingPlanQuery);                                for (int j = 0; j <= bpQR.size() - 1; j++) {                                    commonPage.verifyPresenceOSpanText(logger, bpQR.get(j).get("DESCRIPTION"));                                }                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("mav-select[ng-reflect-name='billingPlan']>mat-select"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingPlan']>mat-select"), "ng-reflect-model"));                                PropUtils.setProps("updatedBillingPlan", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingPlan']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updatedBillingPlan", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingPlan']>mat-select"), "ng-reflect-disabled"), "Billing plan field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("billing_frequency_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Billing frequency")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='billingFrequency']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGFREQUENCY").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingFrequency']>mat-select"), "ng-reflect-model"), "Billing frequency field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGFREQUENCY").trim(), "", "Billing frequency field value display based on validation control");                            }                            PropUtils.setProps("previousBillingFrequency", commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGFREQUENCY"), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("billing_frequency_oid_is_editable").equalsIgnoreCase("true")) {                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='billingFrequency']>mat-select"));                                String billingPlanQuery = "select f.description from frequencies f\n" +                                        "left join m_clients mc on mc.client_mid = f.client_mid\n" +                                        "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and f.frequency_type_cid = 1803";                                List<Map<String, String>> bpQR = commonUtils.getAllRowsOfQueryResultsOnListMap(billingPlanQuery);                                for (int j = 0; j <= bpQR.size() - 1; j++) {                                    commonPage.verifyPresenceOSpanText(logger, bpQR.get(j).get("DESCRIPTION"));                                }                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("mav-select[ng-reflect-name='billingFrequency']>mat-select"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingFrequency']>mat-select"), "ng-reflect-model"));                                PropUtils.setProps("updatedBillingFrequency", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingFrequency']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updatedBillingFrequency", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='billingFrequency']>mat-select"), "ng-reflect-disabled"), "Billing plan field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("cycle_frequency_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Account cycle")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='cycleFrequency']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CYCLEFREQUENCY").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cycleFrequency']>mat-select"), "ng-reflect-model"), "Account cycle field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CYCLEFREQUENCY").trim(), "", "Account cycle field value display based on validation control");                                i = i + 1;                            }                            PropUtils.setProps("previousCycleFrequency", commonPage.getSpecificValueFromMapObject(queryResults, "CYCLEFREQUENCY"), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("cycle_frequency_oid_is_editable").equalsIgnoreCase("true")) {                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='cycleFrequency']>mat-select"));                                String billingPlanQuery = "select f.description from frequencies f\n" +                                        "left join m_clients mc on mc.client_mid = f.client_mid\n" +                                        "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and f.frequency_type_cid = 1803";                                List<Map<String, String>> bpQR = commonUtils.getAllRowsOfQueryResultsOnListMap(billingPlanQuery);                                for (int j = 0; j <= bpQR.size() - 1; j++) {                                    commonPage.verifyPresenceOSpanText(logger, bpQR.get(j).get("DESCRIPTION"));                                }                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("mav-select[ng-reflect-name='cycleFrequency']>mat-select"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cycleFrequency']>mat-select"), "ng-reflect-model"));                                PropUtils.setProps("updatedCycleFrequency", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cycleFrequency']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updatedCycleFrequency", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cycleFrequency']>mat-select"), "ng-reflect-disabled"), "Billing plan field status");                            }                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.verifyPresenceOfDivText(logger, "Billing details section has been updated");                commonPage.verifyPresenceOSpanText(logger, "Needs approval");                basePage.whetherElementPresent(logger, By.cssSelector("mav-svg-icon[ng-reflect-value='fas exclamation-triangle']"));                queryResults = commonUtils.getQueryResultsOnMap(query);                properties = PropUtils.getProps(baseUtils.testDataFile);                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previousBillingPlan"), commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGPLAN"), "Billing plan value in main table");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previousBillingFrequency"), commonPage.getSpecificValueFromMapObject(queryResults, "BILLINGFREQUENCY"), "Billing plan value in main table");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previousCycleFrequency"), commonPage.getSpecificValueFromMapObject(queryResults, "CYCLEFREQUENCY"), "Billing plan value in main table");                List<Map<String, String>> stagingQR = getBillingDetailsFromStagingTable();                String billinPlanOid = "";                String frequencyOid = "";                String accountCycleOid = "";                for (int k = 0; k <= stagingQR.size() - 1; k++) {                    if (stagingQR.get(k).get("FIELDNAME").equalsIgnoreCase("Billing Plan")) {                        billinPlanOid = stagingQR.get(k).get("VALUE");                    }                    if (stagingQR.get(k).get("FIELDNAME").equalsIgnoreCase("Billing Frequency")) {                        frequencyOid = stagingQR.get(k).get("VALUE");                    }                    if (stagingQR.get(k).get("FIELDNAME").equalsIgnoreCase("Billing Frequency")) {                        accountCycleOid = stagingQR.get(k).get("VALUE");                    }                }                String billingSectionQuery = "select bp.description as billingPlan, f.description as billingFrequency, f1.description as accountCycle  from billing_plans bp\n" +                        "left join frequencies f on f.frequency_oid = " + frequencyOid + " and f.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                        "left join frequencies f1 on f1.frequency_oid = " + accountCycleOid + " and f1.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + "\n" +                        "where bp.billing_plan_oid = " + billinPlanOid + " and bp.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                Map<String, String> billingSectionQR = commonUtils.getQueryResultsOnMap(billingSectionQuery);                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updatedBillingPlan"), billingSectionQR.get("BILLINGPLAN"), "Billing plan value in staging table");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updatedBillingFrequency"), billingSectionQR.get("BILLINGFREQUENCY"), "Billing frequency value in staging table");                commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updatedCycleFrequency"), billingSectionQR.get("ACCOUNTCYCLE"), "Cycle frequency value in staging table");            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate cred balance alert section in financial information module     */    public void validateCredBalanceAlertsSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select a.CARD_BALANCE_ALERTS_ENABLED as cardBalanceAlerts ,cp.LIMIT_THRESHOLD_AMOUNT as defaultAlertThreshold from m_customers mcust\n" +                "left join accounts a on a.account_no = mcust.customer_no\n" +                "left join credit_plans cp on cp.credit_plan_oid = a.credit_plan_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("card_balance_alerts_enabled_is_viewable")) {                    if (eligibilityOfView.get("card_balance_alerts_enabled_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit balance alerts")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDBALANCEALERTS").trim(), fieldValues.get(i).getText().trim(), "Credit balance alerts field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDBALANCEALERTS").trim(), "", "Credit balance alerts field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("client_credit_limit_threshold_amount_is_viewable")) {                    if (eligibilityOfView.get("client_credit_limit_threshold_amount_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Default alert threshold")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEFAULTALERTTHRESHOLD").trim(), fieldValues.get(i).getText().trim(), "Default alert threshold field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEFAULTALERTTHRESHOLD").trim(), "", "Default alert threshold field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                if (eligibilityOfEdit.containsKey("card_balance_alerts_enabled_is_editable")) {                    String selectedValue = "N";                    if (commonPage.getAttributeValue(By.cssSelector("div[ng-reflect-klass='toggle']>div>mat-slide-toggle"), "class").equalsIgnoreCase("mat-slide-toggle mat-accent mat-checked")) {                        selectedValue = "Y";                    }                    if (basePage.getStatusOfElement(By.cssSelector("div[ng-reflect-klass='toggle']>div>mat-slide-toggle"))) {                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDBALANCEALERTS").trim(), selectedValue, "Credit balance alerts field value display based on validation control");                    } else {                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDBALANCEALERTS").trim(), "", "Credit balance alerts field value display based on validation control");                    }                    if (eligibilityOfEdit.get("card_balance_alerts_enabled_is_editable").equalsIgnoreCase("true")) {                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDBALANCEALERTS").trim(), selectedValue, "Credit Balance Alert value in edit page");                        basePage.userClick(logger, By.cssSelector("div[ng-reflect-klass='toggle']>div>mat-slide-toggle"));                        String newValue = "Y";                        if (selectedValue.equalsIgnoreCase("Y")) {                            newValue = "N";                        }                        PropUtils.setProps("updatedCreditBalanceAlerts", newValue, baseUtils.testDataFilePath);                    } else {                        PropUtils.setProps("updatedCreditBalanceAlerts", "", baseUtils.testDataFilePath);                        commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("div[ng-reflect-klass='toggle']>div>mat-slide-toggle"), "ng-reflect-disabled"), "Credit Balance Alerts field status");                    }                }                if (eligibilityOfEdit.containsKey("client_credit_limit_threshold_amount_is_editable")) {                    if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='defaultAlertThreshold']>input"))) {                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEFAULTALERTTHRESHOLD").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='defaultAlertThreshold']>input"), "ng-reflect-model"), "Default alert threshold field value display based on validation control");                    } else {                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEFAULTALERTTHRESHOLD").trim(), "", "Default alert threshold field value display based on validation control");                    }                    if (eligibilityOfEdit.get("client_credit_limit_threshold_amount_is_editable").equalsIgnoreCase("true")) {                        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='defaultAlertThreshold']>input"), PasswordGenerator.generateNumeric(2));                        PropUtils.setProps("updatedDefaultAlertThreshold", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='defaultAlertThreshold']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                    } else {                        PropUtils.setProps("updatedDefaultAlertThreshold", "", baseUtils.testDataFilePath);                        commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='defaultAlertThreshold']>input"), "ng-reflect-is-disabled"), "Default alert threshold field status in edit pop up");                    }                }            } else {                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate Credit/Alert details section in Account information module     */    public void validateCreditAlertDetailsSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select ap.credit_limit as OriginalCreditLimit,a.credit_limit as CurrentCreditLimit,\n" +                "cp.description as creditPlan,a.cust_service_expires_on as expiresOn, a.temp_credit_amount as creditExtension,\n" +                "a.TEMP_CREDIT_EXPIRES_ON as extensionExpiresOn,a.PERCENT_OVER_LIMIT as percentageoverAllowed,\n" +                "cer.description as extentionReasons,a.credit_limit as calculated_limit,a.IS_OVER_CREDIT_LIMIT,cp.LIMIT_THRESHOLD_PERCENTAGE as creditLimitThresholdperc\n" +                ",a.ALERT_THRESHOLD_PERCENTAGE as alertThresholdPerc,t.description as creditLimitResponsible,aci.REQU_CREDIT_LIMIT_EXPIRES_AT as creditExpirationDate,aci.CREDIT_INFORMATION_NO as cerfoNumber,aci.REQUESTED_CREDIT_LIMIT as requestedCreditLimitMEX,\n" +                "aci.REQU_CREDIT_LIMIT_EXPIRES_AT as requestedCreditLimitExpiryDate,mcust.DEBTOR_NUMBER as debtorNumber from applications ap\n" +                "left join m_customers mcust on mcust.application_oid = ap.application_oid\n" +                "left join accounts a on a.account_no = mcust.customer_no\n" +                "left join credit_extension_reasons cer on cer.description_oid = a.TEMP_CREDIT_REASON_DID\n" +                "left join credit_plans cp on cp.credit_plan_oid = ap.credit_plan_oid\n" +                "left join account_credit_information aci on aci.account_oid = a.account_oid\n" +                "left join territories t on t.territory_oid = a.TERRITORY_OID\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("original_credit_limit_is_viewable")) {                    if (eligibilityOfView.get("original_credit_limit_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Original credit limit")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ORIGINALCREDITLIMIT").trim(), fieldValues.get(i).getText().trim(), "Original credit limit field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ORIGINALCREDITLIMIT").trim(), "", "Original credit limit field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("credit_limit_is_viewable")) {                    if (eligibilityOfView.get("credit_limit_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Current credit limit")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").trim(), fieldValues.get(i).getText().trim(), "Current credit limit field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").trim(), "", "Current credit limit field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("credit_plan_oid_is_viewable")) {                    if (eligibilityOfView.get("credit_plan_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit plan")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITPLAN").trim(), fieldValues.get(i).getText().trim(), "Credit plan field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITPLAN").trim(), "", "Credit plan field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("cust_service_expires_on_is_viewable")) {                    if (eligibilityOfView.get("cust_service_expires_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Expires on")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                String[] datearr = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Expires on field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim(), "", "Expires on field value display based on validation control");                                    i = i + 1;                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim(), "", "Expires on field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("temp_credit_amount_is_viewable")) {                    if (eligibilityOfView.get("temp_credit_amount_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit extension")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXTENSION").trim(), fieldValues.get(i).getText().trim(), "Credit extension field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXTENSION").trim(), "", "Credit extension field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("temp_credit_expires_on_is_viewable")) {                    if (eligibilityOfView.get("temp_credit_expires_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Extension expires on")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                String[] datearr = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Extension expires on field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim(), "", "Extension expires on field value display based on validation control");                                    i = i + 1;                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim(), "", "Extension expires on field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("percent_over_limit_is_viewable")) {                    if (eligibilityOfView.get("percent_over_limit_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("% over allowed")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PERCENTAGEOVERALLOWED").trim(), fieldValues.get(i).getText().trim(), "% over allowed field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PERCENTAGEOVERALLOWED").trim(), "", "% over allowed field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("temp_credit_reason_did_is_viewable")) {                    if (eligibilityOfView.get("temp_credit_reason_did_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Extension reasons")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENTIONREASONS").trim(), fieldValues.get(i).getText().trim(), "Extension reasons field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENTIONREASONS").trim(), "", "Extension reasons field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("credit_limit_is_viewable")) {                    if (eligibilityOfView.get("credit_limit_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Calculated limit")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CALCULATED_LIMIT").trim(), fieldValues.get(i).getText().trim(), "Calculated limit field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CALCULATED_LIMIT").trim(), "", "Calculated limit field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("is_over_credit_limit_is_viewable")) {                    if (eligibilityOfView.get("is_over_credit_limit_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Over credit limit")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "IS_OVER_CREDIT_LIMIT").trim(), fieldValues.get(i).getText().trim(), "Over credit limit field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "IS_OVER_CREDIT_LIMIT").trim(), "", "Over credit limit field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("client_credit_limit_threshold_percentage_is_viewable")) {                    if (eligibilityOfView.get("client_credit_limit_threshold_percentage_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit limit threshold %")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                String perc = commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").trim();                                if (perc.equalsIgnoreCase("")) {                                    perc = "0";                                }                                commonPage.assertTwoStrings(logger, perc, fieldValues.get(i).getText().trim(), "Credit limit threshold % field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").trim(), "", "Credit limit threshold % field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("calculated_balance_threshold_is_viewable")) {                    if (eligibilityOfView.get("calculated_balance_threshold_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Balance threshold")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                int calculatedBalThreshold = 0;                                if (commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").equalsIgnoreCase("0") || commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").equalsIgnoreCase("")) {                                    commonPage.assertTwoStrings(logger, queryResults.get("CURRENTCREDITLIMIT"), fieldValues.get(i).getText().trim(), "Balance threshold field value display based on validation control");                                } else {                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("") && !commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("0")) {                                        calculatedBalThreshold = Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) - ((Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) * Integer.parseInt(queryResults.get("CREDITLIMITTHRESHOLDPERC")) / 100));                                        commonPage.assertTwoStrings(logger, String.valueOf(calculatedBalThreshold), fieldValues.get(i).getText().trim(), "Balance threshold field value display based on validation control");                                    } else {                                        commonPage.assertTwoStrings(logger, "0", fieldValues.get(i).getText().trim(), "Balance threshold field value display based on validation control");                                    }                                }                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfView.containsKey("alert_threshold_percentage_did_is_viewable")) {                    if (eligibilityOfView.get("alert_threshold_percentage_did_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer alert limit %")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC").equalsIgnoreCase("0") && !commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC").equalsIgnoreCase("")) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC") + "%", fieldValues.get(i).getText().trim(), "Customer alert limit % field value display based on validation control");                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC"), "", "Customer alert limit % field value display based on validation control");                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfView.containsKey("calculated_customer_alert_threshold_is_viewable")) {                    if (eligibilityOfView.get("calculated_customer_alert_threshold_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer alert threshold")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                int calculatedAlertThreshold = 0;                                if (commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").equalsIgnoreCase("0") || commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").equalsIgnoreCase("")) {                                    commonPage.assertTwoStrings(logger, queryResults.get("CURRENTCREDITLIMIT"), fieldValues.get(i).getText().trim(), "Customer alert threshold field value display based on validation control");                                } else {                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("") && !commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("0")) {                                        if (commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC").equalsIgnoreCase("")) {                                            calculatedAlertThreshold = Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT"));                                        } else {                                            calculatedAlertThreshold = Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) - (Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) * Integer.parseInt(queryResults.get("ALERTTHRESHOLDPERC"))) / 100;                                            commonPage.assertTwoStrings(logger, String.valueOf(calculatedAlertThreshold), fieldValues.get(i).getText().trim(), "Customer alert threshold\n field value display based on validation control");                                        }                                    } else {                                        commonPage.assertTwoStrings(logger, "0", fieldValues.get(i).getText().trim(), "Customer alert threshold\n field value display based on validation control");                                    }                                }                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfView.containsKey("calculated_pending_balance_is_viewable")) {                    if (eligibilityOfView.get("calculated_pending_balance_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Uncleared payments")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                if (commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").equalsIgnoreCase("0") || commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").equalsIgnoreCase("")) {                                    commonPage.assertTwoStrings(logger, "0", fieldValues.get(i).getText().trim(), "Uncleared payments field value display based on validation control");                                } else {                                    String clientQuery = "select processing_date from m_clients where client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                    Map<String, String> clientQueryRes = commonUtils.getQueryResultsOnMap(clientQuery);                                    String accountsQuery = "select a.account_oid from accounts a \n" +                                            "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                                            "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                                            "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                                            " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                    Map<String, String> accountsQueryRes = commonUtils.getQueryResultsOnMap(accountsQuery);                                    String dateArr[] = clientQueryRes.get("PROCESSING_DATE").split(" ")[0].split("-");                                    String unclearedPaymentsQuery = "select fal$get_auth_acct_avail_bal(" + accountsQueryRes.get("ACCOUNT_OID") + ",TO_DATE ('" + dateArr[2] + "-" + commonPage.getShortNameOfMonthBasedOnIndex(Integer.parseInt(dateArr[1])) + "-" + dateArr[0] + "')) as unclearedPayment from dual";                                    Map<String, String> upQuery = commonUtils.getQueryResultsOnMap(unclearedPaymentsQuery);                                    if (commonPage.getSpecificValueFromMapObject(upQuery, "UNCLEAREDPAYMENT").equalsIgnoreCase("")) {                                        commonPage.assertTwoStrings(logger, "0", fieldValues.get(i).getText().trim(), "Uncleared payments field value display based on validation control");                                    } else {                                        commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(upQuery, "UNCLEAREDPAYMENT"), fieldValues.get(i).getText().trim(), "Uncleared payments field value display based on validation control");                                    }                                }                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("territory_oid_is_viewable")) {                    if (eligibilityOfView.get("territory_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit limit responsible")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITRESPONSIBLE").trim(), fieldValues.get(i).getText().trim(), "Credit limit responsible field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITRESPONSIBLE").trim(), "", "Credit limit responsible field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("requ_credit_limit_expires_at_is_viewable")) {                    if (eligibilityOfView.get("requ_credit_limit_expires_at_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit expiration date")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                String[] datearr = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Credit expiration date field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim(), "", "Credit expiration date field value display based on validation control");                                    i = i + 1;                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim(), "", "Credit expiration date field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("credit_information_no_is_viewable")) {                    if (eligibilityOfView.get("credit_information_no_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Crefo number")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CERFONUMBER").trim(), fieldValues.get(i).getText().trim(), "Crefo number field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CERFONUMBER").trim(), "", "Crefo number field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("requested_credit_limit_is_viewable")) {                    if (eligibilityOfView.get("requested_credit_limit_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Requsted credit limit (MEX)")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITMEX").trim(), fieldValues.get(i).getText().trim(), "Requsted credit limit (MEX) field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITMEX").trim(), "", "Requsted credit limit (MEX) field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("requ_credit_limit_expires_at_is_viewable")) {                    if (eligibilityOfView.get("requ_credit_limit_expires_at_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Requsted credit limit expiry date")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                String[] datearr = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITEXPIRYDATE").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITEXPIRYDATE").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Requsted credit limit expiry date field value display based on validation control");                                    i = i + 1;                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITEXPIRYDATE").trim(), "", "Requsted credit limit expiry date field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("debtor_number_is_viewable")) {                    if (eligibilityOfView.get("debtor_number_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Debtor number")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEBTORNUMBER").trim(), fieldValues.get(i).getText().trim(), "Debtor number field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEBTORNUMBER").trim(), "", "Debtor number field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("original_credit_limit_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Original credit limit")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='originalCreditLimit']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ORIGINALCREDITLIMIT").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='originalCreditLimit']>input"), "ng-reflect-model"), "Original credit limit field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ORIGINALCREDITLIMIT").trim(), "", "Original credit limit field value display based on validation control");                            }                            PropUtils.setProps("previous-OriginalLimit", commonPage.getSpecificValueFromMapObject(queryResults, "ORIGINALCREDITLIMIT").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("original_credit_limit_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='originalCreditLimit']>input"), PasswordGenerator.generateNumeric(4));                                PropUtils.setProps("updated-OriginalLimit", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='originalCreditLimit']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-OriginalLimit", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='originalCreditLimit']>input"), "ng-reflect-is-disabled"), "Original credit limit field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("credit_limit_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Current credit limit")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='creditLimit']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimit']>input"), "ng-reflect-model"), "Current credit limit field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").trim(), "", "Current credit limit field value display based on validation control");                            }                            PropUtils.setProps("previous-CurrentCreditLimit", commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("credit_limit_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='creditLimit']>input"), PasswordGenerator.generateNumeric(4));                                PropUtils.setProps("updated-CurrentCreditLimit", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimit']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CurrentCreditLimit", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimit']>input"), "ng-reflect-is-disabled"), "Current credit limit field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("credit_plan_oid_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit plan")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='creditPlan']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITPLAN").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='creditPlan']>mat-select"), "ng-reflect-model"), "Credit plan field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITPLAN").trim(), "", "Credit plan field value display based on validation control");                            }                            PropUtils.setProps("previous-CreditPlan", commonPage.getSpecificValueFromMapObject(queryResults, "CREDITPLAN").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("credit_plan_oid_is_editable").equalsIgnoreCase("true")) {                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='creditPlan']>mat-select"));                                basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                                PropUtils.setProps("updated-CreditPlan", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='creditPlan']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CreditPlan", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='creditPlan']>mat-select"), "ng-reflect-is-disabled"), "Credit plan field status");                            }                        }                        i = i + 1;                    }                    if (eligibilityOfEdit.containsKey("cust_service_expires_on_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Expires on")) {                            String[] datearr = {};                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='custServiceExpiresOn']>input"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='custServiceExpiresOn']>input"), "ng-reflect-model"), "Expires on field value display based on validation control");                                    PropUtils.setProps("previous-ExpiresOn", datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim(), "", "Expires on field value display based on validation control");                                    PropUtils.setProps("previous-ExpiresOn", "", baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESON").trim(), "", "Expires on field value display based on validation control");                                PropUtils.setProps("previous-ExpiresOn", "", baseUtils.testDataFilePath);                            }                            if (eligibilityOfEdit.get("cust_service_expires_on_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "custServiceExpiresOn", "5", "future");                                String updatedValue[] = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='custServiceExpiresOn']>input"), "ng-reflect-model").split(" ");                                PropUtils.setProps("updated-ExpiresOn", updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-ExpiresOn", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='custServiceExpiresOn']>input"), "ng-reflect-is-disabled"), "Expires on field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("temp_credit_amount_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit extension")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='tempCreditAmount']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXTENSION").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='tempCreditAmount']>input"), "ng-reflect-model"), "Credit extension field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXTENSION").trim(), "", "Credit extension field value display based on validation control");                            }                            PropUtils.setProps("previous-CreditExtension", commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXTENSION").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("temp_credit_amount_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='tempCreditAmount']>input"), PasswordGenerator.generateNumeric(4));                                PropUtils.setProps("updated-CreditExtension", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='tempCreditAmount']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CreditExtension", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='tempCreditAmount']>input"), "ng-reflect-is-disabled"), "Credit extension field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("temp_credit_expires_on_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Extension expires on")) {                            String[] datearr = {};                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='extensionExpiresOn']>input"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extensionExpiresOn']>input"), "ng-reflect-model"), "Extension expires on field value display based on validation control");                                    PropUtils.setProps("previous-ExtensionExpiresOn", datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim(), "", "Extension expires on field value display based on validation control");                                    PropUtils.setProps("previous-ExtensionExpiresOn", "", baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENSIONEXPIRESON").trim(), "", "Extension expires on field value display based on validation control");                                PropUtils.setProps("previous-ExtensionExpiresOn", "", baseUtils.testDataFilePath);                            }                            if (eligibilityOfEdit.get("temp_credit_expires_on_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "custServiceExpiresOn", "5", "future");                                PropUtils.setProps("updated-ExtensionExpiresOn", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extensionExpiresOn']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-ExtensionExpiresOn", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extensionExpiresOn']>input"), "ng-reflect-is-disabled"), "Credit extension field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("percent_over_limit_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("% over allowed")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='percentageOverAllowed']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PERCENTAGEOVERALLOWED").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='percentageOverAllowed']>input"), "ng-reflect-model"), "% over allowed field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PERCENTAGEOVERALLOWED").trim(), "", "% over allowed field value display based on validation control");                            }                            PropUtils.setProps("previous-PercOverAllowed", commonPage.getSpecificValueFromMapObject(queryResults, "PERCENTAGEOVERALLOWED").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("percent_over_limit_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='percentageOverAllowed']>input"), PasswordGenerator.generateNumeric(1));                                PropUtils.setProps("updated-PercOverAllowed", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='percentageOverAllowed']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-PercOverAllowed", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='percentageOverAllowed']>input"), "ng-reflect-is-disabled"), "% over allowed field field status");                            }                        }                        i = i + 1;                    }                    if (eligibilityOfEdit.containsKey("temp_credit_reason_did_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Extension reasons")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='tempCreditReason']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENTIONREASONS").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='tempCreditReason']>mat-select"), "ng-reflect-model"), "Extension reasons field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTENTIONREASONS").trim(), "", "Extension reasons field value display based on validation control");                            }                            PropUtils.setProps("previous-ExtensionReasons", commonPage.getSpecificValueFromMapObject(queryResults, "EXTENTIONREASONS").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("temp_credit_reason_did_is_editable").equalsIgnoreCase("true")) {                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='tempCreditReason']>mat-select"));                                basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                                PropUtils.setProps("updated-ExtensionReasons", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='tempCreditReason']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-ExtensionReasons", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='tempCreditReason']>mat-select"), "ng-reflect-is-disabled"), "Extension reasons field field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("calculated_balance_threshold_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Calculated limit")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='calculatedLimit']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CALCULATED_LIMIT").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='calculatedLimit']>input"), "ng-reflect-model"), "Calculated limit field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CALCULATED_LIMIT").trim(), "", "Calculated limit field value display based on validation control");                            }                            PropUtils.setProps("previous-calculatedBalanceThreshold", commonPage.getSpecificValueFromMapObject(queryResults, "CALCULATED_LIMIT").trim(), baseUtils.testDataFilePath);                            if (!eligibilityOfEdit.get("calculated_balance_threshold_is_editable").equalsIgnoreCase("true")) {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='calculatedLimit']>input"), "ng-reflect-is-disabled"), "Extension reasons field field status");                                PropUtils.setProps("updated-calculatedBalanceThreshold", "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("client_credit_limit_threshold_percentage_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit limit threshold %")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='creditLimitThresholdPercentage']>input"))) {                                String perc = commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").trim();                                if (perc.equalsIgnoreCase("")) {                                    perc = "0";                                }                                commonPage.assertTwoStrings(logger, perc, commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimitThresholdPercentage']>input"), "ng-reflect-model"), "Credit limit threshold % field value display based on validation control");                                PropUtils.setProps("previous-CreditLimitThresholdPerc", perc, baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITTHRESHOLDPERC").trim(), "", "Credit limit threshold % field value display based on validation control");                                PropUtils.setProps("previous-CreditLimitThresholdPerc", "", baseUtils.testDataFilePath);                            }                            if (eligibilityOfEdit.get("client_credit_limit_threshold_percentage_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='creditLimitThresholdPercentage']>input"), PasswordGenerator.generateNumeric(1));                                PropUtils.setProps("updated-CreditLimitThresholdPerc", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimitThresholdPercentage']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CreditLimitThresholdPerc", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimitThresholdPercentage']>input"), "ng-reflect-is-disabled"), "Extension reasons field field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("calculated_balance_threshold_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Balance threshold")) {                            int calculatedBalThreshold = 0;                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='balanceThreshold']>input"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("") && !commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("0")) {                                    calculatedBalThreshold = Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) - ((Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) * Integer.parseInt(queryResults.get("CREDITLIMITTHRESHOLDPERC")) / 100));                                    commonPage.assertTwoStrings(logger, String.valueOf(calculatedBalThreshold), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='balanceThreshold']>input"), "ng-reflect-model"), "Balance threshold field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, "0", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='balanceThreshold']>input"), "ng-reflect-model"), "Balance threshold field value display based on validation control");                                }                            }                            PropUtils.setProps("previous-balanceThreshold", String.valueOf(calculatedBalThreshold), baseUtils.testDataFilePath);                            PropUtils.setProps("updated-balanceThreshold", "", baseUtils.testDataFilePath);                            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='balanceThreshold']>input"), "ng-reflect-is-disabled"), "Balance threshold field field status");                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("alert_threshold_percentage_did_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer alert limit %")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='alertThresholdPercentage']>mat-select"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC").equalsIgnoreCase("0")) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC") + "%", fieldValues.get(i).getText().trim(), "Customer alert limit % field value display based on validation control");                                    PropUtils.setProps("previous-CreditLimitThresholdPerc", commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC") + "%", baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ALERTTHRESHOLDPERC"), "", "Customer alert limit % field value display based on validation control");                                PropUtils.setProps("previous-CreditLimitThresholdPerc", "", baseUtils.testDataFilePath);                            }                            if (eligibilityOfEdit.get("alert_threshold_percentage_did_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-select[ng-reflect-name='alertThresholdPercentage']>mat-select"), PasswordGenerator.generateNumeric(1));                                PropUtils.setProps("updated-CreditLimitThresholdPerc", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='alertThresholdPercentage']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CreditLimitThresholdPerc", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='alertThresholdPercentage']>mat-select"), "ng-reflect-is-disabled"), "Customer alert limit % field field status");                            }                        }                        i = i + 1;                    }                    if (eligibilityOfEdit.containsKey("calculated_customer_alert_threshold_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer alert threshold")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='customerAlertThreshold']>input"))) {                                int calculatedAlertThreshold = 0;                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("") && !commonPage.getSpecificValueFromMapObject(queryResults, "CURRENTCREDITLIMIT").equalsIgnoreCase("0")) {                                    calculatedAlertThreshold = Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) - (Integer.parseInt(queryResults.get("CURRENTCREDITLIMIT")) * Integer.parseInt(queryResults.get("ALERTTHRESHOLDPERC"))) / 100;                                    commonPage.assertTwoStrings(logger, String.valueOf(calculatedAlertThreshold), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='customerAlertThreshold']>input"), "ng-reflect-model"), "Customer alert threshold\n field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, "0", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='customerAlertThreshold']>input"), "ng-reflect-model"), "Customer alert threshold\n field value display based on validation control");                                    i = i + 1;                                }                            }                            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='customerAlertThreshold']>input"), "ng-reflect-is-disabled"), "Customer alert limit % field field status");                        }                    }                    if (eligibilityOfEdit.containsKey("calculated_pending_balance_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Uncleared payments")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='unclearedPayment']>input"))) {                                String clientQuery = "select processing_date from m_clients where client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                Map<String, String> clientQueryRes = commonUtils.getQueryResultsOnMap(clientQuery);                                String accountsQuery = "select a.account_oid from accounts a \n" +                                        "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                                        "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                                        "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                                        " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                Map<String, String> accountsQueryRes = commonUtils.getQueryResultsOnMap(accountsQuery);                                String dateArr[] = clientQueryRes.get("PROCESSING_DATE").split(" ")[0].split("-");                                String unclearedPaymentsQuery = "select fal$get_auth_acct_avail_bal(" + accountsQueryRes.get("ACCOUNT_OID") + ",TO_DATE ('" + dateArr[2] + "-" + commonPage.getShortNameOfMonthBasedOnIndex(Integer.parseInt(dateArr[1])) + "-" + dateArr[0] + "')) as unclearedPayment from dual";                                Map<String, String> upQuery = commonUtils.getQueryResultsOnMap(unclearedPaymentsQuery);                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(upQuery, "UNCLEAREDPAYMENT"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='unclearedPayment']>input"), "ng-reflect-model"), "Uncleared payments field value display based on validation control");                            }                            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='unclearedPayment']>input"), "ng-reflect-is-disabled"), "Customer alert limit % field field status");                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("territory_oid_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit limit responsible")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='creditLimitResponsible']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITRESPONSIBLE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimitResponsible']>input"), "ng-reflect-model"), "Credit limit responsible field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITLIMITRESPONSIBLE").trim(), "", "Credit limit responsible field value display based on validation control");                                i = i + 1;                            }                            if (eligibilityOfEdit.get("territory_oid_is_editable").equalsIgnoreCase("true")) {                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='creditLimitResponsible']>mat-select"));                                String territoryQuery = "select t.description as territory from territories t\n" +                                        "left join m_clients mc on mc.client_mid = t.client_mid\n" +                                        "where mc.client_mid = 101";                                List<Map<String, String>> territoryQR = commonUtils.getAllRowsOfQueryResultsOnListMap(territoryQuery);                                for (int j = 0; j <= territoryQR.size() - 1; j++) {                                    commonPage.validateTextUsingtag(logger, territoryQR.get(j).get("TERRITORY"), "span");                                }                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "TERRITORY"));                                PropUtils.setProps("updatedCreditLimitResponsible", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimitResponsible']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditLimitResponsible']>input"), "ng-reflect-is-disabled"), "Credit limit responsible field field status");                            }                        }                    }                    if (eligibilityOfEdit.containsKey("requ_credit_limit_expires_at_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Credit expiration date")) {                            if (basePage.getStatusOfElement(By.xpath("(//mav-input[@ng-reflect-name='requCreditLimitExpiresAt']/input)[1]"))) {                                String[] datearr = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requCreditLimitExpiresAt']>input"), "ng-reflect-model"), "Credit expiration date field value display based on validation control");                                    PropUtils.setProps("previous-CreditExpirationDate", datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim(), "", "Credit expiration date field value display based on validation control");                                    PropUtils.setProps("prevoius-CreditExpirationDate", "", baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREDITEXPIRATIONDATE").trim(), "", "Credit expiration date field value display based on validation control");                                PropUtils.setProps("previous-CreditExpirationDate", "", baseUtils.testDataFilePath);                            }                            if (eligibilityOfEdit.get("requ_credit_limit_expires_at_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "custServiceExpiresOn", "5", "future");                                PropUtils.setProps("updated-CreditExpirationDate", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requCreditLimitExpiresAt']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CreditExpirationDate", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requCreditLimitExpiresAt']>input"), "ng-reflect-is-disabled"), "Credit expiration date field field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("credit_information_no_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Crefo number")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='creditInformationNo']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CERFONUMBER").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditInformationNo']>input"), "ng-reflect-model"), "Crefo number field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CERFONUMBER").trim(), "", "Crefo number field value display based on validation control");                            }                            PropUtils.setProps("previous-CrefoNumber", commonPage.getSpecificValueFromMapObject(queryResults, "CERFONUMBER").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("credit_information_no_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-select[ng-reflect-name='creditInformationNo']>mat-select"), PasswordGenerator.generateNumeric(1));                                PropUtils.setProps("updated-CrefoNumber", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditInformationNo']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CrefoNumber", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='creditInformationNo']>input"), "ng-reflect-is-disabled"), "Customer alert limit % field field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("requested_credit_limit_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Requsted credit limit (MEX)")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='requestedCreditLimit']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITMEX").trim(), fieldValues.get(i).getText().trim(), "Requsted credit limit (MEX) field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITMEX").trim(), "", "Requsted credit limit (MEX) field value display based on validation control");                            }                            PropUtils.setProps("previous-RequestedCreditLimit", commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITMEX").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("requested_credit_limit_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-select[ng-reflect-name='creditInformationNo']>mat-select"), PasswordGenerator.generateNumeric(1));                                PropUtils.setProps("updated-RequestedCreditLimit", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requestedCreditLimit']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-RequestedCreditLimit", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requestedCreditLimits']>input"), "ng-reflect-is-disabled"), "Customer alert limit % field field status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("requ_credit_limit_expires_at_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Requsted credit limit expiry date")) {                            if (basePage.getStatusOfElement(By.xpath("(//mav-input[@ng-reflect-name='requCreditLimitExpiresAt']/input)[2]"))) {                                String[] datearr = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITEXPIRYDATE").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITEXPIRYDATE").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requCreditLimitExpiresAt']>input"), "ng-reflect-model"), "Requsted credit limit expiry date field value display based on validation control");                                    PropUtils.setProps("previous-CreditExpirationDate", datearr[2] + "/" + datearr[1] + "/" + datearr[0], baseUtils.testDataFilePath);                                    i = i + 1;                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "REQUESTEDCREDITLIMITEXPIRYDATE").trim(), "", "Requsted credit limit expiry date field value display based on validation control");                                PropUtils.setProps("previous-CreditExpirationDate", "", baseUtils.testDataFilePath);                                i = i + 1;                            }                            if (eligibilityOfEdit.get("requ_credit_limit_expires_at_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "custServiceExpiresOn", "5", "future");                                PropUtils.setProps("updated-CreditExpirationDate", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requCreditLimitExpiresAt']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-CreditExpirationDate", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='requCreditLimitExpiresAt']>input"), "ng-reflect-is-disabled"), "Credit expiration date field field status");                            }                        }                    }                    if (eligibilityOfEdit.containsKey("debtor_number_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Debtor number")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='debtorNumber']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEBTORNUMBER").trim(), fieldValues.get(i).getText().trim(), "Debtor number field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DEBTORNUMBER").trim(), "", "Debtor number field value display based on validation control");                                i = i + 1;                            }                            PropUtils.setProps("previous-debtorNumber", commonPage.getSpecificValueFromMapObject(queryResults, "DEBTORNUMBER").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("debtor_number_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='debtorNumber']>input"), PasswordGenerator.generateNumeric(5));                                PropUtils.setProps("updated-debtorNumber", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='debtorNumber']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-debtorNumber", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='debtorNumber']>input"), "ng-reflect-is-disabled"), "Debtor number field field status");                            }                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.verifyPresenceOfDivText(logger, "Credit/Alert details section has been updated");                queryResults = commonUtils.getQueryResultsOnMap(query);                properties = PropUtils.getProps(baseUtils.testDataFile);                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-CurrentCreditLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-CurrentCreditLimit"), queryResults.get("CURRENTCREDITLIMIT"), "current credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-CurrentCreditLimit"), queryResults.get("CURRENTCREDITLIMIT"), "Previous current credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-CreditPlan").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-CreditPlan"), queryResults.get("CREDITPLAN"), "credit plan field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-CreditPlan"), queryResults.get("CREDITPLAN"), "Previous credit plan field value");                }                if (!PropUtils.getPropValue(properties, "updated-ExpiresOn").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-ExpiresOn"), queryResults.get("ExpiresOn"), "Expires on field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-ExpiresOn"), queryResults.get("ExpiresOn"), "Previous Expires on field value");                }                if (!PropUtils.getPropValue(properties, "updated-CreditExtension").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-CreditExtension"), queryResults.get("CREDITEXTENSION"), "credit extension field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-CreditExtension"), queryResults.get("CREDITEXTENSION"), "Previous credit extension field value");                }                if (!PropUtils.getPropValue(properties, "updated-ExtensionExpiresOn").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-ExtensionExpiresOn"), queryResults.get("EXTENSIONEXPIRESON"), "Extention expires on field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-ExtensionExpiresOn"), queryResults.get("EXTENSIONEXPIRESON"), "Previous Extention expires on field value");                }                if (!PropUtils.getPropValue(properties, "updated-PercOverAllowed").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-PercOverAllowed"), queryResults.get("PERCENTAGEOVERALLOWED"), "Percent over allowed field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-PercOverAllowed"), queryResults.get("PERCENTAGEOVERALLOWED"), "Previous Percent over allowed field value");                }                if (!PropUtils.getPropValue(properties, "updated-ExtensionReasons").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-ExtensionReasons"), queryResults.get("EXTENTIONREASONS"), "Extention reasons field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-ExtensionReasons"), queryResults.get("EXTENTIONREASONS"), "Previous Extention reasons field value");                }                if (!PropUtils.getPropValue(properties, "updated-calculatedBalanceThreshold").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-calculatedBalanceThreshold"), queryResults.get("CALCULATED_LIMIT"), "Calculated limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-calculatedBalanceThreshold"), queryResults.get("CALCULATED_LIMIT"), "Previous Calculated limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-CreditLimitThresholdPerc").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-CreditLimitThresholdPerc"), queryResults.get("CREDITLIMITTHRESHOLDPERC"), "Credit limit threshold percentage field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-CreditLimitThresholdPerc"), queryResults.get("CREDITLIMITTHRESHOLDPERC"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }                if (!PropUtils.getPropValue(properties, "updated-OriginalLimit").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Original credit limit field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-OriginalLimit"), queryResults.get("ORIGINALCREDITLIMIT"), "Previous Original credit limit field value");                }            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate Authentication section in Account information module     */    public void validateAuthenticationSectionOfAccInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select authentication_answer from m_customers mcust\n" +                " left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("Authentication-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("authentication_answer_is_viewable")) {                    if (eligibilityOfView.get("authentication_answer_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Answer")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "AUTHENTICATION_ANSWER").trim(), fieldValues.get(i).getText().trim(), "Answer field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "AUTHENTICATION_ANSWER").trim(), "", "Answer field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("authentication_answer_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Answer")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='authenticationAnswer']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "AUTHENTICATION_ANSWER").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='authenticationAnswer']>input"), "ng-reflect-model"), "Answer field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "AUTHENTICATION_ANSWER").trim(), "", "Answer field value display based on validation control");                            }                            PropUtils.setProps("previous-authenticationAnswer", commonPage.getSpecificValueFromMapObject(queryResults, "AUTHENTICATION_ANSWER").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("authentication_answer_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='authenticationAnswer']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-authenticationAnswer", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='authenticationAnswer']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='authenticationAnswer']>input"), "ng-reflect-is-disabled"), "Authentication Answer field status in Edit pop up");                                PropUtils.setProps("updated-authenticationAnswer", "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.verifyPresenceOfDivText(logger, "Authentication has been updated");                properties = PropUtils.getProps(baseUtils.testDataFile);                queryResults = commonUtils.getQueryResultsOnMap(query);//                if(!PropUtils.getPropValue(properties,"updated-authenticationAnswer").equalsIgnoreCase("")){//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"updated-authenticationAnswer"),commonPage.getSpecificValueFromMapObject(queryResults, "AUTHENTICATION_ANSWER").trim(),"Authentication answer field value latest");//                }else{//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"previous-authenticationAnswer"),commonPage.getSpecificValueFromMapObject(queryResults, "AUTHENTICATION_ANSWER").trim(),"Authentication answer field value previous");//                }            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate Additional Details section in Account information module     */    public void validateAdditionalDetailsSectionOfAccInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select mcust.ext_delivery_ref,mcust.distributor_id,mcust.external_customer_code,mcust.ext_delivery_name,\n" +                "ccv.value as additionalInvoiceText from m_customers mcust\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join CUSTOMER_CHARSTIC_VALUES ccv on ccv.entity_oid = mcust.customer_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("AdditionalDetails-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("ext_delivery_ref_is_viewable")) {                    if (eligibilityOfView.get("ext_delivery_ref_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Ext delivery ref")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_REF").trim(), fieldValues.get(i).getText().trim(), "Ext delivery ref field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_REF").trim(), "", "Ext delivery ref field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("external_customer_code_is_viewable")) {                    if (eligibilityOfView.get("external_customer_code_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer segment")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTERNAL_CUSTOMER_CODE").trim(), fieldValues.get(i).getText().trim(), "Customer segment field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTERNAL_CUSTOMER_CODE").trim(), "", "Customer segment field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("ext_delivery_name_is_viewable")) {                    if (eligibilityOfView.get("ext_delivery_name_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer group")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_NAME").trim(), fieldValues.get(i).getText().trim(), "Customer group field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_NAME").trim(), "", "Customer group field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("distributor_id_is_viewable")) {                    if (eligibilityOfView.get("distributor_id_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Distributor ID")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DISTRIBUTOR_ID").trim(), fieldValues.get(i).getText().trim(), "Distributor ID field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DISTRIBUTOR_ID").trim(), "", "Distributor ID field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("additionalInvoiceTextVO.value_is_viewable")) {                    if (eligibilityOfView.get("additionalInvoiceTextVO.value_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Additional invoice text")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ADDITIONALINVOICETEXT").trim(), fieldValues.get(i).getText().trim(), "Additional invoice text field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ADDITIONALINVOICETEXT").trim(), "", "Additional invoice text field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("ext_delivery_ref_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Ext delivery ref")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='extDeliveryRef']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_REF").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extDeliveryRef']>input"), "ng-reflect-model"), "Ext delivery ref field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_REF").trim(), "", "Ext delivery ref field value display based on validation control");                            }                            PropUtils.setProps("previous-extDeliveryRef", commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_REF").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("ext_delivery_ref_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='extDeliveryRef']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-extDeliveryRef", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extDeliveryRef']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extDeliveryRef']>input"), "ng-reflect-is-disabled"), baseUtils.testDataFilePath);                                PropUtils.setProps("updated-extDeliveryRef", "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("external_customer_code_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Customer segment")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='externalCustomerCode']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTERNAL_CUSTOMER_CODE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='externalCustomerCode']>input"), "ng-reflect-model"), "Customer segment field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXTERNAL_CUSTOMER_CODE").trim(), "", "Customer segment field value display based on validation control");                            }                            PropUtils.setProps("previous-customerSegment", commonPage.getSpecificValueFromMapObject(queryResults, "EXTERNAL_CUSTOMER_CODE").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("external_customer_code_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='externalCustomerCode']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-customerSegment", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='externalCustomerCode']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='externalCustomerCode']>input"), "ng-reflect-is-disabled"), "Customer segment field status in edit pop up");                                PropUtils.setProps("updated-customerSegment", "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("ext_delivery_name_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Customer group")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='extDeliveryName']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_NAME").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extDeliveryName']>input"), "ng-reflect-model"), "Customer group field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_NAME").trim(), "", "Customer group field value display based on validation control");                            }                            PropUtils.setProps("previous-customerGroup", commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_NAME").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("ext_delivery_name_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='extDeliveryName']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-customerGroup", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extDeliveryName']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extDeliveryName']>input"), "ng-reflect-is-disabled"), "Customer group field status in edit pop up");                                PropUtils.setProps("updated-customerGroup", "", baseUtils.testDataFilePath);                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("additionalInvoiceTextVO.value_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Additional invoice text")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='additionalInvoiceText']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ADDITIONALINVOICETEXT").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='additionalInvoiceText']>input"), "ng-reflect-model"), "Additional invoice text field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ADDITIONALINVOICETEXT").trim(), "", "Additional invoice text field value display based on validation control");                            }                            PropUtils.setProps("previous-additionalInvoiceText", commonPage.getSpecificValueFromMapObject(queryResults, "ADDITIONALINVOICETEXT").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("additionalInvoiceTextVO.value_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='additionalInvoiceText']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-additionalInvoiceText", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='additionalInvoiceText']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-additionalInvoiceText", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='additionalInvoiceText']>input"), "ng-reflect-is-disabled"), "Addition invoice text field status in edit pop up");                            }                            i = i + 1;                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.verifyPresenceOfDivText(logger, "Additional details section has been updated");                queryResults = commonUtils.getQueryResultsOnMap(query);                properties = PropUtils.getProps(baseUtils.testDataFile);//                if(!PropUtils.getPropValue(properties,"updated-extDeliveryRef").equalsIgnoreCase("")){//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"updated-extDeliveryRef"),commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_REF").trim(),"Ext Delivery Reference field value latest");//                }else{//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"previous-extDeliveryRef"),commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_REF").trim(),"Ext Delivery Reference field value previous");//                }//                if(!PropUtils.getPropValue(properties,"updated-customerSegment").equalsIgnoreCase("")){//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"updated-customerSegment"),commonPage.getSpecificValueFromMapObject(queryResults, "EXTERNAL_CUSTOMER_CODE").trim(),"Customer segment field value latest");//                }else{//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"previous-customerSegment"),commonPage.getSpecificValueFromMapObject(queryResults, "EXTERNAL_CUSTOMER_CODE").trim(),"Customer segment field value previous");//                }//                if(!PropUtils.getPropValue(properties,"updated-customerGroup").equalsIgnoreCase("")){//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"updated-customerGroup"),commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_NAME").trim(),"Customer Group field value latest");//                }else{//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"previous-customerGroup"),commonPage.getSpecificValueFromMapObject(queryResults, "EXT_DELIVERY_NAME").trim(),"Customer Group field value previous");//                }//                if(!PropUtils.getPropValue(properties,"updated-additionalInvoiceText").equalsIgnoreCase("")){//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"updated-additionalInvoiceText"),commonPage.getSpecificValueFromMapObject(queryResults, "ADDITIONALINVOICETEXT").trim(),"Additional Invoice Text field value latest");//                }else{//                    commonPage.assertTwoStrings(logger,PropUtils.getPropValue(properties,"previous-additionalInvoiceText"),commonPage.getSpecificValueFromMapObject(queryResults, "ADDITIONALINVOICETEXT").trim(),"Additional Invoice Text field value previous");//                }            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate Pricing control values section in Account information module     */    public void validatePricingControlValuesSectionOfAccInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select mcust.customer_value_1_oid,mcust.customer_value_2_oid,mcust.customer_value_3_oid,cv1.description as band, cv2.description as customerValue2, cv3.description as customerValue3 from m_customers mcust\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join customer_values cv1 on cv1.customer_value_oid = mcust.customer_value_1_oid\n" +                "left join customer_values cv2 on cv2.customer_value_oid = mcust.customer_value_2_oid\n" +                "left join customer_values cv3 on cv3.customer_value_oid = mcust.customer_value_3_oid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("PricingControlValues-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("customer_value_1_oid_is_viewable")) {                    if (eligibilityOfView.get("customer_value_1_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Competitive Offer")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BAND").trim(), fieldValues.get(i).getText().trim(), "Band field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BAND").trim(), "", "Band field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("customer_value_2_oid_is_viewable")) {                    if (eligibilityOfView.get("customer_value_2_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Volume band")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE2").trim(), fieldValues.get(i).getText().trim(), "Customer control value 2 field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE2").trim(), "", "Customer control value 2 field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("customer_value_3_oid_is_viewable")) {                    if (eligibilityOfView.get("customer_value_3_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("G/S/B band")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE3").trim(), fieldValues.get(i).getText().trim(), "Customer control value 3 field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE3").trim(), "", "Customer control value 3 field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        } else if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                commonPage.clickAndPerformUsingActions(basePage.getWebElementUsingLocator(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon")));                logger.log("Clicked on three dot icon");                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("customer_value_1_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Competitive Offer")) {                            logger.log(basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='band']>mat-select")).toString());                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='band']>mat-select"))) {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_1_OID").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='band']>mat-select"),"ng-reflect-model"), "Band field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BAND").trim(), "", "Band field value display based on validation control");                            }                        }                        PropUtils.setProps("previous-customerValue1", commonPage.getSpecificValueFromMapObject(queryResults, "BAND").trim(), baseUtils.testDataFilePath);                        if (eligibilityOfEdit.get("customer_value_1_oid_is_editable").equalsIgnoreCase("true")) {                            String customerValue1Query = "select cv.description from customer_values cv\n" +                                    "left join customer_value_types cvt on cvt.customer_value_type_oid = cv.customer_value_type_oid\n" +                                    "where cvt.description = 'Competitive Offer' and cvt.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                            List<Map<String, String>> customerValue1QR = commonUtils.getAllRowsOfQueryResultsOnListMap(customerValue1Query);                            if (customerValue1QR.size() == 1) {                                PropUtils.setProps("updated-customerValue1", "", baseUtils.testDataFilePath);                            } else {                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='band']>mat-select"));                                for (int j = 0; j <= customerValue1QR.size() - 1; j++) {                                    if (!commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='band']>mat-select"), "ng-reflect-model").equalsIgnoreCase(customerValue1QR.get(j).get("DESCRIPTION"))) {                                        commonPage.verifyPresenceOSpanText(logger, customerValue1QR.get(j).get("DESCRIPTION"));                                    }                                }                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "BAND").trim());                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-customerValue1", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='band']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            }                        } else {                            PropUtils.setProps("updated-customerValue1", "", baseUtils.testDataFilePath);                            commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='band']>mat-select"), "ng-reflect-is-disabled"), "Customer value 1 field status in edit pop up");                        }                        i = i + 1;                    }                    if (eligibilityOfEdit.containsKey("customer_value_2_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Volume band")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='customerControlValue2']>mat-select"))) {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_2_OID").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue2']>mat-select"), "ng-reflect-model"), "Customer value 2 field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE2").trim(), "", "CUSTOMERVALUE2 field value display based on validation control");                            }                            PropUtils.setProps("previous-customerValue2", commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE2").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("customer_value_2_oid_is_editable").equalsIgnoreCase("true")) {                                String customerValue1Query = "select cv.description from customer_values cv\n" +                                        "left join customer_value_types cvt on cvt.customer_value_type_oid = cv.customer_value_type_oid\n" +                                        "where cvt.description = 'Volume Band' and cvt.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                List<Map<String, String>> customerValue1QR = commonUtils.getAllRowsOfQueryResultsOnListMap(customerValue1Query);                                if (customerValue1QR.size() == 1) {                                    PropUtils.setProps("updated-customerValue2", "", baseUtils.testDataFilePath);                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='customerControlValue2']>mat-select"));                                    for (int j = 0; j <= customerValue1QR.size() - 1; j++) {                                        if (!commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue2']>mat-select"), "ng-reflect-model").equalsIgnoreCase(customerValue1QR.get(j).get("DESCRIPTION"))) {                                            commonPage.verifyPresenceOSpanText(logger, customerValue1QR.get(j).get("DESCRIPTION"));                                        }                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE2").trim());                                    commonPage.handleActionsClassForKeyboardActions("tab");                                    PropUtils.setProps("updated-customerValue2", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue2']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                }                            } else {                                PropUtils.setProps("updated-customerValue2", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue2']>mat-select"), "ng-reflect-is-disabled"), "Customer value 2 field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("customer_value_3_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("G/S/B band")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='customerControlValue3']>mat-select"))) {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_3_OID").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue3']>mat-select"), "ng-reflect-model"), "Band field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE3").trim(), "", "CUSTOMERVALUE3 field value display based on validation control");                            }                            PropUtils.setProps("previous-customerValue3", commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE3").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("customer_value_3_oid_is_editable").equalsIgnoreCase("true")) {                                String customerValue1Query = "select cv.description from customer_values cv\n" +                                        "left join customer_value_types cvt on cvt.customer_value_type_oid = cv.customer_value_type_oid\n" +                                        "where cvt.description = 'G/S/B Band' and cvt.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                List<Map<String, String>> customerValue1QR = commonUtils.getAllRowsOfQueryResultsOnListMap(customerValue1Query);                                if (customerValue1QR.size() == 1) {                                    PropUtils.setProps("updated-customerValue3", "", baseUtils.testDataFilePath);                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='customerControlValue3']>mat-select"));                                    for (int j = 0; j <= customerValue1QR.size() - 1; j++) {                                        if (!commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue3']>mat-select"), "ng-reflect-model").equalsIgnoreCase(customerValue1QR.get(j).get("DESCRIPTION"))) {                                            commonPage.verifyPresenceOSpanText(logger, customerValue1QR.get(j).get("DESCRIPTION"));                                        }                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERVALUE3").trim());                                    commonPage.handleActionsClassForKeyboardActions("tab");                                    PropUtils.setProps("updated-customerValue3", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue3']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                }                            } else {                                PropUtils.setProps("updated-customerValue3", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerControlValue3']>mat-select"), "ng-reflect-is-disabled"), "Customer value 3 field status in edit pop up");                            }                            i = i + 1;                        }                        commonPage.sleepForFewSeconds(2);                    }                    commonPage.clickButtonUsingSpan(logger, "Save");                    commonPage.verifyPresenceOfDivText(logger, "Pricing control values has been updated");                    queryResults = commonUtils.getQueryResultsOnMap(query);                    properties = PropUtils.getProps(baseUtils.testDataFile);                    if (!PropUtils.getPropValue(properties, "updated-customerValue1").equalsIgnoreCase("")) {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-customerValue1"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_1_OID").trim(), "Customer value 1 latest value");                    } else {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-customerValue1"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_1_OID").trim(), "Previous Customer value 1");                    }                    if (!PropUtils.getPropValue(properties, "updated-customerValue2").equalsIgnoreCase("")) {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-customerValue2"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_2_OID").trim(), "Customer value 2 latest value");                    } else {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-customerValue2"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_2_OID").trim(), "Previous Customer value 2");                    }                    if (!PropUtils.getPropValue(properties, "updated-customerValue3").equalsIgnoreCase("")) {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-customerValue3"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_3_OID").trim(), "Customer value 3 latest value");                    } else {                        commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-customerValue3"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMER_VALUE_3_OID").trim(), "Previous Customer value 3");                    }                }            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate account summary section from Account information module     */    public void validateAccountSummarySectionOfAccInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select mcust.name as accountName, ct.DESCRIPTION as customerType, mcust.postal_address_oid as physicalAddress,\n" +                "mcust.street_address_oid as mailingAddress, mcust.contact_name as mainContact, mcust.email_address as emailAddress,\n" +                "mcust.phone_Mobile_1 as phone,mcust.phone_mobile_2 as otherPhone, mcust.phone_fax as phoneFax,a1.ADDRESS_LINE as mailingAddressLine,a1.suburb as mailingSuburb,\n" +                "s1.description as mailingstate,a1.postal_code as mailingPostalCode,\n" +                "a2.ADDRESS_LINE as physicalAddressLine,a2.suburb as physicalSuburb,s2.description as physicalstate,\n" +                "a2.postal_code as physicalPostalCode from m_customers mcust\n" +                "left join customer_types ct on ct.DESCRIPTION_OID = mcust.customer_type_did\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join addresses a1 on a1.address_oid = mcust.postal_address_oid\n" +                "left join addresses a2 on a2.address_oid = mcust.street_address_oid\n" +                " left join states s1 on s1.state_oid = a1.state_oid\n" +                " left join states s2 on s2.state_oid = a2.state_oid\n" +                "where mcust.customer_no = " + PropUtils.getPropValue(properties, "commonAccountNo") + " and mc.client_mid = " +                PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        Map<String, String> addressQueryResults = new HashMap<>();        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[@class='panel-expanded-field-label']"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("AccountSummary-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("name_is_viewable")) {                    if (eligibilityOfView.get("name_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Account name")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ACCOUNTNAME"), fieldValues.get(i).getText(), "AccountName based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("customer_type_did_is_viewable")) {                    if (eligibilityOfView.get("customer_type_did_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer type")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERTYPE"), fieldValues.get(i).getText(), "Customer type based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("streetAddressVO.country_oid_is_viewable") || eligibilityOfView.containsKey("streetAddressVO.postal_code_is_viewable") || eligibilityOfView.containsKey("streetAddressVO.address_line_is_viewable") || eligibilityOfView.containsKey("streetAddressVO.state_oid_is_viewable") || eligibilityOfView.containsKey("streetAddressVO.suburb_is_viewable")) {                    String mailingAddress = "";                    if (fieldNames.get(i).getText().equalsIgnoreCase("Physical address1")) {                        if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                            query = "select a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code,c.country_code as country from addresses a\n" +                                    "left join m_customers mcust on mcust.street_ADDRESS_OID = a.address_oid\n" +                                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                                    "left join states s on s.state_oid = a.state_oid\n" +                                    " left join countries c on c.country_oid = mc.country_oid\n" +                                    " where a.address_oid = " + queryResults.get("MAILINGADDRESS") + " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                            addressQueryResults = commonUtils.getQueryResultsOnMap(query);                            logger.log(query);                            if (eligibilityOfView.containsKey("streetAddressVO.address_line_is_viewable")) {                                if (eligibilityOfView.get("streetAddressVO.address_line_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "ADDRESS_LINE").equalsIgnoreCase("")) {                                    mailingAddress = commonPage.getSpecificValueFromMapObject(addressQueryResults, "ADDRESS_LINE") + "\n";                                }                            }                            if (eligibilityOfView.containsKey("streetAddressVO.suburb_is_viewable")) {                                if (eligibilityOfView.get("streetAddressVO.suburb_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").equalsIgnoreCase("")) {                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB") + ", ";                                }                            }                            if (eligibilityOfView.containsKey("streetAddressVO.state_oid_is_viewable")) {                                if (eligibilityOfView.get("streetAddressVO.state_oid_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "STATE").equalsIgnoreCase("")) {                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "STATE") + ", ";                                }                            }                            if (eligibilityOfView.containsKey("streetAddressVO.country_oid_is_viewable")) {                                if (eligibilityOfView.get("streetAddressVO.country_oid_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "COUNTRY").equalsIgnoreCase("")) {                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "COUNTRY") + ", ";                                }                            }                            if (eligibilityOfView.containsKey("streetAddressVO.postal_code_is_viewable")) {                                if (eligibilityOfView.get("streetAddressVO.postal_code_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "POSTAL_CODE").equalsIgnoreCase("")) {                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "POSTAL_CODE");                                }                            }                            if (!mailingAddress.equalsIgnoreCase("")) {                                if (mailingAddress.substring(mailingAddress.length() - 1).equalsIgnoreCase(",")) {                                    StringBuilder sb = new StringBuilder();                                    sb.append(mailingAddress).deleteCharAt(sb.length() - 1);                                    mailingAddress = sb.toString();                                }                                commonPage.assertTwoStrings(logger, mailingAddress, fieldValues.get(i).getText(), "Mailing Address");                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfView.containsKey("contact_name_is_viewable")) {                    if (eligibilityOfView.get("contact_name_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Main contact")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "MAINCONTACT"), fieldValues.get(i).getText(), "Main contact based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("email_address_is_viewable")) {                    if (eligibilityOfView.get("email_address_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Email address")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EMAILADDRESS"), fieldValues.get(i).getText(), "Email address based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("phone_fax_is_viewable")) {                    if (eligibilityOfView.get("phone_fax_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Fax number")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PHONEFAX"), fieldValues.get(i).getText(), "Fax number based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("phone_mobile_1_is_viewable")) {                    if (eligibilityOfView.get("phone_mobile_1_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Phone")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PHONE"), fieldValues.get(i).getText(), "Phone number based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("phone_mobile_2_is_viewable")) {                    if (eligibilityOfView.get("phone_mobile_2_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Other phone")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "OTHERPHONE"), fieldValues.get(i).getText(), "Phone number based on validation control");                                i = i + 1;                            }                        }                    }                }//                if (eligibilityOfView.containsKey("postalAddressVO.country_oid_is_viewable") || eligibilityOfView.containsKey("postalAddressVO.postal_code_is_viewable") || eligibilityOfView.containsKey("postalAddressVO.address_line_is_viewable") || eligibilityOfView.containsKey("postalAddressVO.state_oid_is_viewable") || eligibilityOfView.containsKey("postalAddressVO.suburb_is_viewable")) {//                    String mailingAddress = "";//                    if (fieldNames.get(i).getText().equalsIgnoreCase("Mailing address1")) {//                        if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {//                            query = "select a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code,c.country_code as country from addresses a\n" +//                                    "left join m_customers mcust on mcust.POSTAL_ADDRESS_OID = a.address_oid\n" +//                                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +//                                    "left join states s on s.state_oid = a.state_oid\n" +//                                    " left join countries c on c.country_oid = mc.country_oid\n" +//                                    " where a.address_oid = " + queryResults.get("PHYSICALADDRESS") + " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");//                            addressQueryResults = commonUtils.getQueryResultsOnMap(query);//                            logger.log(query);//                            if (eligibilityOfView.containsKey("postalAddressVO.address_line_is_viewable")) {//                                if (eligibilityOfView.get("postalAddressVO.address_line_is_viewable").equalsIgnoreCase("true")) {//                                    mailingAddress = commonPage.getSpecificValueFromMapObject(addressQueryResults, "ADDRESS_LINE") + "\n";//                                }//                            }//                            if (eligibilityOfView.containsKey("postalAddressVO.suburb_is_viewable")) {//                                if (eligibilityOfView.get("postalAddressVO.suburb_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").equalsIgnoreCase("")) {//                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB") + ", ";//                                }//                            }//                            if (eligibilityOfView.containsKey("postalAddressVO.state_oid_is_viewable")) {//                                if (eligibilityOfView.get("postalAddressVO.state_oid_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "STATE").equalsIgnoreCase("")) {//                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "STATE") + ", ";//                                }//                            }//                            if (eligibilityOfView.containsKey("postalAddressVO.country_oid_is_viewable")) {//                                if (eligibilityOfView.get("postalAddressVO.country_oid_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "COUNTRY").equalsIgnoreCase("")) {//                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "COUNTRY") + ", ";//                                }//                            }//                            if (eligibilityOfView.containsKey("postalAddressVO.postal_code_is_viewable")) {//                                if (eligibilityOfView.get("postalAddressVO.postal_code_is_viewable").equalsIgnoreCase("true") && !commonPage.getSpecificValueFromMapObject(addressQueryResults, "POSTAL_CODE").equalsIgnoreCase("")) {//                                    mailingAddress = mailingAddress + commonPage.getSpecificValueFromMapObject(addressQueryResults, "POSTAL_CODE");//                                }//                            }//                            if (!mailingAddress.equalsIgnoreCase("")) {//                                if (mailingAddress.substring(mailingAddress.length() - 1).equalsIgnoreCase(",")) {//                                    StringBuilder sb = new StringBuilder();//                                    sb.append(mailingAddress).deleteCharAt(sb.length() - 1);//                                    mailingAddress = sb.toString();//                                }//                                commonPage.assertTwoStrings(logger, mailingAddress, fieldValues.get(i).getText(), "Physical Address");//                            }//                            i = i + 1;//                        }//                    }//                }            }        }        if (actionOfSection.equalsIgnoreCase("edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("name_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Account name")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='name']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ACCOUNTNAME").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='name']>input"), "ng-reflect-model"), "Account Name field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ACCOUNTNAME").trim(), "", "Account Name field value display based on validation control");                            }                            PropUtils.setProps("previous-name", commonPage.getSpecificValueFromMapObject(queryResults, "ACCOUNTNAME").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("name_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='name']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-name", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='name']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='name']>input"), "ng-reflect-is-disabled"), "Account Name field status in edit pop up");                            }                            i = i + 1;                        }                    }//                    if (eligibilityOfEdit.containsKey("customer_type_did_is_editable")) {//                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Customer type")) {//                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='customerType']>mat-select"))) {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERTYPE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerType']>mat-select"), "ng-reflect-model"), "Customer Type field value display based on validation control");//                            } else {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERTYPE").trim(), "", "Customer type field value display based on validation control");//                            }//                            PropUtils.setProps("previous-customerType", commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERTYPE").trim(), baseUtils.testDataFilePath);//                            if (eligibilityOfEdit.get("customer_type_did_is_editable").equalsIgnoreCase("true")) {//                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='customerType']>mat-select"));//                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("mav-select[ng-reflect-name='customerType']>mat-select"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerType']>mat-select"), "ng-reflect-model"));//                                commonPage.handleActionsClassForKeyboardActions("tab");//                                PropUtils.setProps("updated-customerType", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerType']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);//                            } else {//                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='customerType']>mat-select"), "ng-reflect-is-disabled"), "Customer Type field status in edit pop up");//                            }//                            i = i + 1;//                        }//                    }                    if (eligibilityOfEdit.containsKey("streetAddressVO.country_oid_is_editable") || eligibilityOfEdit.containsKey("streetAddressVO.postal_code_is_editable") || eligibilityOfEdit.containsKey("streetAddressVO.address_line_is_editable") || eligibilityOfEdit.containsKey("streetAddressVO.state_oid_is_editable") || eligibilityOfEdit.containsKey("streetAddressVO.suburb_is_editable")) {                        String mailingAddress = "";                        String addressOid = "";                        String addressCond = "";                        if (queryResults.get("MAILINGADDRESS") == null) {                            if (queryResults.get("PHYSICALADDRESS") != null) {                                addressOid = queryResults.get("PHYSICALADDRESS");                                addressCond = "mcust.POSTAL_ADDRESS_OID = a.address_oid";                            }                        } else {                            addressOid = queryResults.get("MAILINGADDRESS");                            addressCond = "mcust.STREET_ADDRESS_OID = a.address_oid";                        }                        query = "select a.ADDRESS_LINE,a.suburb,s.description as state,a.postal_code,c.country_code as country from addresses a\n" +                                "left join m_customers mcust on " + addressCond + "\n" +                                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                                "left join states s on s.state_oid = a.state_oid\n" +                                " left join countries c on c.country_oid = mc.country_oid\n" +                                " where a.address_oid = " + addressOid + " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                        addressQueryResults = commonUtils.getQueryResultsOnMap(query);                        logger.log(query);                        if (eligibilityOfEdit.containsKey("streetAddressVO.address_line_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Street address")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "ADDRESS_LINE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"), "ng-reflect-model"), "Street address field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "ADDRESS_LINE").trim(), "", "Street address field value display based on validation control");                                }                                PropUtils.setProps("previous-addressLine", commonPage.getSpecificValueFromMapObject(addressQueryResults, "ADDRESS_LINE").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("streetAddressVO.address_line_is_editable").equalsIgnoreCase("true")) {                                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                    commonPage.handleActionsClassForKeyboardActions("tab");                                    PropUtils.setProps("updated-addressLine", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='addressLine']>input"), "ng-reflect-is-disabled"), "Street address field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("streetAddressVO.suburb_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("City or town")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-model"), "City or town field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").trim(), "", "City or town field value display based on validation control");                                }                                PropUtils.setProps("previous-suburb", commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("streetAddressVO.suburb_is_editable").equalsIgnoreCase("true")) {                                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                    commonPage.handleActionsClassForKeyboardActions("tab");                                    PropUtils.setProps("updated-suburb", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-is-disabled"), "City or town field status in edit pop up");                                }                                i = i + 1;                            }                        }                        if (eligibilityOfView.containsKey("streetAddressVO.state_oid_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("City or town")) {//                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"))) {//                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-model"), "City or town field value display based on validation control");//                                } else {//                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").trim(), "", "City or town field value display based on validation control");//                                }//                                PropUtils.setProps("previous-suburb", commonPage.getSpecificValueFromMapObject(addressQueryResults, "SUBURB").trim(), baseUtils.testDataFilePath);//                                if (eligibilityOfEdit.get("streetAddressVO.suburb_is_editable").equalsIgnoreCase("true")) {//                                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));//                                    commonPage.handleActionsClassForKeyboardActions("tab");//                                    PropUtils.setProps("updated-addressLine", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);//                                } else {//                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='suburb']>input"), "ng-reflect-is-disabled"), "City or town field status in edit pop up");//                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("streetAddressVO.country_oid_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Country")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "COUNTRY").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), "ng-reflect-model"), "Country field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "COUNTRY").trim(), "", "Country field value display based on validation control");                                }                                PropUtils.setProps("previous-country", commonPage.getSpecificValueFromMapObject(addressQueryResults, "COUNTRY").trim(), baseUtils.testDataFilePath);//                                if (eligibilityOfEdit.get("streetAddressVO.country_oid_is_editable").equalsIgnoreCase("true")) {                                commonPage.scrollDown(logger);                                basePage.scrollToElement(basePage.getWebElementUsingLocator(logger, By.cssSelector("mav-select[ng-reflect-name='country']>mat-select")));                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"));                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), "ng-reflect-model"));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-country", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);//                                } else {//                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='country']>mat-select"), "ng-reflect-is-disabled"), "Country field status in edit pop up");//                                }                                i = i + 1;                            }                        }                        if (eligibilityOfEdit.containsKey("streetAddressVO.postal_code_is_editable")) {                            if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Postal code")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"))) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "POSTAL_CODE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-model"), "Postal code field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(addressQueryResults, "POSTAL_CODE").trim(), "", "Postal code field value display based on validation control");                                }                                PropUtils.setProps("previous-country", commonPage.getSpecificValueFromMapObject(addressQueryResults, "POSTAL_CODE").trim(), baseUtils.testDataFilePath);                                if (eligibilityOfEdit.get("streetAddressVO.postal_code_is_editable").equalsIgnoreCase("true")) {                                    basePage.userClick(logger, By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"));                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-model"));                                    commonPage.handleActionsClassForKeyboardActions("tab");                                    PropUtils.setProps("updated-country", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                                } else {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='postalCode']>input"), "ng-reflect-is-disabled"), "Postal code field status in edit pop up");                                }                                i = i + 1;                            }                        }                    }                    if (eligibilityOfEdit.containsKey("contact_name_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Main contact")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='contactName']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "MAINCONTACT").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='contactName']>input"), "ng-reflect-model"), "Main contact field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "MAINCONTACT").trim(), "", "Main contact field value display based on validation control");                            }                            PropUtils.setProps("previous-contactName", commonPage.getSpecificValueFromMapObject(queryResults, "MAINCONTACT").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("contact_name_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='contactName']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-contactName", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='contactName']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='contactName']>input"), "ng-reflect-is-disabled"), "Main contact field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("email_address_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Email address")) {                            if (basePage.getStatusOfElement(By.cssSelector("ols-email[ng-reflect-name='emailAddress']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EMAILADDRESS").trim(), commonPage.getAttributeValue(By.cssSelector("ols-email[ng-reflect-name='emailAddress']>input"), "ng-reflect-model"), "Email address field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EMAILADDRESS").trim(), "", "Email address field value display based on validation control");                            }                            PropUtils.setProps("previous-emailAddress", commonPage.getSpecificValueFromMapObject(queryResults, "EMAILADDRESS").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("email_address_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("ols-email[ng-reflect-name='emailAddress']>input"), "srilatha.nerella@wexinc.com");                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-emailAddress", commonPage.getAttributeValue(By.cssSelector("ols-email[ng-reflect-name='emailAddress']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("ols-email[ng-reflect-name='emailAddress']>input"), "ng-reflect-is-disabled"), "Email address field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("phone_mobile_1_is_viewable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Phone")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='phoneMobile1']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PHONE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneMobile1']>input"), "ng-reflect-model"), "Phone field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PHONE").trim(), "", "Phone field value display based on validation control");                            }                            PropUtils.setProps("previous-phone", commonPage.getSpecificValueFromMapObject(queryResults, "PHONE").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("phone_mobile_1_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='phoneMobile1']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-phone", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneMobile1']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneMobile1']>input"), "ng-reflect-is-disabled"), "Phone field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("phone_mobile_2_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Other phone")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='phoneMobile2']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "OTHERPHONE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneMobile2']>input"), "ng-reflect-model"), "Other phone field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "OTHERPHONE").trim(), "", "Other phone field value display based on validation control");                            }                            PropUtils.setProps("previous-otherPhone", commonPage.getSpecificValueFromMapObject(queryResults, "OTHERPHONE").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("phone_mobile_2_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='phoneMobile2']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-otherPhone", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneMobile2']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneMobile2']>input"), "ng-reflect-is-disabled"), "Other phone field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("phone_fax_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Fax number")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='phoneFax']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PHONEFAX").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneFax']>input"), "ng-reflect-model"), "Fax number field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PHONEFAX").trim(), "", "Fax number field value display based on validation control");                            }                            PropUtils.setProps("previous-phoneFax", commonPage.getSpecificValueFromMapObject(queryResults, "PHONEFAX").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("phone_fax_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='phoneFax']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-phoneFax", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneFax']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='phoneFax']>input"), "ng-reflect-is-disabled"), "Fax number field status in edit pop up");                            }                            i = i + 1;                        }                    }                }            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate Account Details section in Financial information module     */    public void validateAccountDetailsSectionOfFinInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select ast.description as status,ass.description as substatus,a.OPENED_ON,\n" +                "a.CLOSED_ON,a.REINSTATED_ON,a.LAST_BILLED_ON, aci.note from accounts a\n" +                "left join account_status ast on ast.account_status_oid = a.account_status_oid\n" +                "left join account_sub_status ass on ass.account_sub_status_oid = a.account_sub_status_oid\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join account_credit_information aci on aci.account_oid = a.account_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        logger.log(query);        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfViewOrEdit = new HashMap<>();        for (int i = 0; i < valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("AccountSummary-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        int values = 1;        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfViewOrEdit.containsKey("account_status_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("account_status_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Status")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                values = values + 1;                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim(), fieldValues.get(i).getText().trim(), "Status field value display based on validation control");                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("account_sub_status_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("account_sub_status_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Sub status")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                values = values + 1;                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SUBSTATUS").trim(), fieldValues.get(i).getText().trim(), "Sub status field value display based on validation control");                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("opened_on_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("opened_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Opened on")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                values = values + 1;                                String[] datearr = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "OPENED_ON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "OPENED_ON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Opened on field value display based on validation control");                                }                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("closed_on_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("closed_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Closed on")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                values = values + 1;                                String datearr[] = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CLOSED_ON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "CLOSED_ON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Closed on field value display based on validation control");                                }                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("reinstated_on_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("reinstated_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Reinstated on")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                values = values + 1;                                String datearr[] = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "REINSTATED_ON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "REINSTATED_ON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Reinstated on field value display based on validation control");                                }                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("last_billed_on_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("last_billed_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Last Billed on")) {                            values = values + 1;                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                String datearr[] = {};                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "LAST_BILLED_ON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "LAST_BILLED_ON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(i).getText().trim(), "Last Billed on field value display based on validation control");                                }                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("diary_notes_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("diary_notes_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Note")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                values = values + 1;                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "NOTE").trim(), fieldValues.get(i).getText().trim(), "Note field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfViewOrEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNamesInEditPopUp.size() - 1; i++) {                    if (eligibilityOfViewOrEdit.containsKey("account_status_oid_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Status")) {                            if (basePage.getStatusOfElement(By.xpath("//div[@class='mat-form-field-infix']/span/mav-select[@ng-reflect-name='accountStatus']"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountStatus']>mat-select"), "ng-reflect-model"), "Status field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim(), "", "Status field value display based on validation control");                            }                            if (basePage.getStatusOfElement(By.xpath("//div[@class='mat-form-field-infix']/span/mav-select[@ng-reflect-name='account_sub_status']"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SUBSTATUS").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='account_sub_status']>mat-select"), "ng-reflect-model"), "Account Sub Status field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SUBSTATUS").trim(), "", "Status field value display based on validation control");                            }                            if (eligibilityOfViewOrEdit.get("account_status_oid_is_editable").equalsIgnoreCase("true")) {                                String accountStatusQuery = "select description as status from account_status where client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                List<Map<String, String>> accountStatusQR = commonUtils.getAllRowsOfQueryResultsOnListMap(accountStatusQuery);                                basePage.userClick(logger, By.xpath("//div[@class='mat-form-field-infix']/span/mav-select[@ng-reflect-name='accountStatus']"));                                for (int j = 0; j <= accountStatusQR.size() - 1; j++) {                                    commonPage.validateTextUsingtag(logger, accountStatusQR.get(j).get("STATUS"), "span");                                }                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "STATUS"));                                PropUtils.setProps("updatedAccountStatus", commonPage.getAttributeValue(By.xpath("//div[@class='mat-form-field-infix']/span/mav-select[@ng-reflect-name='accountStatus']"), "ng-reflect-value"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountStatus']>mat-select"), "ng-reflect-is-disabled"), "Account status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfViewOrEdit.containsKey("account_sub_status_oid_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Sub status")) {                            properties = PropUtils.getProps(baseUtils.testDataFile);                            if (eligibilityOfViewOrEdit.get("account_status_oid_is_editable").equalsIgnoreCase("true")) {                                String accountSubStatusQuery = "select distinct ass.description from account_sub_status ass \n" +                                        "left join account_status ast on ast.account_status_oid = ass.account_status_oid\n" +                                        "where ast.description = '" + PropUtils.getPropValue(properties, "updatedAccountStatus") + "'";                                List<Map<String, String>> accountStatusQR = commonUtils.getAllRowsOfQueryResultsOnListMap(accountSubStatusQuery);                                if (accountStatusQR.size() == 1) {                                    commonPage.assertTwoStrings(logger, accountStatusQR.get(0).get("DESCRIPTION"), commonPage.getAttributeValue(By.xpath("//div[@class='mat-form-field-infix']/span/mav-select[@ng-reflect-name='account_sub_status']"), "ng-reflect-value"), "Account sub status value");                                } else {                                    basePage.userClick(logger, By.xpath("//div[@class='mat-form-field-infix']/span/mav-select[@ng-reflect-name='account_sub_status']"));                                    for (int j = 0; j <= accountStatusQR.size() - 1; j++) {                                        commonPage.validateTextUsingtag(logger, accountStatusQR.get(j).get("DESCRIPTION"), "span");                                    }                                    basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                                }                                PropUtils.setProps("updatedAccountSubStatus", commonPage.getAttributeValue(By.xpath("//div[@class='mat-form-field-infix']/span/mav-select[@ng-reflect-name='account_sub_status']"), "ng-reflect-value"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='account_sub_status']>mat-select"), "ng-reflect-is-disabled"), "Account status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfViewOrEdit.containsKey("opened_on_is_editable")) {                        if (eligibilityOfViewOrEdit.get("opened_on_is_editable").equalsIgnoreCase("false")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Opened on")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='openedOn']>input"))) {                                    String[] datearr = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "OPENED_ON").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults, "OPENED_ON").trim().split(" ")[0].split("-");                                    }                                    String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='openedOn']>input"), "ng-reflect-model").split(" ");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + commonPage.getIndexOfMonth(actValueArr[1].toUpperCase()) + "/" + actValueArr[3], "Opened on field value display based on validation control");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "OPENED_ON").trim(), "", "Opened on field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfViewOrEdit.containsKey("closed_on_is_editable")) {                        if (eligibilityOfViewOrEdit.get("closed_on_is_editable").equalsIgnoreCase("false")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Closed on")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='closedOn']>input"))) {                                    String datearr[] = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "CLOSED_ON").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults, "CLOSED_ON").trim().split(" ")[0].split("-");                                        String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='closedOn']>input"), "ng-reflect-model").split(" ");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + commonPage.getIndexOfMonth(actValueArr[1].toUpperCase()) + "/" + actValueArr[3], "Closed on field value display based on validation control");                                        i = i + 1;                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CLOSED_ON").trim(), "", "Closed on field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfViewOrEdit.containsKey("reinstated_on_is_editable")) {                        if (eligibilityOfViewOrEdit.get("reinstated_on_is_editable").equalsIgnoreCase("false")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Reinstated on")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='reinstatedOn']>input"))) {                                    String datearr[] = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "REINSTATED_ON").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults, "REINSTATED_ON").trim().split(" ")[0].split("-");                                        String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='reinstatedOn']>input"), "ng-reflect-model").split(" ");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + commonPage.getIndexOfMonth(actValueArr[1].toUpperCase()) + "/" + actValueArr[3], "Reinstated on field value display based on validation control");                                        i = i + 1;                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "REINSTATED_ON").trim(), "", "Reinstated on field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfViewOrEdit.containsKey("last_billed_on_is_editable")) {                        if (eligibilityOfViewOrEdit.get("last_billed_on_is_editable").equalsIgnoreCase("false")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Last Billed on")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='lastBilledOn']>input"))) {                                    String datearr[] = {};                                    if (!commonPage.getSpecificValueFromMapObject(queryResults, "LAST_BILLED_ON").trim().equalsIgnoreCase("")) {                                        datearr = commonPage.getSpecificValueFromMapObject(queryResults, "LAST_BILLED_ON").trim().split(" ")[0].split("-");                                        String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='lastBilledOn']>input"), "ng-reflect-model").split(" ");                                        commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + commonPage.getIndexOfMonth(actValueArr[1].toUpperCase()) + "/" + actValueArr[3], "Last Billed on field value display based on validation control");                                        i = i + 1;                                    }                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "LAST_BILLED_ON").trim(), "", "Last Billed on field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                    if (eligibilityOfViewOrEdit.containsKey("diary_notes_is_editable")) {                        if (eligibilityOfViewOrEdit.get("diary_notes_is_editable").equalsIgnoreCase("true")) {                            if (fieldNames.get(i).getText().equalsIgnoreCase("Note")) {                                if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='note']>input"))) {//                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "NOTE").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='note']>input"), "ng-reflect-model"), "Note field value display based on validation control");                                    basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='note']>input"), "testNote-Automation");                                    i = i + 1;                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "NOTE").trim(), "", "Note field value display based on validation control");                                    i = i + 1;                                }                            }                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                if (basePage.getStatusOfElement(By.xpath("//div[contains(text(),'Account details section has been updated')]"))) {                    logger.log("Success message : 'Account details section has been updated') is present");                } else {                    logger.log("Success message is not present : 'Account details section has been updated')");                }//                commonPage.validateTextUsingtag(logger, "Account details section has been updated", "div");            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to validate Account Details section     */    public void validateAccountDetailsSectionOfAccInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select case when ra.expires_on>=mc.processing_Date then 'true' else 'false' end as expiresOnDateIsGreaterThanOrEqualToClientProcessingDate,mcust.trading_name as doingBusinessAs, mcust.customer_no as accountNumber,as1.description as status, as2.description as subStatus,\n" +                "mcust.embossing_name as embossingName, cp.description as cardProgram, mcust2.name as customerParent,mcust.ext_account_ref as exAccountRef,\n" +                "a.cust_service_expires_on,l.description from m_customers mcust\n" +                "left join card_programs cp on cp.card_program_oid = mcust.card_program_oid\n" +                "left join relationships r on r.member_oid = mcust.customer_mid\n" +                "left join hierarchies h on h.hierarchy_oid = r.hierarchy_oid\n" +                "left join m_customers mcust2 on mcust2.customer_mid = h.owning_member_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join relationship_assignments ra on ra.RELATIONSHIP_OID = r.RELATIONSHIP_OID\n" +                "left join accounts a on a.CUSTOMER_MID = mcust.CUSTOMER_MID\n" +                "left join account_status as1 on as1.account_status_oid = a.ACCOUNT_STATUS_OID\n" +                "left join account_sub_status as2 on as2.ACCOUNT_SUB_STATUS_OID = a.ACCOUNT_SUB_STATUS_OID\n" +                "left join languages l on l.language_oid = mcust.language_oid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");//                " and h.expires_on >= mc.client_processing_date";// + " and mcust2.name!=mcust.name";        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        logger.log(" QUERY : " + query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfView = new HashMap<>();        Map<String, String> eligibilityOfEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfView.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("AccountSummary-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            int values = 1;            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfView.containsKey("trading_name_is_viewable")) {                    if (eligibilityOfView.get("trading_name_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Doing business as")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSINESSAS").trim(), fieldValues.get(values - 1).getText().trim(), "Doing business as field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("account_status_oid_is_viewable")) {                    if (eligibilityOfView.get("account_status_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Status")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim(), fieldValues.get(values - 1).getText().trim(), "STATUS field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("account_sub_status_oid_is_viewable")) {                    if (eligibilityOfView.get("account_sub_status_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Sub status")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "SUBSTATUS").trim(), fieldValues.get(values - 1).getText().trim(), "SUBSTATUS field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("embossing_name_is_viewable")) {                    if (eligibilityOfView.get("embossing_name_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Embossing name")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EMBOSSINGNAME").trim(), fieldValues.get(values - 1).getText().trim(), "Embossing name field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("card_program_oid_is_viewable")) {                    if (eligibilityOfView.get("card_program_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Card program")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM").trim(), fieldValues.get(values - 1).getText().trim(), "Card program field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("parent_company_is_viewable")) {                    if (eligibilityOfView.get("parent_company_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Customer parent")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                if (commonPage.getSpecificValueFromMapObject(queryResults, "EXPIRESONDATEISGREATERTHANOREQUALTOCLIENTPROCESSINGDATE").equalsIgnoreCase("True")) {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERPARENT").trim(), fieldValues.get(values - 1).getText().trim(), "Customer parent field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, "", fieldValues.get(values - 1).getText().trim(), "Customer parent field value display based on validation control");                                }                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("ext_account_ref_is_viewable")) {                    if (eligibilityOfView.get("ext_account_ref_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Ex account ref")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXACCOUNTREF").trim(), fieldValues.get(values - 1).getText().trim(), "Ex account ref field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("language_oid_is_viewable")) {                    if (eligibilityOfView.get("language_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("DESCRIPTION")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSINESSAS").trim(), fieldValues.get(values - 1).getText().trim(), "Language field value display based on validation control");                                i = i + 1;                                values = values + 1;                            }                        }                    }                }                if (eligibilityOfView.containsKey("cust_service_expires_on_is_viewable")) {                    if (eligibilityOfView.get("cust_service_expires_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Maximum expiry date")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + values + "]"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CUST_SERVICE_EXPIRES_ON").equalsIgnoreCase("")) {                                    String datearr[] = commonPage.getSpecificValueFromMapObject(queryResults, "CUST_SERVICE_EXPIRES_ON").trim().split(" ")[0].split("-");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1] + "/" + datearr[0], fieldValues.get(values - 1).getText().trim(), "Maximum expiry date field value display based on validation control");                                    i = i + 1;                                    values = values + 1;                                }                            }                        }                    }                }            }        }        if (actionOfSection.equalsIgnoreCase("Edit")) {            if (eligibilityOfEdit.containsValue("true")) {                basePage.userClick(logger, By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"));                commonPage.clickButtonUsingButtonLocator(logger, "Edit");                List<WebElement> fieldNamesInEditPopUp = basePage.getListOfElements(logger, By.cssSelector("label>mat-label"));                for (int i = 0; i <= fieldNames.size() - 1; i++) {                    if (eligibilityOfEdit.containsKey("trading_name_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Doing business as")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='tradingName']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSINESSAS").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='tradingName']>input"), "ng-reflect-model"), "Doing business as field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSINESSAS").trim(), "", "Doing business as field value display based on validation control");                            }                            PropUtils.setProps("previous-tradingName", commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSINESSAS").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("trading_name_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='tradingName']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-tradingName", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='tradingName']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='tradingName']>input"), "ng-reflect-is-disabled"), "Trading name field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("account_status_oid_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Status")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='accountStatus']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountStatus']>mat-select"), "ng-reflect-model"), "Status field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim(), "", "Status field value display based on validation control");                            }                            PropUtils.setProps("previous-accountStatus", commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("account_status_oid_is_editable").equalsIgnoreCase("true")) {                                String accountStatusQuery = "select description as status from account_status where client_mid = " + PropUtils.getPropValue(properties, "ClientMID");                                List<Map<String, String>> accountStatusQR = commonUtils.getAllRowsOfQueryResultsOnListMap(accountStatusQuery);                                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='accountStatus']>mat-select"));                                for (int j = 0; j <= accountStatusQR.size() - 1; j++) {                                    commonPage.validateTextUsingtag(logger, accountStatusQR.get(j).get("STATUS"), "span");                                }                                basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "STATUS"));                                PropUtils.setProps("updated-accountStatus", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountStatus']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-accountStatus", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountStatus']>mat-select"), "ng-reflect-is-disabled"), "Account status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("account_sub_status_oid_is_editable")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Sub status")) {                            properties = PropUtils.getProps(baseUtils.testDataFile);                            PropUtils.setProps("previous-accountSubStatus", commonPage.getSpecificValueFromMapObject(queryResults, "SUBSTATUS").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("account_status_oid_is_editable").equalsIgnoreCase("true")) {                                String accountSubStatusQuery = "";                                if (!PropUtils.getPropValue(properties, "updated-accountStatus").equalsIgnoreCase("")) {                                    accountSubStatusQuery = "select distinct ass.description from account_sub_status ass \n" +                                            "left join account_status ast on ast.account_status_oid = ass.account_status_oid\n" +                                            "where ast.description = '" + PropUtils.getPropValue(properties, "updated-accountStatus") + "'";                                } else {                                    accountSubStatusQuery = "select distinct ass.description from account_sub_status ass \n" +                                            "left join account_status ast on ast.account_status_oid = ass.account_status_oid\n" +                                            "where ast.description = '" + commonPage.getSpecificValueFromMapObject(queryResults, "STATUS").trim() + "'";                                }                                List<Map<String, String>> accountStatusQR = commonUtils.getAllRowsOfQueryResultsOnListMap(accountSubStatusQuery);                                if (accountStatusQR.size() == 1) {                                    commonPage.assertTwoStrings(logger, accountStatusQR.get(0).get("DESCRIPTION"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountSubStatus']>mat-select"), "ng-reflect-model"), "Account sub status value");                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='accountSubStatus']>mat-select"));                                    for (int j = 0; j <= accountStatusQR.size() - 1; j++) {                                        commonPage.validateTextUsingtag(logger, accountStatusQR.get(j).get("DESCRIPTION"), "span");                                    }                                    basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                                }                                PropUtils.setProps("updated-accountSubStatus", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountSubStatus']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='accountSubStatus']>mat-select"), "ng-reflect-is-disabled"), "Account status");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("embossing_name_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Embossing name")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='embossingName']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EMBOSSINGNAME").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='embossingName']>input"), "ng-reflect-model"), "Embossing name field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EMBOSSINGNAME").trim(), "", "Embossing name field value display based on validation control");                            }                            PropUtils.setProps("previous-embossingName", commonPage.getSpecificValueFromMapObject(queryResults, "EMBOSSINGNAME").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("embossing_name_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='embossingName']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-embossingName", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='embossingName']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-embossingName", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='embossingName']>input"), "ng-reflect-is-disabled"), "Embossing name field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("card_program_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Card program")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='cardProgram']>mat-select"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cardProgram']>mat-select"), "ng-reflect-model"), "Card program field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM").trim(), "", "Card program field value display based on validation control");                            }                            PropUtils.setProps("previous-cardProgram", commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("card_program_oid_is_editable").equalsIgnoreCase("true")) {                                String cardProgramQuery = "select * from card_programs where client_mid = 101";                                List<Map<String, String>> cardProgramQR = commonUtils.getAllRowsOfQueryResultsOnListMap(cardProgramQuery);                                if (cardProgramQR.size() == 1 || cardProgramQR.size() == 0) {                                    commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cardProgram']>mat-select"), "ng-reflect-is-disabled"), "CardProgram field status in edit pop up");                                    PropUtils.setProps("updated-cardProgram", commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM").trim(), baseUtils.testDataFilePath);                                } else {                                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='cardProgram']>mat-select"));                                    for (int j = 0; j <= cardProgramQR.size() - 1; j++) {                                        commonPage.verifyPresenceOSpanText(logger, cardProgramQR.get(j).get("DESCRIPTION"));                                    }                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger, By.cssSelector("span[class='mat-option-text']"), commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM").trim());                                    commonPage.handleActionsClassForKeyboardActions("tab");                                    PropUtils.setProps("updated-cardProgram", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cardProgram']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='cardProgram']>mat-select"), "ng-reflect-is-disabled"), "Card program field statys in edit pop up");                            }                            i = i + 1;                        }                    }//                    if (eligibilityOfEdit.containsKey("parent_company_is_editable")) {//                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Customer parent")) {//                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='parentAccountName']>input"))) {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERPARENT").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='parentAccountName']>input"), "ng-reflect-model"), "Customer parent field value display based on validation control");//                            } else {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERPARENT").trim(), "", "Customer parent field value display based on validation control");//                            }//                            PropUtils.setProps("previous-customerParent", commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERPARENT").trim(), baseUtils.testDataFilePath);//                            PropUtils.setProps("updated-customerParent", "", baseUtils.testDataFilePath);//                            if (!eligibilityOfEdit.get("parent_company_is_editable").equalsIgnoreCase("true")) {//                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='parentAccountName']>input"), "ng-reflect-is-disabled"), "Customer parent field status in edit pop up");//                            }//                            i = i + 1;//                        }//                    }                    if (eligibilityOfEdit.containsKey("ext_account_ref_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Ex account ref")) {                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='extAccountRef']>input"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXACCOUNTREF").trim(), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extAccountRef']>input"), "ng-reflect-model"), "Ex account ref field value display based on validation control");                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "EXACCOUNTREF").trim(), "", "Ex account ref field value display based on validation control");                            }                            PropUtils.setProps("previous-extAccountRef", commonPage.getSpecificValueFromMapObject(queryResults, "EXACCOUNTREF").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("ext_account_ref_is_editable").equalsIgnoreCase("true")) {                                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='extAccountRef']>input"), PasswordGenerator.generateAlphaNumeric(logger, 10));                                commonPage.handleActionsClassForKeyboardActions("tab");                                PropUtils.setProps("updated-extAccountRef", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extAccountRef']>input"), "ng-reflect-model"), baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-extAccountRef", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='extAccountRef']>input"), "ng-reflect-is-disabled"), "Ext Account Ref field status in edit pop up");                            }                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("language_oid_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Language")) {//                            if (basePage.getStatusOfElement(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"))) {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DESCRIPTION").trim(), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"),"ng-reflect-model"), "Language field value display based on validation control");//                            } else {//                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "DESCRIPTION").trim(), "", "Language field value display based on validation control");//                            }                            PropUtils.setProps("previous-language", commonPage.getSpecificValueFromMapObject(queryResults, "DESCRIPTION").trim(), baseUtils.testDataFilePath);                            if (eligibilityOfEdit.get("language_oid_is_editable").equalsIgnoreCase("true")) {                                String languageQuery = "select description from descriptions where description_type_oid = (\n" +                                        "select description_type_oid from description_types where table_name='POS_LANGUAGE')";                                List<Map<String, String>> languageQR = commonUtils.getAllRowsOfQueryResultsOnListMap(languageQuery);//                                if(languageQR.size()==1){//                                    PropUtils.setProps("updated-language","",baseUtils.testDataFilePath);//                                    commonPage.assertTwoStrings(logger,"true",commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"),"ng-reflect-is-disabled"),"language field status in edit pop up");//                                }else{//                                    basePage.userClick(logger,By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"));//                                    for(int j=0;j<=languageQR.size()-1;j++){//                                        commonPage.verifyPresenceOSpanText(logger,languageQR.get(j).get("DESCRIPTION"));//                                    }//                                    basePage.selectRandomValueFromDropDownExceptSpecificValue(logger,By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"),commonPage.getSpecificValueFromMapObject(queryResults, "DESCRIPTION").trim());//                                    commonPage.handleActionsClassForKeyboardActions("tab");//                                    PropUtils.setProps("updated-language",commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"),"ng-reflect-model"),baseUtils.testDataFilePath);//                                }                            } else {                                PropUtils.setProps("updated-language", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='language']>mat-select"), "ng-reflect-is-disabled"), "language field status in edit pop up");                            }//                            i = i + 1;                        }                    }                    if (eligibilityOfEdit.containsKey("cust_service_expires_on_is_editable")) {                        if (fieldNamesInEditPopUp.get(i).getText().equalsIgnoreCase("Maximum expiry date")) {                            String[] datearr = {};                            if (basePage.getStatusOfElement(By.cssSelector("mav-input[ng-reflect-name='custServiceExpiresOn']>input"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CUST_SERVICE_EXPIRES_ON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "CUST_SERVICE_EXPIRES_ON").trim().split(" ")[0].split("-");                                    String[] actValueArr = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='']>input"), "ng-reflect-model").split(" ");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[2] + "/" + String.valueOf(commonPage.getIndexOfMonth(actValueArr[1].toUpperCase())).replaceAll("^0+(?!$)", "") + "/" + actValueArr[3], "Valid From field value display based on validation control");                                    PropUtils.setProps("previous-custServiceExpiresOn", datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], baseUtils.testDataFilePath);                                } else {                                    PropUtils.setProps("previous-custServiceExpiresOn", "", baseUtils.testDataFilePath);                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CUST_SERVICE_EXPIRES_ON").trim(), "", "Valid From field value display based on validation control");                            }                            if (eligibilityOfEdit.get("cust_service_expires_on_is_editable").equalsIgnoreCase("true")) {                                commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "custServiceExpiresOn", "5", "future");                                String updatedValue[] = commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='custServiceExpiresOn']>input"), "ng-reflect-model").split(" ");                                PropUtils.setProps("updated-custServiceExpiresOn", updatedValue[2] + "/" + commonPage.getIndexOfMonth(updatedValue[1].toUpperCase()) + "/" + updatedValue[3], baseUtils.testDataFilePath);                            } else {                                PropUtils.setProps("updated-custServiceExpiresOn", "", baseUtils.testDataFilePath);                                commonPage.assertTwoStrings(logger, "true", commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='custServiceExpiresOn']>input"), "ng-reflect-is-disabled"), "Valid From field status in edit pop up");                            }                        }                    }                }                commonPage.clickButtonUsingSpan(logger, "Save");                commonPage.validateTextUsingtag(logger, "Account details section has been updated", "div");                queryResults = commonUtils.getQueryResultsOnMap(query);                properties = PropUtils.getProps(baseUtils.testDataFile);//                if (!PropUtils.getPropValue(properties, "updated-tradingName").equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-tradingName"), commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSINESSAS"), "Trading Name field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-tradingName"), commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSINESSAS"), "Previous value of field Trading Name");//                }                if (!PropUtils.getPropValue(properties, "updated-accountStatus").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-accountStatus"), commonPage.getSpecificValueFromMapObject(queryResults, "STATUS"), "Account status field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-accountStatus"), commonPage.getSpecificValueFromMapObject(queryResults, "STATUS"), "Previous value of field Account status");                }                if (!PropUtils.getPropValue(properties, "updated-accountSubStatus").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-accountSubStatus"), commonPage.getSpecificValueFromMapObject(queryResults, "SUBSTATUS"), "Account sub status field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-accountSubStatus"), commonPage.getSpecificValueFromMapObject(queryResults, "SUBSTATUS"), "Previous value of field Account sub status");                }//                if (!PropUtils.getPropValue(properties, "updated-embossingName").equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-embossingName"), commonPage.getSpecificValueFromMapObject(queryResults, "EMBOSSINGNAME"), "Embossing Name field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-embossingName"), commonPage.getSpecificValueFromMapObject(queryResults, "EMBOSSINGNAME"), "Previous value of field Embossing Name");//                }                if (!PropUtils.getPropValue(properties, "updated-cardProgram").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-cardProgram"), commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM"), "Card Program field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-cardProgram"), commonPage.getSpecificValueFromMapObject(queryResults, "CARDPROGRAM"), "Previous value of field Card Program");                }//                if (!PropUtils.getPropValue(properties, "updated-customerParent").equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-customerParent"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERPARENT"), "Customer parent field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-customerParent"), commonPage.getSpecificValueFromMapObject(queryResults, "CUSTOMERPARENT"), "Previous value of field Customer parent");//                }//                if (!PropUtils.getPropValue(properties, "updated-extAccountRef").equalsIgnoreCase("")) {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-extAccountRef"), commonPage.getSpecificValueFromMapObject(queryResults, "EXACCOUNTREF"), "Ext Account Ref field value latest updated");//                } else {//                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-extAccountRef"), commonPage.getSpecificValueFromMapObject(queryResults, "EXACCOUNTREF"), "Previous value of field Ext Account Ref");//                }                if (!PropUtils.getPropValue(properties, "updated-custServiceExpiresOn").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-custServiceExpiresOn"), commonPage.getSpecificValueFromMapObject(queryResults, "CUST_SERVICE_EXPIRES_ON"), "Cust Service expires on field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-custServiceExpiresOn"), commonPage.getSpecificValueFromMapObject(queryResults, "DOINGBUSICUST_SERVICE_EXPIRES_ONNESSAS"), "Previous value of field Cust Service expires on");                }                if (!PropUtils.getPropValue(properties, "updated-language").equalsIgnoreCase("")) {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "updated-language"), commonPage.getSpecificValueFromMapObject(queryResults, "DESCRIPTION"), "Language field value latest updated");                } else {                    commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "previous-language"), commonPage.getSpecificValueFromMapObject(queryResults, "DESCRIPTION"), "Previous value of field Language");                }            } else {                if (!basePage.getStatusOfElement(By.xpath("//div[@class='title-summary'][contains(text(),'" + PropUtils.getPropValue(properties, "sectionName") + "')]/mav-svg-icon/fa-icon"))) {                    logger.log("Three dot icon for section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not present as expected.");                } else {                    commonPage.assertTwoStrings(logger, "false", "true", "Three dot icon is available for section '" + PropUtils.getPropValue(properties, "sectionName") + "' but none of the fields are editable");                }                logger.log("This section '" + PropUtils.getPropValue(properties, "sectionName") + "' is not editable");            }        }    }    /*    Method to handle fields behaviour in 'Application Details' Edit section     */    public void validateApplicationDetailsSectionOfAccInformationModule(Scenario logger, List<Map<String, String>> valCtrlRecords, int sectionNumber, String actionOfSection) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select a.application_no as applicationNo, mcust.company_no as companyNo,\n" +                "mcust.is_web_access_required,mcust.created_on,at.description as applicationType,a.promotional_material,\n" +                "bt.description as businessType, m.description as Financialyearend,i.description as industrytype,\n" +                "bc.description as classofBuyer,mcust.main_business, t1.description as adminTerritory,\n" +                "t2.description as accountManager,mi.description as mailIndicator,aci.nace_code,aci.information_code_number,\n" +                "aci.is_interest_on_arrears from applications a\n" +                "left join industries i on i.industry_oid = a.industry_oid\n" +                "left join territories t1 on t1.territory_oid = a.admin_territory_oid\n" +                "left join territories t2 on t2.territory_oid = a.marketing_territory_oid\n" +                "left join buyer_classes bc on bc.description_oid = a.buyer_class_did\n" +                "left join months m on m.month_oid = a.fin_year_end_month_oid\n" +                "left join application_types at on at.application_type_oid = a.application_type_oid\n" +                "left join business_types bt on bt.description_oid = a.business_type_did\n" +                "left join m_customers mcust on mcust.application_oid = a.application_oid\n" +                "left join mail_indicators mi on mi.mail_indicator_oid = mcust.MAIL_INDICATOR_OID\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "inner join accounts acc on acc.account_no = mcust.customer_no\n" +                "left join account_credit_information aci on aci.account_oid = acc.account_oid\n" +                "where mcust.customer_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);        List<WebElement> fieldNames = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[1]"));        List<WebElement> fieldValues = basePage.getListOfElements(logger, By.xpath("(//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2]"));        Map<String, String> eligibilityOfViewOrEdit = new HashMap<>();        for (int i = 0; i <= valCtrlRecords.size() - 1; i++) {            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory and Protected") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Protected and displayed")) {                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");            }            if (valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || valCtrlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "true");                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "true");            }            PropUtils.setProps("AccountSummary-" + valCtrlRecords.get(i).get("COLUMN_NAME") + "-status", valCtrlRecords.get(i).get("FIELDSTATUS"), baseUtils.testDataFilePath);//            }else{//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_viewable", "false");//                eligibilityOfViewOrEdit.put(valCtrlRecords.get(i).get("COLUMN_NAME") + "_is_editable", "false");//            }        }        if (actionOfSection.equalsIgnoreCase("view")) {            for (int i = 0; i <= fieldNames.size() - 1; i++) {                if (eligibilityOfViewOrEdit.containsKey("application_no_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("application_no_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Application No.")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "APPLICATIONNO").trim(), fieldValues.get(i).getText().trim(), "Application No. field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "APPLICATIONNO").trim(), "", "Application No. field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("company_no_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("company_no_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Company No.")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "COMPANYNO").trim(), fieldValues.get(i).getText().trim(), "Company No. field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "COMPANYNO").trim(), "", "Company No. field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("is_web_access_required_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("is_web_access_required_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Web access")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "IS_WEB_ACCESS_REQUIRED").trim(), fieldValues.get(i).getText().trim(), "Web access field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "IS_WEB_ACCESS_REQUIRED").trim(), "", "Web access field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("application_type_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("application_type_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Application type")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "APPLICATIONTYPE").trim(), fieldValues.get(i).getText().trim(), "Application type field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "APPLICATIONTYPE").trim(), "", "Application type field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("promotional_material_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("promotional_material_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Promotional material")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PROMOTIONAL_MATERIAL").trim(), fieldValues.get(i).getText().trim(), "Promotional material field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "PROMOTIONAL_MATERIAL").trim(), "", "Promotional material field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("business_type_did_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("business_type_did_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Business type")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BUSINESSTYPE").trim(), fieldValues.get(i).getText().trim(), "Business type field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "BUSINESSTYPE").trim(), "", "Business type field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("fin_year_end_month_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("fin_year_end_month_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Financial year end")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "FINANCIALYEAREND").trim(), fieldValues.get(i).getText().trim(), "Financial year end field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "FINANCIALYEAREND").trim(), "", "Financial year end field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("industry_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("industry_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Industry type")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "INDUSTRYTYPE").trim(), fieldValues.get(i).getText().trim(), "Industry type field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "INDUSTRYTYPE").trim(), "", "Industry type field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("buyer_class_did_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("buyer_class_did_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Class of buyer")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CLASSOFBUYER").trim(), fieldValues.get(i).getText().trim(), "Class of buyer field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CLASSOFBUYER").trim(), "", "Class of buyer field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("main_business_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("main_business_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Main business")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "MAIN_BUSINESS").trim(), fieldValues.get(i).getText().trim(), "Main business field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "MAIN_BUSINESS").trim(), "", "Main business field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("admin_territory_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("admin_territory_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Admin territory")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ADMINTERRITORY").trim(), fieldValues.get(i).getText().trim(), "Admin territory field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ADMINTERRITORY").trim(), "", "Admin territory field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("marketing_territory_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("marketing_territory_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Account manager")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ACCOUNTMANAGER").trim(), fieldValues.get(i).getText().trim(), "Account manager field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "ACCOUNTMANAGER").trim(), "", "Account manager field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("created_on_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("created_on_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Created on")) {                            String datearr[] = {};                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                if (!commonPage.getSpecificValueFromMapObject(queryResults, "CREATED_ON").trim().equalsIgnoreCase("")) {                                    datearr = commonPage.getSpecificValueFromMapObject(queryResults, "CREATED_ON").trim().split(" ")[0].split("-");                                    String[] actValueArr = basePage.userGetTextFromWebElement(logger, By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]")).split("/");                                    commonPage.assertTwoStrings(logger, datearr[2] + "/" + datearr[1].replaceAll("^0+(?!$)", "") + "/" + datearr[0], actValueArr[0] + "/" + actValueArr[1].replaceAll("^0+(?!$)", "") + "/" + actValueArr[2], "Created on field value display based on validation control");                                } else {                                    commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREATED_ON").trim(), "", "Created on field value display based on validation control");                                }                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "CREATED_ON").trim(), "", "Created on field value display based on validation control");                            }                            i = i + 1;                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("mail_indicator_oid_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("mail_indicator_oid_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Mail indicator")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "MAILINDICATOR").trim(), fieldValues.get(i).getText().trim(), "Mail indicator field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "MAILINDICATOR").trim(), "", "Mail indicator field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("nace_code_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("nace_code_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("NACE code")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "NACE_CODE").trim(), fieldValues.get(i).getText().trim(), "NACE code field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "NACE_CODE").trim(), "", "NACE code field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("is_interest_on_arrears_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("is_interest_on_arrears_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Flag of interest delay")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                String flagOfInterestDelay = "";                                if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_INTEREST_ON_ARREARS").trim().equalsIgnoreCase("Y")) {                                    flagOfInterestDelay = "Yes";                                } else if (commonPage.getSpecificValueFromMapObject(queryResults, "IS_INTEREST_ON_ARREARS").trim().equalsIgnoreCase("N")) {                                    flagOfInterestDelay = "No";                                }                                commonPage.assertTwoStrings(logger, flagOfInterestDelay, fieldValues.get(i).getText().trim(), "Flag of interest delay field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "IS_INTEREST_ON_ARREARS").trim(), "", "Flag of interest delay field value display based on validation control");                                i = i + 1;                            }                        }                    }                }                if (eligibilityOfViewOrEdit.containsKey("information_code_number_is_viewable")) {                    if (eligibilityOfViewOrEdit.get("information_code_number_is_viewable").equalsIgnoreCase("true")) {                        if (fieldNames.get(i).getText().equalsIgnoreCase("Information code number")) {                            if (basePage.getStatusOfElement(By.xpath("((//mat-card/mat-grid-list[contains(@class,'mat-grid-list')])[" + sectionNumber + "]/div/mat-grid-tile/figure/div/div[2])[" + (i + 1) + "]"))) {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "INFORMATION_CODE_NUMBER").trim(), fieldValues.get(i).getText().trim(), "Information code number field value display based on validation control");                                i = i + 1;                            } else {                                commonPage.assertTwoStrings(logger, commonPage.getSpecificValueFromMapObject(queryResults, "INFORMATION_CODE_NUMBER").trim(), "", "Information code number field value display based on validation control");                                i = i + 1;                            }                        }                    }                }            }        }    }    /*    Method to handle fields behaviour in Edit section     */    public void handleValidationFieldsBehaviorInEditSections(Scenario logger, String fieldName) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (PropUtils.getPropValue(properties, "AccountSummary-name-status").equalsIgnoreCase("Mandatory")) {            commonPage.assertTwoStrings(logger, basePage.userGetTextFromWebElement(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span[@class='mat-form-field-label-wrapper']/label/mat-label)[1]")) + basePage.userGetTextFromWebElement(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span[@class='mat-form-field-label-wrapper']/label/span)[1]")), "Account name *", "Account Name label");            basePage.userClearTheTextField(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span/mav-input/input)[1]"));            commonPage.handleActionsClassForKeyboardActions("tab");            commonPage.verifyPresenceOfText(logger, "Enter a valid account name");            basePage.userTypeIntoTextField(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span/mav-input/input)[1]"), fieldName);            PropUtils.setProps("Edit-AccountSummary-name", fieldName, baseUtils.testDataFilePath);        }        if (PropUtils.getPropValue(properties, "AccountSummary-name-status").equalsIgnoreCase("Optional")) {            commonPage.assertTwoStrings(logger, basePage.userGetTextFromWebElement(logger, By.cssSelector("mav-form-field[ng-reflect-label='Account name']>mat-form-field>div>div>div[class='mat-form-field-infix']>span[class='mat-form-field-label-wrapper']>label>mat-label")), "Account name", "Account Name label");            basePage.userTypeIntoTextField(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span/mav-input/input)[1]"), fieldName);            PropUtils.setProps("Edit-AccountSummary-name", fieldName, baseUtils.testDataFilePath);        }        if (PropUtils.getPropValue(properties, "AccountSummary-name-status").equalsIgnoreCase("Mandatory and Protected")) {            commonPage.assertTwoStrings(logger, basePage.userGetTextFromWebElement(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span[@class='mat-form-field-label-wrapper']/label/mat-label)[1]")) + basePage.userGetTextFromWebElement(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span[@class='mat-form-field-label-wrapper']/label/span")), "Account name *", "Account Name label");        }        if (PropUtils.getPropValue(properties, "AccountSummary-name-status").equalsIgnoreCase("Protected and displayed")) {            commonPage.assertTwoStrings(logger, basePage.userGetTextFromWebElement(logger, By.xpath("(//mav-form-field[@ng-reflect-label='Account name']/mat-form-field/div/div/div[@class='mat-form-field-infix']/span[@class='mat-form-field-label-wrapper']/label/mat-label)[1]")), "Account name", "Account Name label");        }    }    /*    Method to handle tax numbers     */    public void handleTaxNumbers(Scenario logger, String isAccountLvlTaxNo, String isCountryLvlTaxNo) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        Boolean isAccountNoAvailable = false;        Boolean isTaxNumAccountAvailable = false;        String accountNoWhichIsPresentInTaxTable = "";        String accountNo = "";        String yesAccountTaxQuery = "";        String noAccountTaxQuery = "";        String taxNumQuery = "";        List<Map<String, String>> allRowsOfYesAccountTaxQuery = new ArrayList<>();        List<Map<String, String>> allRowsOfNoAccountTaxQuery = new ArrayList<>();        List<Map<String, String>> allRowsOfTaxNumQuery = new ArrayList<>();        List<Map<String, String>> commonQueryResults = new ArrayList<>();        taxNumQuery = "select distinct mcust.customer_no from tax_numbers tn\n" +                "left join m_customers mcust on mcust.customer_mid = tn.member_oid\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid" +                " where mc.client_mid in ( " + PropUtils.getPropValue(properties, "ClientMID") + ") and rownum<=100";        allRowsOfTaxNumQuery = commonUtils.getAllRowsOfQueryResultsOnListMap(taxNumQuery);        noAccountTaxQuery = "select distinct mcust.customer_no from accounts a\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where a.tax_no is null and mc.client_mid in ( " + PropUtils.getPropValue(properties, "ClientMID") + ") and rownum<=100";        allRowsOfNoAccountTaxQuery = commonUtils.getAllRowsOfQueryResultsOnListMap(noAccountTaxQuery);        yesAccountTaxQuery = "select distinct mcust.customer_no from accounts a\n" +                "left join m_customers mcust on mcust.customer_no = a.account_no\n" +                "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "where a.tax_no is not null and mc.client_mid in ( " + PropUtils.getPropValue(properties, "ClientMID") + ") and rownum<=100";        allRowsOfYesAccountTaxQuery = commonUtils.getAllRowsOfQueryResultsOnListMap(yesAccountTaxQuery);        if (allRowsOfTaxNumQuery.size() == 0) {            if (isAccountLvlTaxNo.equalsIgnoreCase("No")) {                if (allRowsOfNoAccountTaxQuery.size() == 0) {                    isAccountNoAvailable = true;                    accountNo = allRowsOfNoAccountTaxQuery.get(0).get("CUSTOMER_NO");                }            } else if (isAccountLvlTaxNo.equalsIgnoreCase("Yes")) {                if (allRowsOfYesAccountTaxQuery.size() == 0) {                    isAccountNoAvailable = true;                    accountNo = allRowsOfNoAccountTaxQuery.get(0).get("CUSTOMER_NO");                }            }        } else if (isAccountLvlTaxNo.equalsIgnoreCase("No")) {            outerLoop:            for (int i = 0; i <= allRowsOfNoAccountTaxQuery.size() - 1; i++) {                for (int j = 0; j < allRowsOfTaxNumQuery.size() - 1; j++) {                    if (isAccountLvlTaxNo.equalsIgnoreCase("No") && isCountryLvlTaxNo.equalsIgnoreCase("No")) {                        if (j == allRowsOfTaxNumQuery.size() - 1) {                            if (!isAccountNoAvailable) {                                continue;                            } else {                                break outerLoop;                            }                        }                        if (!allRowsOfNoAccountTaxQuery.get(i).get("CUSTOMER_NO").equalsIgnoreCase(allRowsOfTaxNumQuery.get(j).get("CUSTOMER_NO"))) {                            isAccountNoAvailable = true;                            accountNo = allRowsOfNoAccountTaxQuery.get(i).get("CUSTOMER_NO");                        } else {                            isAccountNoAvailable = false;                        }                    }                    if (isAccountLvlTaxNo.equalsIgnoreCase("No") && isCountryLvlTaxNo.equalsIgnoreCase("Yes")) {                        if (allRowsOfNoAccountTaxQuery.get(i).get("CUSTOMER_NO").equalsIgnoreCase(allRowsOfTaxNumQuery.get(j).get("CUSTOMER_NO"))) {                            isAccountNoAvailable = true;                            isTaxNumAccountAvailable = true;                            accountNoWhichIsPresentInTaxTable = allRowsOfNoAccountTaxQuery.get(i).get("CUSTOMER_NO");                            accountNo = allRowsOfNoAccountTaxQuery.get(i).get("CUSTOMER_NO");                            break outerLoop;                        }                    }                }            }        } else if (isAccountLvlTaxNo.equalsIgnoreCase("Yes")) {            outerLoop:            for (int i = 0; i <= allRowsOfYesAccountTaxQuery.size() - 1; i++) {                for (int j = 0; j < allRowsOfTaxNumQuery.size() - 1; j++) {                    if (isAccountLvlTaxNo.equalsIgnoreCase("Yes") && isCountryLvlTaxNo.equalsIgnoreCase("Yes")) {                        if (allRowsOfYesAccountTaxQuery.get(i).get("CUSTOMER_NO").equalsIgnoreCase(allRowsOfTaxNumQuery.get(j).get("CUSTOMER_NO"))) {                            isAccountNoAvailable = true;                            accountNo = allRowsOfYesAccountTaxQuery.get(i).get("CUSTOMER_NO");                            isTaxNumAccountAvailable = true;                            accountNoWhichIsPresentInTaxTable = allRowsOfNoAccountTaxQuery.get(i).get("CUSTOMER_NO");                            break outerLoop;                        }                    }                    if (isAccountLvlTaxNo.equalsIgnoreCase("Yes") && isCountryLvlTaxNo.equalsIgnoreCase("No")) {                        if (j == allRowsOfTaxNumQuery.size() - 1) {                            if (!isAccountNoAvailable) {                                continue;                            } else {                                break outerLoop;                            }                        }                        if (!allRowsOfYesAccountTaxQuery.get(i).get("CUSTOMER_NO").equalsIgnoreCase(allRowsOfTaxNumQuery.get(j).get("CUSTOMER_NO"))) {                            isAccountNoAvailable = true;                            accountNo = allRowsOfYesAccountTaxQuery.get(i).get("CUSTOMER_NO");                        } else {                            isAccountNoAvailable = false;                        }                    }                }            }        }        properties = PropUtils.getProps(baseUtils.testDataFile);        if (isAccountNoAvailable) {            PropUtils.setProps("taxNumber-AccountNumber", accountNo, baseUtils.testDataFilePath);        } else {            PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "There is no account is available to execute this scenario", baseUtils.testDataFilePath);        }        if (isTaxNumAccountAvailable) {            String query = "select tn.TAX_NUMBER_OID,c.description as country,c.country_code,const.description as taxType,\n" +                    "tn.effective_on,tn.expires_on,tn.tax_no from tax_numbers tn\n" +                    "left join countries c on c.country_oid = tn.country_oid\n" +                    "left join constants const on const.constant_oid = tn.tax_type_cid\n" +                    "left join m_customers mcust on mcust.customer_mid = tn.member_oid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mcust.customer_no = '" + accountNoWhichIsPresentInTaxTable + "' and \n" +                    "mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ") and rownum<=10";            Map<String, String> queryResults = commonUtils.getQueryResultsOnMap(query);            logger.log(query);            String expiryDate = commonPage.getDesiredDateInSpecificFormat(logger, queryResults.get("EFFECTIVE_ON").substring(0, 10), 1000, "future", "yyyy-mm-dd", "yyyy-mm-dd");            query = "UPDATE TAX_NUMBERS SET EXPIRES_ON = TO_DATE('" + expiryDate + " 00:00:00', 'YYYY-MM-DD HH24:MI:SS') WHERE tax_number_oid = " + queryResults.get("TAX_NUMBER_OID");            commonUtils.executeUpdateQuery(query);            PropUtils.setProps("expiryDateOfVatNo", expiryDate, baseUtils.testDataFilePath);            PropUtils.setProps("expiryDateFormat", "yyyy-mm-dd", baseUtils.testDataFilePath);        }    }    /*    Method to add new vat number based on validation control     */    public void addNewVatNumberBasedOnValidationControl(Scenario logger, List<Map<String, String>> validationControlRecords) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        commonPage.sleepForFewSeconds(4);        List<WebElement> labels = basePage.getListOfElements(logger, By.cssSelector("div[class='mat-form-field-infix']>span>label"));//        for (int i = 0; i < validationControlRecords.size() - 1; i++) {//            if (validationControlRecords.get(i).get("COLUMN_NAME").equalsIgnoreCase("country_oid")) {//                if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                    commonPage.assertTwoStrings(logger, "Country *", labels.get(1).getText(), "Country");//                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='vatCountry']>mat-select"));//                    Actions actions = new Actions(driver);//                    actions.moveToElement(basePage.getWebElementUsingLocator(logger, By.xpath("//div[contains(text(),'Add new country specific VAT number')]"))).click().perform();//                    commonPage.verifyPresenceOfText(logger, "Select a valid county");//                } else {//                    commonPage.assertTwoStrings(logger, "Country", labels.get(1).getText(), "Country");//                }//            }//            if (validationControlRecords.get(i).get("COLUMN_NAME").equalsIgnoreCase("tax_type_cid")) {//                if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                    commonPage.assertTwoStrings(logger, "Tax exempt *", labels.get(2).getText(), "Tax exempt");//                    basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='vatTaxExempt']>mat-select"));//                    Actions actions = new Actions(driver);//                    actions.moveToElement(basePage.getWebElementUsingLocator(logger, By.xpath("//div[contains(text(),'Add new country specific VAT number')]"))).click().perform();//                    commonPage.verifyPresenceOfText(logger, "Select a valid tax excempt");//                } else {//                    commonPage.assertTwoStrings(logger, "Tax exempt", labels.get(2).getText(), "Tax exempt");//                }//            }//            if (validationControlRecords.get(i).get("COLUMN_NAME").equalsIgnoreCase("effective_on")) {//                if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                    commonPage.assertTwoStrings(logger, "Effective date *", labels.get(3).getText(), "Effective date");//                    basePage.userClick(logger, By.cssSelector("mav-input[ng-reflect-name='vatEffectiveData']>input"));//                    Actions actions = new Actions(driver);//                    actions.moveToElement(basePage.getWebElementUsingLocator(logger, By.xpath("//div[contains(text(),'Add new country specific VAT number')]"))).click().perform();//                    commonPage.verifyPresenceOfText(logger, "Select a valid effective date");//                } else {//                    commonPage.assertTwoStrings(logger, "Effective date", labels.get(3).getText(), "Effective date");//                }//            }//            if (validationControlRecords.get(i).get("COLUMN_NAME").equalsIgnoreCase("expires_on")) {//                if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                    commonPage.assertTwoStrings(logger, "Expiry date *", labels.get(4).getText(), "Expiry date");//                    basePage.userClick(logger, By.cssSelector("mav-input[ng-reflect-name='vatExpiryDate']>input"));//                    commonPage.handleActionsClassForKeyboardActions("escape");//                    commonPage.handleActionsClassForKeyboardActions("tab");//                    commonPage.verifyPresenceOfText(logger, "Select a valid expiry date");//                } else {//                    commonPage.assertTwoStrings(logger, "Expiry date", labels.get(4).getText(), "Expiry date");//                }//            }//            if (validationControlRecords.get(i).get("COLUMN_NAME").equalsIgnoreCase("tax_no")) {//                if (validationControlRecords.get(i).get("FIELDSTATUS").equalsIgnoreCase("Mandatory")) {//                    commonPage.assertTwoStrings(logger, "VAT number", labels.get(0).getText(), "Vat Number");//                    basePage.userClick(logger, By.cssSelector("mav-input[ng-reflect-name='vatTaxNo']>input"));//                    commonPage.handleActionsClassForKeyboardActions("tab");//                    commonPage.verifyPresenceOfText(logger, "Enter a valid VAT number");//                } else {//                    commonPage.assertTwoStrings(logger, "VAT number", labels.get(0).getText(), "Vat Number");//                }//            }//        }        basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='vatCountry']>mat-select"));        basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));        PropUtils.setProps("addNewVatNumber-Country", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='vatCountry']"), "ng-reflect-value"), baseUtils.testDataFilePath);        basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='vatTaxExempt']>mat-select"));        basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));        PropUtils.setProps("addNewVatNumber-TaxExempt", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='vatTaxExempt']"), "ng-reflect-value"), baseUtils.testDataFilePath);        String vatNumber = PasswordGenerator.generateAlphaNumeric(logger, 10);        basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='vatTaxNo']>input"), vatNumber);        PropUtils.setProps("add-vatTaxNo", vatNumber, baseUtils.testDataFilePath);        String effectiveDate = "";        String expiryDate = "";        if (!PropUtils.getPropValue(properties, "effectiveDateNo").equalsIgnoreCase("")) {            effectiveDate = String.valueOf(Integer.parseInt(PropUtils.getPropValue(properties, "effectiveDateNo")) + 1);            expiryDate = String.valueOf(Integer.parseInt(effectiveDate) + 10);        } else {            effectiveDate = "1";            expiryDate = "10";        }//        commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "vatEffectiveData", effectiveDate, "future");        String[] dateToBeSelected = commonPage.getDesiredDateInSpecificFormat(logger, commonPage.getClientProcessingDate().split(" ")[0], Integer.parseInt("0"), "future", "yyyy-MM-dd", "dd-MMM-yyyy").split("-");//            Actions actions = new Actions(driver);        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", basePage.getWebElementUsingLocator(logger, By.cssSelector("mav-input[ng-reflect-name='vatEffectiveData']>input")));//            actions.moveToElement().click().perform();        basePage.userClick(logger, By.cssSelector("mav-input[ng-reflect-name='vatEffectiveData']>input"));        commonPage.handleDatePickerForPastOrFutureDateSelection(logger, dateToBeSelected[1], dateToBeSelected[0], dateToBeSelected[2]);        PropUtils.setProps("Date-vatEffectiveData", dateToBeSelected[0] + "/" + commonPage.getIndexOfMonth(dateToBeSelected[1].toUpperCase()) + "/" + dateToBeSelected[2], baseUtils.testDataFilePath);        commonPage.clickOnDateFieldAndSelectFutureOrPastDate(logger, "vatExpiryDate", expiryDate, "future");        PropUtils.setProps("effectiveDateNo", effectiveDate, baseUtils.testDataFilePath);    }    /*    Method to handle editVehicleFunctionalityBasedOnValidationControls     */    public void editVehicleFunctionalityBasedOnValidationControls(Scenario logger, Map<String, String> validationControlRecords) {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        if (validationControlRecords.get("COLUMN_NAME").equalsIgnoreCase("license_plate")) {            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "vehicle-licensePlate"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='vehicleLP']>input"), "ng-reflect-model"), "License Plate");            if (validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                String licensePlate = PasswordGenerator.generateAlphaNumeric(logger, 6);                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='vehicleLP']>input"), licensePlate);                PropUtils.setProps("vehicle-licensePlate", licensePlate, baseUtils.testDataFilePath);                PropUtils.setProps("isVehicleEdited", "true", baseUtils.testDataFilePath);            }        }        if (validationControlRecords.get("COLUMN_NAME").equalsIgnoreCase("vehicle_type_did")) {            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "vehicle-vehicleType"), commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='vehicleType']>mat-select"), "ng-reflect-model"), "Vehicle Type");            if (validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                basePage.userClick(logger, By.cssSelector("mav-select[ng-reflect-name='vehicleType']>mat-select"));                basePage.selectRandomValueFromDropDown(logger, By.cssSelector("span[class='mat-option-text']"));                PropUtils.setProps("vehicle-vehicleType", commonPage.getAttributeValue(By.cssSelector("mav-select[ng-reflect-name='vehicleType']>mat-select"), "ng-reflect-model"), baseUtils.testDataFilePath);                PropUtils.setProps("isVehicleEdited", "true", baseUtils.testDataFilePath);            }        }        if (validationControlRecords.get("COLUMN_NAME").equalsIgnoreCase("model")) {            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "vehicle-model"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='vehicleModel']>input"), "ng-reflect-model"), "Vehicle model");            if (validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                String model = PasswordGenerator.generateAlphaNumeric(logger, 6);                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='vehicleModel']>input"), model);                PropUtils.setProps("vehicle-model", model, baseUtils.testDataFilePath);                PropUtils.setProps("isVehicleEdited", "true", baseUtils.testDataFilePath);            }        }        if (validationControlRecords.get("COLUMN_NAME").equalsIgnoreCase("vehicleVO.description")) {            commonPage.assertTwoStrings(logger, PropUtils.getPropValue(properties, "vehicle-description"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='vehicleDes']>input"), "ng-reflect-model"), "Vehicle description");            if (validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Mandatory") || validationControlRecords.get("FIELDSTATUS").equalsIgnoreCase("Optional")) {                String vehicleDescription = PasswordGenerator.generateAlphaNumeric(logger, 10);                basePage.userTypeIntoTextField(logger, By.cssSelector("mav-input[ng-reflect-name='vehicleDes']>input"), vehicleDescription);                PropUtils.setProps("vehicle-description", vehicleDescription, baseUtils.testDataFilePath);                PropUtils.setProps("isVehicleEdited", "true", baseUtils.testDataFilePath);            }        } else {            commonPage.assertTwoStrings(logger, "****" + PropUtils.getPropValue(properties, "vehicle-cardNo"), commonPage.getAttributeValue(By.cssSelector("mav-input[ng-reflect-name='vehicleCardNo']>input"), "ng-reflect-model"), "Card No");        }    }    /*    Method to get billing details in staging table     */    public List<Map<String, String>> getBillingDetailsFromStagingTable() {        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String stagingQuery = "select fgf.description as fieldName, fscv.value,c.description as approvalStatus from field_group_fields fgf\n" +                "inner join field_set_controls fsc on fsc.field_group_oid = fgf.field_group_oid\n" +                "inner join field_set_control_values fscv on fscv.field_set_control_oid = fsc.field_set_control_oid and fscv.field_group_field_oid = fgf.field_group_field_oid\n" +                "inner join accounts a on a.account_oid = fsc.account_oid\n" +                "inner join m_customers mcust on mcust.customer_mid = a.customer_mid\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "inner join constants c on c.constant_oid = fsc.APPROVAL_STATUS_CID\n" +                "where fgf.field_group_oid = 22 and a.account_no = '" + PropUtils.getPropValue(properties, "commonAccountNo") + "'" +                " and mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID");        return commonUtils.getAllRowsOfQueryResultsOnListMap(stagingQuery);    }    /*    Method to get an account number which is not having pending or posted approval request     */    public void getAnAccountNumberWhichIsNotHavingPendingOrPostedApprovalRequest(Scenario logger, String module, String requestType, String canApproveOwnFlag, String userName) {        PropUtils.setProps("isReqExistsForCustomer", "", baseUtils.testDataFilePath);        String requestCondition = "";        String moduleCondition = "";        if (module.equalsIgnoreCase("Customer")) {            moduleCondition = "Customer - Date Effective approvals";        } else if (module.equalsIgnoreCase("Account")) {            moduleCondition = "Account - Date Effective approvals";        } else if (module.equalsIgnoreCase("TaxNumber")) {            moduleCondition = "Tax Number - Date Effective approvals";        } else if (module.equalsIgnoreCase("Hierarchy")) {            moduleCondition = module;        }        String userCondition = "";        if (canApproveOwnFlag.equalsIgnoreCase("Y")) {            userCondition = " and fsc.last_updated_by = '" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile), "currentUserName") + "'";        } else if (canApproveOwnFlag.equalsIgnoreCase("N")) {            userCondition = " and fsc.last_updated_by not in ('" + PropUtils.getPropValue(PropUtils.getProps(baseUtils.commonPropertyFile), "currentUserName") + "')";        }        if (requestType.equalsIgnoreCase("notHavingPendingOrPosted")) {            requestCondition = "and fsc.FIELD_SET_CTRL_STATUS_CID in (select constant_oid from\n" +                    "constants where description in ('New','Posted') and constant_type_oid = (select constant_type_oid \n" +                    "from constant_types where table_name = 'FIELD_SET_CTRL_STATUS'))\n" +                    "and fsc.APPROVAL_STATUS_CID in (select\n" +                    "constant_oid from constants where description = 'Pending' and constant_type_oid = (select constant_type_oid \n" +                    "from constant_types where table_name = 'APPROVAL_STATUS')) ";        } else if (requestType.equalsIgnoreCase("Pending")) {            requestCondition = "and fsc.FIELD_SET_CTRL_STATUS_CID in (select constant_oid from\n" +                    "constants where description in ('New') and constant_type_oid = (select constant_type_oid \n" +                    "from constant_types where table_name = 'FIELD_SET_CTRL_STATUS'))\n" +                    "and fsc.APPROVAL_STATUS_CID in (select\n" +                    "constant_oid from constants where description = 'Pending' and constant_type_oid = (select constant_type_oid \n" +                    "from constant_types where table_name = 'APPROVAL_STATUS')) ";        }        Properties properties = PropUtils.getProps(baseUtils.testDataFile);        String query = "select mcust.customer_no from m_customers mcust\n" +                "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                "left join accounts a on a.customer_mid = mcust.customer_mid\n" +                "left join account_status acs on acs.account_status_oid = a.account_status_oid\n" +                "left join account_sub_status acss on acss.ACCOUNT_SUB_STATUS_OID = a.ACCOUNT_SUB_STATUS_OID\n" +                "left join applications a on a.application_oid = mcust.application_oid\n" +                "left join application_status aps on aps.application_status_oid = a.application_status_oid\n" +                "left join constants c on c.constant_oid = aps.application_mode_cid\n" +                "inner join account_credit_information aci on aci.ACCOUNT_OID = a.ACCOUNT_OID\n" +                "where  mc.client_mid in (" + PropUtils.getPropValue(properties, "ClientMID") + ")\n" +                "and aci.CREDIT_INFORMATION_NO is not null and mcust.customer_value_1_oid is not null order by a.account_no asc";        List<Map<String, String>> allAccounts = commonUtils.getAllRowsOfQueryResultsOnListMap(query);        String appRequestsAccounts = "";        if (!moduleCondition.equalsIgnoreCase("Hierarchy")) {            appRequestsAccounts = "select mcust.customer_no,fsc.field_set_control_oid from field_set_controls fsc\n" +                    "left join m_customers mcust on mcust.customer_mid = fsc.customer_mid\n" +                    "left join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "left join field_groups fg on fg.field_group_oid = fsc.field_group_oid\n" +                    "left join accounts a on a.customer_mid = mcust.customer_mid\n" +                    "inner join account_credit_information aci on aci.ACCOUNT_OID = a.ACCOUNT_OID\n" +                    "where mc.client_mid = 101 and fg.description = '" + moduleCondition + "'\n" +                    "" + requestCondition + " and " +                    "aci.CREDIT_INFORMATION_NO is not null and mcust.customer_value_1_oid is not null ";        } else {            appRequestsAccounts = "select * from wf_hierarchies wf\n" +                    "inner join m_customers mcust on mcust.customer_mid = wf.OWNING_MEMBER_OID\n" +                    "inner join m_clients mc on mc.client_mid = mcust.client_mid\n" +                    "where mc.client_mid = " + PropUtils.getPropValue(properties, "ClientMID") + " and wf.record_status_cid = (select constant_oid from\n" +                    "constants where description = 'Valid' and constant_type_oid = (select constant_type_oid \n" +                    "from constant_types where table_name = 'RECORD_STATUS')) and wf.approval_status_cid = (select\n" +                    "constant_oid from constants where description = 'Pending' and constant_type_oid = (select constant_type_oid \n" +                    "from constant_types where table_name = 'APPROVAL_STATUS'))";        }        List<Map<String, String>> requestExistsAccountsWithUserCond = new ArrayList<>();        requestExistsAccountsWithUserCond = commonUtils.getAllRowsOfQueryResultsOnListMap(appRequestsAccounts + userCondition);        List<Map<String, String>> requestExistsAccountWithOutUserCond = new ArrayList<>();        if (requestExistsAccountsWithUserCond.size() == 0) {            requestExistsAccountWithOutUserCond = commonUtils.getAllRowsOfQueryResultsOnListMap(appRequestsAccounts);        }        if (requestExistsAccountsWithUserCond.size() != 0) {            PropUtils.setProps("commonAccountNo", requestExistsAccountsWithUserCond.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);            PropUtils.setProps("isReqExistsForCustomer", "Yes", baseUtils.testDataFilePath);            PropUtils.setProps("fieldSetControlOid", requestExistsAccountsWithUserCond.get(0).get("FIELD_SET_CONTROL_OID"), baseUtils.testDataFilePath);            PropUtils.setProps("skipReason", "Already request is available for existing customer so no need to create a new request", baseUtils.testDataFilePath);        } else {            int count = 0;            if (allAccounts.size() > 0 && requestExistsAccountWithOutUserCond.size() > 0) {                outerloop:                for (int i = 0; i <= allAccounts.size() - 1; i++) {                    count = 0;                    for (int j = 0; j <= requestExistsAccountWithOutUserCond.size() - 1; j++) {                        if (count != 0) {                            break;                        }                        if (requestType.equalsIgnoreCase("notHavingPendingOrPosted")) {                            if (!allAccounts.get(i).get("CUSTOMER_NO").equalsIgnoreCase(requestExistsAccountWithOutUserCond.get(j).get("CUSTOMER_NO"))) {                                if (j == requestExistsAccountWithOutUserCond.size() - 1) {                                    PropUtils.setProps("commonAccountNo", allAccounts.get(i).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                                    break outerloop;                                }                            } else {                                count++;                            }                        } else if (requestType.equalsIgnoreCase("Pending")) {                            if (allAccounts.get(i).get("CUSTOMER_NO").equalsIgnoreCase(requestExistsAccountWithOutUserCond.get(j).get("CUSTOMER_NO"))) {//                                if (j == requestExistsAccountWithOutUserCond.size() - 1) {                                PropUtils.setProps("commonAccountNo", allAccounts.get(i).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                                PropUtils.setProps("isReqExistsForCustomer", "Yes", baseUtils.testDataFilePath);                                PropUtils.setProps("fieldSetControlOid", requestExistsAccountWithOutUserCond.get(j).get("FIELD_SET_CONTROL_OID"), baseUtils.testDataFilePath);                                if (module.equalsIgnoreCase("Hierarchy")) {                                    PropUtils.setProps("testStatus", "Skipped", baseUtils.testDataFilePath);                                    PropUtils.setProps("skipReason", "Account available to execute this scenario so no need to create a new hierarchy", baseUtils.testDataFilePath);                                }                                break outerloop;//                                }                            } else {                                count++;                            }                        }                    }                }            } else if (allAccounts.size() > 0) {                if (!module.equalsIgnoreCase("Hierarchy")) {                    PropUtils.setProps("commonAccountNo", allAccounts.get(0).get("CUSTOMER_NO"), baseUtils.testDataFilePath);                }            }        }    }    /*    Method click three dot icon for tax number     */    public void clickThreeDotIconForTaxNumber(Scenario logger, Properties properties) {        String country = "";        String taxNo = "";        String effectiveDate = "";        String status = "";        if (!PropUtils.getPropValue(properties, "fieldSetControlOid").equalsIgnoreCase("")) {            String query = "select fgf.field_name, fscv.value from field_group_fields fgf\n" +                    "inner join field_set_control_values fscv on fscv.field_group_field_oid = fgf.field_group_field_oid\n" +                    "where fgf.field_group_oid = (select field_group_oid from field_groups where description = 'Tax Number - Date Effective approvals')\n" +                    "and fscv.field_set_control_oid = " + PropUtils.getPropValue(properties, "fieldSetControlOid");            List<Map<String, String>> queryResults = commonUtils.getAllRowsOfQueryResultsOnListMap(query);            for (int i = 0; i <= queryResults.size() - 1; i++) {                if (queryResults.get(i).get("FIELD_NAME").equalsIgnoreCase("country_oid")) {                    country = commonUtils.getQueryResultsOnMap("select description from countries where country_oid = " + queryResults.get(i).get("VALUE")).get("DESCRIPTION");                }                if (queryResults.get(i).get("FIELD_NAME").equalsIgnoreCase("tax_no")) {                    taxNo = queryResults.get(i).get("VALUE");                }                if (queryResults.get(i).get("FIELD_NAME").equalsIgnoreCase("effective_on")) {                    effectiveDate = queryResults.get(i).get("VALUE").split(" ")[0];                }            }        } else {            country = commonUtils.getQueryResultsOnMap("select description from countries where country_oid = " + PropUtils.getPropValue(properties, "addNewVatNumber-Country")).get("DESCRIPTION");            taxNo = PropUtils.getPropValue(properties, "add-vatTaxNo");            effectiveDate = PropUtils.getPropValue(properties, "Date-vatEffectiveData");        }        List<WebElement> taxTypes = basePage.getListOfElements(logger, By.cssSelector("div[class='adminCountryTax ng-star-inserted']"));        List<WebElement> noOfRecords = basePage.getListOfElements(logger, By.xpath("(//mat-grid-list[@class='mat-grid-list'])"));        List<WebElement> fields = new ArrayList<>();        for (int i = 0; i <= noOfRecords.size() - 1; i++) {            fields.clear();            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", basePage.getWebElementUsingLocator(logger, By.xpath("(//mat-grid-list[@class='mat-grid-list'])[" + (i + 1) + "]")));            fields = basePage.getListOfElements(logger, By.xpath("(//mat-grid-list[@class='mat-grid-list'])[" + (i + 1) + "]/div/mat-grid-tile/figure/div/div"));            if (country.equalsIgnoreCase(fields.get(0).getText()) && taxNo.equalsIgnoreCase(fields.get(1).getText()) && effectiveDate.equalsIgnoreCase(fields.get(2).getText()) && fields.get(3).getText().equalsIgnoreCase("Pending")) {                Actions actions = new Actions(driver);                if (taxTypes.size() == 2) {                    actions.moveToElement(basePage.getWebElementUsingLocator(logger, By.xpath("(//button/div/mav-svg-icon)[" + i + "]"))).click().perform();//                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",basePage.getWebElementUsingLocator(logger,By.xpath("(//button/div/mav-svg-icon)[" + i + "]")));//                    basePage.userClick(logger, By.xpath("(//button/div/mav-svg-icon)[" + i + "]"));                } else {                    actions.moveToElement(basePage.getWebElementUsingLocator(logger, By.xpath("(//button/div/mav-svg-icon)[" + (i - 1) + "]"))).click().perform();//                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",basePage.getWebElementUsingLocator(logger,By.xpath("(//button/div/mav-svg-icon)[" + (i-1) + "]")));//                    basePage.userClick(logger, By.xpath("(//button/div/mav-svg-icon)[" + (i-1) + "]"));                }                break;            }        }    }}